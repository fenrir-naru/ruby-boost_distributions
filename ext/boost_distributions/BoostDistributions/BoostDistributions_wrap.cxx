/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
# define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif



/*
 * The following macros are used for providing the correct type of a
 * function pointer to the Ruby C API.
 * Starting with Ruby 2.7 (corresponding to RB_METHOD_DEFINITION_DECL being
 * defined) these macros act transparently due to Ruby's moving away from
 * ANYARGS and instead employing strict function signatures.
 *
 * Note: In case of C (not C++) the macros are transparent even before
 * Ruby 2.7 due to the fact that the Ruby C API used function declarators
 * with empty parentheses, which allows for an unspecified number of
 * arguments.
 *
 * PROTECTFUNC(f) is used for the function pointer argument of the Ruby
 * C API function rb_protect().
 *
 * VALUEFUNC(f) is used for the function pointer argument(s) of Ruby C API
 * functions like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is used to typecast a C function that implements either
 * the "mark" or "free" stuff for a Ruby Data object, so that it can be
 * passed as an argument to Ruby C API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 *
 * SWIG_RUBY_VOID_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like rb_define_virtual_variable().
 *
 * SWIG_RUBY_INT_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like st_foreach().
 */
#if defined(__cplusplus) && !defined(RB_METHOD_DEFINITION_DECL)
#  define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#  define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#  define VOIDFUNC(f) ((RUBY_DATA_FUNC) f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) ((void (*)(ANYARGS))(f))
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) ((int (*)(ANYARGS))(f))
#else
#  define PROTECTFUNC(f) (f)
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) (f)
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects.
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ID id, VALUE *var) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT",
                             VALUEFUNC(swig_ruby_trackings_count),
                             SWIG_RUBY_VOID_ANYARGS_FUNC((rb_gvar_setter_t*)NULL));
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object. */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    // object might have the T_ZOMBIE type, but that's just
    // because the GC has flagged it as such for a deferred
    // destruction. Until then, it's still a T_DATA object.
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(st_data_t ptr, st_data_t obj, st_data_t meth) {
  ((void (*) (void *, VALUE))meth)((void *)ptr, (VALUE)obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings,
             SWIG_RUBY_INT_ANYARGS_FUNC(swig_ruby_internal_iterate_callback),
             (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  assert(type);
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  if (NIL_P(stype))
    return NULL;
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj)) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj))) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t swig_types[0]
#define SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t swig_types[1]
#define SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t swig_types[2]
#define SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t swig_types[3]
#define SWIGTYPE_p_boost__math__binomial_distributionT_t swig_types[4]
#define SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t swig_types[5]
#define SWIGTYPE_p_boost__math__cauchy_distributionT_double_t swig_types[6]
#define SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t swig_types[7]
#define SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t swig_types[8]
#define SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t swig_types[9]
#define SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t swig_types[10]
#define SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t swig_types[11]
#define SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t swig_types[12]
#define SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t swig_types[13]
#define SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t swig_types[14]
#define SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t swig_types[15]
#define SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t swig_types[16]
#define SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t swig_types[17]
#define SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t swig_types[18]
#define SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t swig_types[19]
#define SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t swig_types[20]
#define SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t swig_types[21]
#define SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t swig_types[22]
#define SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t swig_types[23]
#define SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_t swig_types[24]
#define SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t swig_types[25]
#define SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_t swig_types[26]
#define SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t swig_types[27]
#define SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t swig_types[28]
#define SWIGTYPE_p_boost__math__non_central_t_distributionT_double_t swig_types[29]
#define SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t swig_types[30]
#define SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t swig_types[31]
#define SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t swig_types[32]
#define SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t swig_types[33]
#define SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t swig_types[34]
#define SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t swig_types[35]
#define SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t swig_types[36]
#define SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t swig_types[37]
#define SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t swig_types[38]
#define SWIGTYPE_p_char swig_types[39]
#define SWIGTYPE_p_double swig_types[40]
#define SWIGTYPE_p_policy_type swig_types[41]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[42]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[43]
#define SWIGTYPE_p_value_type swig_types[44]
static swig_type_info *swig_types[46];
static swig_module_info swig_module = {swig_types, 45, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_BoostDistributions
#define SWIG_name    "BoostDistributions"

static VALUE mBoostDistributions;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


namespace swig {
  class SwigGCReferences {
    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      SwigGCReferences &s_references = instance();
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      // Hash of all GC_VALUE's currently in use
      static SwigGCReferences s_references;

      return s_references;
    }
    static void initialize() {
      SwigGCReferences &s_references = instance();
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(_hash, obj, INT2NUM(n));
        else
          rb_hash_delete(_hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE, VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                       (VALUEFUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                     (VALUEFUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                     (VALUEFUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


#include <sstream>
#include <stdexcept>

#include <boost/version.hpp>
#define BOOST_VERSION_LESS_THAN(ver) (BOOST_VERSION < ver)

#include <boost/math/distributions.hpp>
namespace boost { namespace math {
template <int RequiredVersion, bool check_passed = !BOOST_VERSION_LESS_THAN(RequiredVersion)>
struct distribution_shim_t {
#define GEN_FUNC(func_name) \
template <class DistT, class ValueT> \
inline static typename DistT::value_type func_name(const DistT &dist, const ValueT &x){ \
  return boost::math::func_name(dist, x); \
}
  GEN_FUNC(pdf);
  GEN_FUNC(hazard);
  GEN_FUNC(chf);
#undef GEN_FUNC
#define GEN_FUNC(func_name) \
template <class DistT, class ValueT> \
inline static typename DistT::value_type func_name( \
    const DistT &dist, const ValueT &x, const bool &is_complement = false){ \
  return is_complement \
      ? boost::math::func_name(complement(dist, x)) \
      : boost::math::func_name(dist, x); \
}
  GEN_FUNC(cdf);
  GEN_FUNC(quantile);
#undef GEN_FUNC
#define GEN_FUNC(func_name) \
template <class DistT> \
inline static typename DistT::value_type func_name(const DistT &dist){ \
  return boost::math::func_name(dist); \
}
  GEN_FUNC(mean);
  GEN_FUNC(median);
  GEN_FUNC(mode);
  GEN_FUNC(standard_deviation);
  GEN_FUNC(variance);
  GEN_FUNC(skewness);
  GEN_FUNC(kurtosis);
  GEN_FUNC(kurtosis_excess);
#undef GEN_FUNC
#define GEN_FUNC(func_name) \
template <class DistT> \
inline static std::pair<typename DistT::value_type, typename DistT::value_type> \
    func_name(const DistT &dist){ \
  return boost::math::func_name(dist); \
}
  GEN_FUNC(range);
  GEN_FUNC(support);
#undef GEN_FUNC
};
template <int RequiredVersion>
struct distribution_shim_t<RequiredVersion, false> { // dummy
  static const std::string err_msg(){
    std::stringstream ss;
    ss << "BOOST_VERSION(" << BOOST_VERSION 
        << ") should be >= " << RequiredVersion;
    return ss.str();
  }
#define GEN_FUNC(func_name) \
template <class DistT, class ValueT> \
inline static typename DistT::value_type func_name(const DistT &dist, const ValueT &x){ \
  throw std::logic_error(err_msg()); \
}
  GEN_FUNC(pdf);
  GEN_FUNC(hazard);
  GEN_FUNC(chf);
#undef GEN_FUNC
#define GEN_FUNC(func_name) \
template <class DistT, class ValueT> \
inline static typename DistT::value_type func_name( \
    const DistT &dist, const ValueT &x, const bool &is_complement = false){ \
  throw std::logic_error(err_msg()); \
}
  GEN_FUNC(cdf);
  GEN_FUNC(quantile);
#undef GEN_FUNC
#define GEN_FUNC(func_name) \
template <class DistT> \
inline static typename DistT::value_type func_name(const DistT &dist){ \
  throw std::logic_error(err_msg()); \
}
  GEN_FUNC(mean);
  GEN_FUNC(median);
  GEN_FUNC(mode);
  GEN_FUNC(standard_deviation);
  GEN_FUNC(variance);
  GEN_FUNC(skewness);
  GEN_FUNC(kurtosis);
  GEN_FUNC(kurtosis_excess);
#undef GEN_FUNC
#define GEN_FUNC(func_name) \
template <class DistT> \
inline static std::pair<typename DistT::value_type, typename DistT::value_type> \
    func_name(const DistT &dist){ \
  throw std::logic_error(err_msg()); \
}
  GEN_FUNC(range);
  GEN_FUNC(support);
#undef GEN_FUNC
};
template <class RealType, int RequiredVersion>
struct distribution_dummy_t {
  typedef RealType value_type;
  static const std::string err_msg(){
    return distribution_shim_t<RequiredVersion, false>::err_msg();
  }
  distribution_dummy_t(){throw std::logic_error(err_msg());}
  
  // static/member functions
#define GEN_FUNC_m(ret_type, fun_name) \
ret_type fun_name(...) const {throw std::logic_error(err_msg());}
#define GEN_FUNC_s(ret_type, fun_name) \
static ret_type fun_name(...){throw std::logic_error(err_msg());}

  GEN_FUNC_m(RealType, x_max); // arcsine
  GEN_FUNC_m(RealType, x_min); // arcsine
  GEN_FUNC_m(RealType, success_fraction);
      // bernoulli, binomial, geometric, negative_binomial
  GEN_FUNC_m(RealType, alpha); // beta, non_central_beta
  GEN_FUNC_m(RealType, beta); // beta, non_central_beta
  GEN_FUNC_s(RealType, find_alpha); // beta
  GEN_FUNC_s(RealType, find_beta); // beta
  GEN_FUNC_s(RealType, find_lower_bound_on_p);
      // binomial, geometric, negative_binomial
  GEN_FUNC_s(RealType, find_maximum_number_of_trials);
      // binomial, geometric, negative_binomial
  GEN_FUNC_s(RealType, find_minimum_number_of_trials);
      // binomial, geometric, negative_binomial
  GEN_FUNC_s(RealType, find_upper_bound_on_p);
      // binomial, geometric, negative_binomial
  GEN_FUNC_m(RealType, trails); // binomial
  GEN_FUNC_m(RealType, location);
      // cauchy, extreme_value, inverse_gaussian, 
      // laplace, logistic, lognormal, normal, skew_normal
  GEN_FUNC_m(RealType, scale);
      // cauchy, extreme_value, gamma, inverse_chi_squared,
      // inverse_gamma, inverse_gaussian, laplace, logistic,
      // lognormal, normal, pareto, skew_normal, weibull
  GEN_FUNC_s(RealType, find_degrees_of_freedom);
      // chi_squared, non_central_chi_squared, students_t
  GEN_FUNC_m(RealType, degrees_of_freedom);
      // chi_squared, inverse_chi_squared, non_central_chi_squared,
      // non_central_t, students_t
  GEN_FUNC_m(RealType, lambda); // exponential
  GEN_FUNC_m(RealType, degrees_of_freedom1); // fisher_f, non_central_f
  GEN_FUNC_m(RealType, degrees_of_freedom2); // fisher_f, non_central_f
  GEN_FUNC_m(RealType, shape);
      // gamma, inverse_gamma, inverse_gaussian, pareto,
      // skew_normal, weibull
  GEN_FUNC_m(RealType, successes); // geometric, negative_binomial
  GEN_FUNC_m(std::vector<RealType>, probabilities); // hyperexponential
  GEN_FUNC_m(std::vector<RealType>, rates); // hyperexponential
  GEN_FUNC_m(std::size_t, num_phases); // hyperexponential
  GEN_FUNC_m(bool, check_params); // hypergeometric
  GEN_FUNC_m(bool, check_x); // hypergeometric
  GEN_FUNC_m(unsigned, defective); // hypergeometric
  GEN_FUNC_m(unsigned, sample_count); // hypergeometric
  GEN_FUNC_m(unsigned, total); // hypergeometric
  GEN_FUNC_m(RealType, mean); // inverse_gaussian, poisson
  GEN_FUNC_m(RealType, number_of_observations); // kolmogorov_smirnov
  GEN_FUNC_m(RealType, non_centrality);
      // non_central_beta, non_central_chi_squared, non_central_f,
      // non_central_t
  GEN_FUNC_s(RealType, find_non_centrality);
      // non_central_chi_squared
  GEN_FUNC_m(RealType, standard_deviation); // normal
  GEN_FUNC_m(RealType, sigma); // rayleigh
  GEN_FUNC_m(RealType, lower); // triangular, uniform
  GEN_FUNC_m(RealType, mode); // triangular
  GEN_FUNC_m(RealType, upper); // triangular, uniform

#undef GEN_FUNC_s
#undef GEN_FUNC_m
};
} }
using namespace boost::math;


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#if BOOST_VERSION_LESS_THAN(105800)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct arcsine_distribution : public distribution_dummy_t<RealType, 105800> { // dummy
  arcsine_distribution(...) : distribution_dummy_t<RealType, 105800>() {}
};
} }
#endif


SWIGINTERN VALUE
SWIG_ruby_failed(VALUE SWIGUNUSEDPARM(arg1), VALUE SWIGUNUSEDPARM(arg2))
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig4.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2DBL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 

SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::arcsine_distribution< double,policies::policy< > > const *self,boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105800>::pdf(*self, x);
  }

/*@SWIG:/usr/share/swig4.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2LONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}

SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::arcsine_distribution< double,policies::policy< > > const *self,boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<105800>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::arcsine_distribution< double,policies::policy< > > const *self,boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<105800>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::arcsine_distribution< double,policies::policy< > > const *self,boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105800>::hazard(*self, x);
  }
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::arcsine_distribution< double,policies::policy< > > const *self,boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105800>::chf(*self, x);
  }
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::mean(*self);}
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::median(*self);}
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::mode(*self);}
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::standard_deviation(*self);}
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::variance(*self);}
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::skewness(*self);}
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::kurtosis(*self);}
SWIGINTERN boost::math::arcsine_distribution< double,policies::policy< > >::value_type boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::arcsine_distribution< double,policies::policy< > >::value_type,boost::math::arcsine_distribution< double,policies::policy< > >::value_type > boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::range(*self);}

namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {
  template <class Type> struct traits_asptr;
  template <class Type> struct traits_asval;
  struct pointer_category;
  template <class Type, class Category> struct traits_as;
  template <class Type> struct traits_from;
  template <class Type> struct traits_from_ptr;
  template <class Type> struct noconst_traits;
  template <class Type> swig_type_info* type_info();
  template <class Type> const char* type_name();
  template <class Type> VALUE from(const Type& val);
}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p = 0;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj) {
      Type v;
      int res = asval(obj, &v);
      if (!SWIG_IsOK(res)) {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj) {
    return traits_as< Type, typename traits< Type >::category >::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(VALUE obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}

SWIGINTERN std::pair< boost::math::arcsine_distribution< double,policies::policy< > >::value_type,boost::math::arcsine_distribution< double,policies::policy< > >::value_type > boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::arcsine_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105800>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct bernoulli_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  bernoulli_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::bernoulli_distribution< double,policies::policy< > > const *self,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::bernoulli_distribution< double,policies::policy< > > const *self,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::bernoulli_distribution< double,policies::policy< > > const *self,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::bernoulli_distribution< double,policies::policy< > > const *self,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::bernoulli_distribution< double,policies::policy< > > const *self,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::bernoulli_distribution< double,policies::policy< > >::value_type boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type > boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type > boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::bernoulli_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct beta_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  beta_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::beta_distribution< double,policies::policy< > > const *self,boost::math::beta_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::beta_distribution< double,policies::policy< > > const *self,boost::math::beta_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::beta_distribution< double,policies::policy< > > const *self,boost::math::beta_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::beta_distribution< double,policies::policy< > > const *self,boost::math::beta_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::beta_distribution< double,policies::policy< > > const *self,boost::math::beta_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::beta_distribution< double,policies::policy< > >::value_type boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::beta_distribution< double,policies::policy< > >::value_type,boost::math::beta_distribution< double,policies::policy< > >::value_type > boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::beta_distribution< double,policies::policy< > >::value_type,boost::math::beta_distribution< double,policies::policy< > >::value_type > boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct binomial_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  binomial_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::binomial_distribution< double,policies::policy< > > const *self,boost::math::binomial_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::binomial_distribution< double,policies::policy< > > const *self,boost::math::binomial_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::binomial_distribution< double,policies::policy< > > const *self,boost::math::binomial_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::binomial_distribution< double,policies::policy< > > const *self,boost::math::binomial_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::binomial_distribution< double,policies::policy< > > const *self,boost::math::binomial_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::binomial_distribution< double,policies::policy< > >::value_type boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::binomial_distribution< double,policies::policy< > >::value_type,boost::math::binomial_distribution< double,policies::policy< > >::value_type > boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::binomial_distribution< double,policies::policy< > >::value_type,boost::math::binomial_distribution< double,policies::policy< > >::value_type > boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct cauchy_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  cauchy_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::cauchy_distribution< double,policies::policy< > >::value_type boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::cauchy_distribution< double,policies::policy< > > const *self,boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::cauchy_distribution< double,policies::policy< > >::value_type boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::cauchy_distribution< double,policies::policy< > > const *self,boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::cauchy_distribution< double,policies::policy< > >::value_type boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::cauchy_distribution< double,policies::policy< > > const *self,boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::cauchy_distribution< double,policies::policy< > >::value_type boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::cauchy_distribution< double,policies::policy< > > const *self,boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::cauchy_distribution< double,policies::policy< > >::value_type boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::cauchy_distribution< double,policies::policy< > > const *self,boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::cauchy_distribution< double,policies::policy< > >::value_type boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::cauchy_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::cauchy_distribution< double,policies::policy< > >::value_type boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::cauchy_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN std::pair< boost::math::cauchy_distribution< double,policies::policy< > >::value_type,boost::math::cauchy_distribution< double,policies::policy< > >::value_type > boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::cauchy_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::cauchy_distribution< double,policies::policy< > >::value_type,boost::math::cauchy_distribution< double,policies::policy< > >::value_type > boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::cauchy_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct chi_squared_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  chi_squared_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::chi_squared_distribution< double,policies::policy< > > const *self,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::chi_squared_distribution< double,policies::policy< > > const *self,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::chi_squared_distribution< double,policies::policy< > > const *self,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::chi_squared_distribution< double,policies::policy< > > const *self,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::chi_squared_distribution< double,policies::policy< > > const *self,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::chi_squared_distribution< double,policies::policy< > >::value_type boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type > boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type > boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct exponential_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  exponential_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::exponential_distribution< double,policies::policy< > > const *self,boost::math::exponential_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::exponential_distribution< double,policies::policy< > > const *self,boost::math::exponential_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::exponential_distribution< double,policies::policy< > > const *self,boost::math::exponential_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::exponential_distribution< double,policies::policy< > > const *self,boost::math::exponential_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::exponential_distribution< double,policies::policy< > > const *self,boost::math::exponential_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::exponential_distribution< double,policies::policy< > >::value_type boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::exponential_distribution< double,policies::policy< > >::value_type,boost::math::exponential_distribution< double,policies::policy< > >::value_type > boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::exponential_distribution< double,policies::policy< > >::value_type,boost::math::exponential_distribution< double,policies::policy< > >::value_type > boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::exponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct extreme_value_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  extreme_value_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::extreme_value_distribution< double,policies::policy< > > const *self,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::extreme_value_distribution< double,policies::policy< > > const *self,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::extreme_value_distribution< double,policies::policy< > > const *self,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::extreme_value_distribution< double,policies::policy< > > const *self,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::extreme_value_distribution< double,policies::policy< > > const *self,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::extreme_value_distribution< double,policies::policy< > >::value_type boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type > boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type > boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::extreme_value_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct fisher_f_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  fisher_f_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::fisher_f_distribution< double,policies::policy< > > const *self,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::fisher_f_distribution< double,policies::policy< > > const *self,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::fisher_f_distribution< double,policies::policy< > > const *self,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::fisher_f_distribution< double,policies::policy< > > const *self,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::fisher_f_distribution< double,policies::policy< > > const *self,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::fisher_f_distribution< double,policies::policy< > >::value_type boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type > boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type > boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::fisher_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct gamma_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  gamma_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::gamma_distribution< double,policies::policy< > > const *self,boost::math::gamma_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::gamma_distribution< double,policies::policy< > > const *self,boost::math::gamma_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::gamma_distribution< double,policies::policy< > > const *self,boost::math::gamma_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::gamma_distribution< double,policies::policy< > > const *self,boost::math::gamma_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::gamma_distribution< double,policies::policy< > > const *self,boost::math::gamma_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::gamma_distribution< double,policies::policy< > >::value_type boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::gamma_distribution< double,policies::policy< > >::value_type,boost::math::gamma_distribution< double,policies::policy< > >::value_type > boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::gamma_distribution< double,policies::policy< > >::value_type,boost::math::gamma_distribution< double,policies::policy< > >::value_type > boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(104600)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct geometric_distribution : public distribution_dummy_t<RealType, 104600> { // dummy
  geometric_distribution(...) : distribution_dummy_t<RealType, 104600>() {}
};
} }
#endif

SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::geometric_distribution< double,policies::policy< > > const *self,boost::math::geometric_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104600>::pdf(*self, x);
  }
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::geometric_distribution< double,policies::policy< > > const *self,boost::math::geometric_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104600>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::geometric_distribution< double,policies::policy< > > const *self,boost::math::geometric_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104600>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::geometric_distribution< double,policies::policy< > > const *self,boost::math::geometric_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104600>::hazard(*self, x);
  }
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::geometric_distribution< double,policies::policy< > > const *self,boost::math::geometric_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104600>::chf(*self, x);
  }
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::mean(*self);}
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::median(*self);}
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::mode(*self);}
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::standard_deviation(*self);}
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::variance(*self);}
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::skewness(*self);}
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::kurtosis(*self);}
SWIGINTERN boost::math::geometric_distribution< double,policies::policy< > >::value_type boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::geometric_distribution< double,policies::policy< > >::value_type,boost::math::geometric_distribution< double,policies::policy< > >::value_type > boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::range(*self);}
SWIGINTERN std::pair< boost::math::geometric_distribution< double,policies::policy< > >::value_type,boost::math::geometric_distribution< double,policies::policy< > >::value_type > boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::geometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::support(*self);}

#if BOOST_VERSION_LESS_THAN(105700)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct hyperexponential_distribution : public distribution_dummy_t<RealType, 105700> { // dummy
  hyperexponential_distribution(...) : distribution_dummy_t<RealType, 105700>() {}
};
} }
#endif


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE VALUE 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return ULL2NUM(value);
}
#endif


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > > *new_boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg___SWIG_1(std::vector< double > const &prob,std::vector< double > const &range){
    return new hyperexponential_distribution(
        prob.begin(), prob.end(), range.begin(), range.end());
  }
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > > *new_boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg___SWIG_2(std::vector< double > const &range){
    return new hyperexponential_distribution(range.begin(), range.end());
  }
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105700>::pdf(*self, x);
  }
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<105700>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<105700>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105700>::hazard(*self, x);
  }
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105700>::chf(*self, x);
  }
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::mean(*self);}
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::median(*self);}
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::mode(*self);}
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::standard_deviation(*self);}
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::variance(*self);}
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::skewness(*self);}
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::kurtosis(*self);}
SWIGINTERN boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type > boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::range(*self);}
SWIGINTERN std::pair< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type > boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::hyperexponential_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105700>::support(*self);}

#if BOOST_VERSION_LESS_THAN(104000)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct hypergeometric_distribution : public distribution_dummy_t<RealType, 104000> { // dummy
  hypergeometric_distribution(...) : distribution_dummy_t<RealType, 104000>() {}
};
} }
#endif


/*@SWIG:/usr/share/swig4.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[size], cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::pdf(*self, x);
  }
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104000>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104000>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::hazard(*self, x);
  }
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::chf(*self, x);
  }
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::mean(*self);}
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::median(*self);}
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::mode(*self);}
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::standard_deviation(*self);}
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::variance(*self);}
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::skewness(*self);}
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::kurtosis(*self);}
SWIGINTERN boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type > boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::range(*self);}
SWIGINTERN std::pair< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type > boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::hypergeometric_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::support(*self);}

#if BOOST_VERSION_LESS_THAN(104500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct inverse_chi_squared_distribution : public distribution_dummy_t<RealType, 104500> { // dummy
  inverse_chi_squared_distribution(...) : distribution_dummy_t<RealType, 104500>() {}
};
} }
#endif

SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104500>::pdf(*self, x);
  }
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104500>::hazard(*self, x);
  }
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104500>::chf(*self, x);
  }
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::mean(*self);}
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::median(*self);}
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::mode(*self);}
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::standard_deviation(*self);}
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::variance(*self);}
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::skewness(*self);}
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::kurtosis(*self);}
SWIGINTERN boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type > boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::range(*self);}
SWIGINTERN std::pair< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type > boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(104500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct inverse_gamma_distribution : public distribution_dummy_t<RealType, 104500> { // dummy
  inverse_gamma_distribution(...) : distribution_dummy_t<RealType, 104500>() {}
};
} }
#endif

SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104500>::pdf(*self, x);
  }
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104500>::hazard(*self, x);
  }
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104500>::chf(*self, x);
  }
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::mean(*self);}
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::median(*self);}
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::mode(*self);}
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::standard_deviation(*self);}
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::variance(*self);}
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::skewness(*self);}
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::kurtosis(*self);}
SWIGINTERN boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type > boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::range(*self);}
SWIGINTERN std::pair< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type > boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::inverse_gamma_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(104600)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct inverse_gaussian_distribution : public distribution_dummy_t<RealType, 104600> { // dummy
  inverse_gaussian_distribution(...) : distribution_dummy_t<RealType, 104600>() {}
};
} }
#endif

SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104600>::pdf(*self, x);
  }
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104600>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104600>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104600>::hazard(*self, x);
  }
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104600>::chf(*self, x);
  }
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::median(*self);}
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::mode(*self);}
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::standard_deviation(*self);}
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::variance(*self);}
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::skewness(*self);}
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::kurtosis(*self);}
SWIGINTERN boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type > boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::range(*self);}
SWIGINTERN std::pair< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type > boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104600>::support(*self);}

#if BOOST_VERSION_LESS_THAN(107500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct kolmogorov_smirnov_distribution : public distribution_dummy_t<RealType, 107500> { // dummy
  kolmogorov_smirnov_distribution(...) : distribution_dummy_t<RealType, 107500>() {}
};
} }
#endif

SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<107500>::pdf(*self, x);
  }
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<107500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<107500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<107500>::hazard(*self, x);
  }
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<107500>::chf(*self, x);
  }
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::mean(*self);}
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::median(*self);}
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::mode(*self);}
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::standard_deviation(*self);}
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::variance(*self);}
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::skewness(*self);}
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::kurtosis(*self);}
SWIGINTERN boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type > boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::range(*self);}
SWIGINTERN std::pair< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type > boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<107500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(104000)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct laplace_distribution : public distribution_dummy_t<RealType, 104000> { // dummy
  laplace_distribution(...) : distribution_dummy_t<RealType, 104000>() {}
};
} }
#endif

SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::laplace_distribution< double,policies::policy< > > const *self,boost::math::laplace_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::pdf(*self, x);
  }
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::laplace_distribution< double,policies::policy< > > const *self,boost::math::laplace_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104000>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::laplace_distribution< double,policies::policy< > > const *self,boost::math::laplace_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104000>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::laplace_distribution< double,policies::policy< > > const *self,boost::math::laplace_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::hazard(*self, x);
  }
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::laplace_distribution< double,policies::policy< > > const *self,boost::math::laplace_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::chf(*self, x);
  }
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::mean(*self);}
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::median(*self);}
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::mode(*self);}
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::standard_deviation(*self);}
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::variance(*self);}
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::skewness(*self);}
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::kurtosis(*self);}
SWIGINTERN boost::math::laplace_distribution< double,policies::policy< > >::value_type boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::laplace_distribution< double,policies::policy< > >::value_type,boost::math::laplace_distribution< double,policies::policy< > >::value_type > boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::range(*self);}
SWIGINTERN std::pair< boost::math::laplace_distribution< double,policies::policy< > >::value_type,boost::math::laplace_distribution< double,policies::policy< > >::value_type > boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::laplace_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::support(*self);}

#if BOOST_VERSION_LESS_THAN(104000)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct logistic_distribution : public distribution_dummy_t<RealType, 104000> { // dummy
  logistic_distribution(...) : distribution_dummy_t<RealType, 104000>() {}
};
} }
#endif

SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::logistic_distribution< double,policies::policy< > > const *self,boost::math::logistic_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::pdf(*self, x);
  }
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::logistic_distribution< double,policies::policy< > > const *self,boost::math::logistic_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104000>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::logistic_distribution< double,policies::policy< > > const *self,boost::math::logistic_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<104000>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::logistic_distribution< double,policies::policy< > > const *self,boost::math::logistic_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::hazard(*self, x);
  }
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::logistic_distribution< double,policies::policy< > > const *self,boost::math::logistic_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<104000>::chf(*self, x);
  }
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::mean(*self);}
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::median(*self);}
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::mode(*self);}
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::standard_deviation(*self);}
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::variance(*self);}
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::skewness(*self);}
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::kurtosis(*self);}
SWIGINTERN boost::math::logistic_distribution< double,policies::policy< > >::value_type boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::logistic_distribution< double,policies::policy< > >::value_type,boost::math::logistic_distribution< double,policies::policy< > >::value_type > boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::range(*self);}
SWIGINTERN std::pair< boost::math::logistic_distribution< double,policies::policy< > >::value_type,boost::math::logistic_distribution< double,policies::policy< > >::value_type > boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::logistic_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<104000>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct lognormal_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  lognormal_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::lognormal_distribution< double,policies::policy< > > const *self,boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::lognormal_distribution< double,policies::policy< > > const *self,boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::lognormal_distribution< double,policies::policy< > > const *self,boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::lognormal_distribution< double,policies::policy< > > const *self,boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::lognormal_distribution< double,policies::policy< > > const *self,boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::lognormal_distribution< double,policies::policy< > >::value_type boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::lognormal_distribution< double,policies::policy< > >::value_type,boost::math::lognormal_distribution< double,policies::policy< > >::value_type > boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::lognormal_distribution< double,policies::policy< > >::value_type,boost::math::lognormal_distribution< double,policies::policy< > >::value_type > boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::lognormal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct negative_binomial_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  negative_binomial_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type > boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type > boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::negative_binomial_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103600)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct non_central_beta_distribution : public distribution_dummy_t<RealType, 103600> { // dummy
  non_central_beta_distribution(...) : distribution_dummy_t<RealType, 103600>() {}
};
} }
#endif

SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::pdf(*self, x);
  }
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::hazard(*self, x);
  }
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::chf(*self, x);
  }
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mean(*self);}
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::median(*self);}
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mode(*self);}
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::standard_deviation(*self);}
SWIGINTERN boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::variance(*self);}
SWIGINTERN std::pair< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type > boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::range(*self);}
SWIGINTERN std::pair< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type > boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::non_central_beta_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103600)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct non_central_chi_squared_distribution : public distribution_dummy_t<RealType, 103600> { // dummy
  non_central_chi_squared_distribution(...) : distribution_dummy_t<RealType, 103600>() {}
};
} }
#endif

SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::pdf(*self, x);
  }
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::hazard(*self, x);
  }
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::chf(*self, x);
  }
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mean(*self);}
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::median(*self);}
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mode(*self);}
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::standard_deviation(*self);}
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::variance(*self);}
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::skewness(*self);}
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::kurtosis(*self);}
SWIGINTERN boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type > boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::range(*self);}
SWIGINTERN std::pair< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type > boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103600)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct non_central_f_distribution : public distribution_dummy_t<RealType, 103600> { // dummy
  non_central_f_distribution(...) : distribution_dummy_t<RealType, 103600>() {}
};
} }
#endif

SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::non_central_f_distribution< double,policies::policy< > > const *self,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::pdf(*self, x);
  }
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::non_central_f_distribution< double,policies::policy< > > const *self,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::non_central_f_distribution< double,policies::policy< > > const *self,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::non_central_f_distribution< double,policies::policy< > > const *self,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::hazard(*self, x);
  }
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::non_central_f_distribution< double,policies::policy< > > const *self,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::chf(*self, x);
  }
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mean(*self);}
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::median(*self);}
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mode(*self);}
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::standard_deviation(*self);}
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::variance(*self);}
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::skewness(*self);}
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::kurtosis(*self);}
SWIGINTERN boost::math::non_central_f_distribution< double,policies::policy< > >::value_type boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type > boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::range(*self);}
SWIGINTERN std::pair< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type > boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::non_central_f_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103600)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct non_central_t_distribution : public distribution_dummy_t<RealType, 103600> { // dummy
  non_central_t_distribution(...) : distribution_dummy_t<RealType, 103600>() {}
};
} }
#endif

SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::non_central_t_distribution< double,policies::policy< > > const *self,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::pdf(*self, x);
  }
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::non_central_t_distribution< double,policies::policy< > > const *self,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::non_central_t_distribution< double,policies::policy< > > const *self,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103600>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::non_central_t_distribution< double,policies::policy< > > const *self,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::hazard(*self, x);
  }
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::non_central_t_distribution< double,policies::policy< > > const *self,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103600>::chf(*self, x);
  }
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mean(*self);}
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::median(*self);}
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::mode(*self);}
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::standard_deviation(*self);}
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::variance(*self);}
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::skewness(*self);}
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::kurtosis(*self);}
SWIGINTERN boost::math::non_central_t_distribution< double,policies::policy< > >::value_type boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type > boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::range(*self);}
SWIGINTERN std::pair< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type > boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::non_central_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103600>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct normal_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  normal_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::normal_distribution< double,policies::policy< > > const *self,boost::math::normal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::normal_distribution< double,policies::policy< > > const *self,boost::math::normal_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::normal_distribution< double,policies::policy< > > const *self,boost::math::normal_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::normal_distribution< double,policies::policy< > > const *self,boost::math::normal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::normal_distribution< double,policies::policy< > > const *self,boost::math::normal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::normal_distribution< double,policies::policy< > >::value_type boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::normal_distribution< double,policies::policy< > >::value_type,boost::math::normal_distribution< double,policies::policy< > >::value_type > boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::normal_distribution< double,policies::policy< > >::value_type,boost::math::normal_distribution< double,policies::policy< > >::value_type > boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct pareto_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  pareto_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::pareto_distribution< double,policies::policy< > > const *self,boost::math::pareto_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::pareto_distribution< double,policies::policy< > > const *self,boost::math::pareto_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::pareto_distribution< double,policies::policy< > > const *self,boost::math::pareto_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::pareto_distribution< double,policies::policy< > > const *self,boost::math::pareto_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::pareto_distribution< double,policies::policy< > > const *self,boost::math::pareto_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::pareto_distribution< double,policies::policy< > >::value_type boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::pareto_distribution< double,policies::policy< > >::value_type,boost::math::pareto_distribution< double,policies::policy< > >::value_type > boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::pareto_distribution< double,policies::policy< > >::value_type,boost::math::pareto_distribution< double,policies::policy< > >::value_type > boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::pareto_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct poisson_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  poisson_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::poisson_distribution< double,policies::policy< > > const *self,boost::math::poisson_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::poisson_distribution< double,policies::policy< > > const *self,boost::math::poisson_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::poisson_distribution< double,policies::policy< > > const *self,boost::math::poisson_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::poisson_distribution< double,policies::policy< > > const *self,boost::math::poisson_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::poisson_distribution< double,policies::policy< > > const *self,boost::math::poisson_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::poisson_distribution< double,policies::policy< > >::value_type boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::poisson_distribution< double,policies::policy< > >::value_type,boost::math::poisson_distribution< double,policies::policy< > >::value_type > boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::poisson_distribution< double,policies::policy< > >::value_type,boost::math::poisson_distribution< double,policies::policy< > >::value_type > boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::poisson_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct rayleigh_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  rayleigh_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::rayleigh_distribution< double,policies::policy< > > const *self,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::rayleigh_distribution< double,policies::policy< > > const *self,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::rayleigh_distribution< double,policies::policy< > > const *self,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::rayleigh_distribution< double,policies::policy< > > const *self,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::rayleigh_distribution< double,policies::policy< > > const *self,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::rayleigh_distribution< double,policies::policy< > >::value_type boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type > boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type > boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::rayleigh_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(105000)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct skew_normal_distribution : public distribution_dummy_t<RealType, 105000> { // dummy
  skew_normal_distribution(...) : distribution_dummy_t<RealType, 105000>() {}
};
} }
#endif

SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::skew_normal_distribution< double,policies::policy< > > const *self,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105000>::pdf(*self, x);
  }
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::skew_normal_distribution< double,policies::policy< > > const *self,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<105000>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::skew_normal_distribution< double,policies::policy< > > const *self,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<105000>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::skew_normal_distribution< double,policies::policy< > > const *self,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105000>::hazard(*self, x);
  }
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::skew_normal_distribution< double,policies::policy< > > const *self,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<105000>::chf(*self, x);
  }
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::mean(*self);}
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::median(*self);}
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::mode(*self);}
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::standard_deviation(*self);}
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::variance(*self);}
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::skewness(*self);}
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::kurtosis(*self);}
SWIGINTERN boost::math::skew_normal_distribution< double,policies::policy< > >::value_type boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type > boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::range(*self);}
SWIGINTERN std::pair< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type > boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::skew_normal_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<105000>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct students_t_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  students_t_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::students_t_distribution< double,policies::policy< > > const *self,boost::math::students_t_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::students_t_distribution< double,policies::policy< > > const *self,boost::math::students_t_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::students_t_distribution< double,policies::policy< > > const *self,boost::math::students_t_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::students_t_distribution< double,policies::policy< > > const *self,boost::math::students_t_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::students_t_distribution< double,policies::policy< > > const *self,boost::math::students_t_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::students_t_distribution< double,policies::policy< > >::value_type boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::students_t_distribution< double,policies::policy< > >::value_type,boost::math::students_t_distribution< double,policies::policy< > >::value_type > boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::students_t_distribution< double,policies::policy< > >::value_type,boost::math::students_t_distribution< double,policies::policy< > >::value_type > boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::students_t_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct triangular_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  triangular_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::triangular_distribution< double,policies::policy< > > const *self,boost::math::triangular_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::triangular_distribution< double,policies::policy< > > const *self,boost::math::triangular_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::triangular_distribution< double,policies::policy< > > const *self,boost::math::triangular_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::triangular_distribution< double,policies::policy< > > const *self,boost::math::triangular_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::triangular_distribution< double,policies::policy< > > const *self,boost::math::triangular_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::triangular_distribution< double,policies::policy< > >::value_type boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::triangular_distribution< double,policies::policy< > >::value_type,boost::math::triangular_distribution< double,policies::policy< > >::value_type > boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::triangular_distribution< double,policies::policy< > >::value_type,boost::math::triangular_distribution< double,policies::policy< > >::value_type > boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::triangular_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct uniform_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  uniform_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::uniform_distribution< double,policies::policy< > > const *self,boost::math::uniform_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::uniform_distribution< double,policies::policy< > > const *self,boost::math::uniform_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::uniform_distribution< double,policies::policy< > > const *self,boost::math::uniform_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::uniform_distribution< double,policies::policy< > > const *self,boost::math::uniform_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::uniform_distribution< double,policies::policy< > > const *self,boost::math::uniform_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::uniform_distribution< double,policies::policy< > >::value_type boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::uniform_distribution< double,policies::policy< > >::value_type,boost::math::uniform_distribution< double,policies::policy< > >::value_type > boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::uniform_distribution< double,policies::policy< > >::value_type,boost::math::uniform_distribution< double,policies::policy< > >::value_type > boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::uniform_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}

#if BOOST_VERSION_LESS_THAN(103500)
namespace boost{ namespace math{
template <class RealType = double, class Policy = policies::policy<> >
struct weibull_distribution : public distribution_dummy_t<RealType, 103500> { // dummy
  weibull_distribution(...) : distribution_dummy_t<RealType, 103500>() {}
};
} }
#endif

SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf(boost::math::weibull_distribution< double,policies::policy< > > const *self,boost::math::weibull_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::pdf(*self, x);
  }
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0(boost::math::weibull_distribution< double,policies::policy< > > const *self,boost::math::weibull_distribution< double,policies::policy< > >::value_type const &x,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::cdf(*self, x, is_complement);
  }
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0(boost::math::weibull_distribution< double,policies::policy< > > const *self,boost::math::weibull_distribution< double,policies::policy< > >::value_type const &p,bool const &is_complement=false){
    return boost::math::distribution_shim_t<103500>::quantile(*self, p, is_complement);
  }
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard(boost::math::weibull_distribution< double,policies::policy< > > const *self,boost::math::weibull_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::hazard(*self, x);
  }
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf(boost::math::weibull_distribution< double,policies::policy< > > const *self,boost::math::weibull_distribution< double,policies::policy< > >::value_type const &x){
    return boost::math::distribution_shim_t<103500>::chf(*self, x);
  }
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mean(*self);}
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::median(*self);}
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::mode(*self);}
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::standard_deviation(*self);}
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::variance(*self);}
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::skewness(*self);}
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis(*self);}
SWIGINTERN boost::math::weibull_distribution< double,policies::policy< > >::value_type boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::kurtosis_excess(*self);}
SWIGINTERN std::pair< boost::math::weibull_distribution< double,policies::policy< > >::value_type,boost::math::weibull_distribution< double,policies::policy< > >::value_type > boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::range(*self);}
SWIGINTERN std::pair< boost::math::weibull_distribution< double,policies::policy< > >::value_type,boost::math::weibull_distribution< double,policies::policy< > >::value_type > boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support(boost::math::weibull_distribution< double,policies::policy< > > const *self){return boost::math::distribution_shim_t<103500>::support(*self);}
static swig_class SwigClassGC_VALUE;

/*
  Document-method: BoostDistributions::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: BoostDistributions::Arcsine

  Proxy of C++ BoostDistributions::Arcsine class


*/
static swig_class SwigClassArcsine;

/*
  Document-method: BoostDistributions::Arcsine.new

  call-seq:
    Arcsine.new(double x_min=0, double x_max=1)
    Arcsine.new(double x_min=0)
    Arcsine.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Arcsine__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","arcsine_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","arcsine_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > > *)new boost::math::arcsine_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Arcsine__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","arcsine_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > > *)new boost::math::arcsine_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Arcsine_allocate(VALUE self)
#else
_wrap_Arcsine_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Arcsine__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > > *)new boost::math::arcsine_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Arcsine(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Arcsine__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Arcsine__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Arcsine__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Arcsine.new", 
    "    Arcsine.new(double x_min, double x_max)\n"
    "    Arcsine.new(double x_min)\n"
    "    Arcsine.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.x_min

  call-seq:
    x_min -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_x_min(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","x_min", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1)->x_min();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.x_max

  call-seq:
    x_max -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_x_max(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","x_max", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1)->x_max();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.pdf

  call-seq:
    pdf(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::arcsine_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.cdf

  call-seq:
    cdf(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::arcsine_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Arcsine_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::arcsine_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Arcsine_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Arcsine_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Arcsine_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::arcsine_distribution< double,policies::policy< > >::value_type cdf(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::arcsine_distribution< double,policies::policy< > >::value_type cdf(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.quantile

  call-seq:
    quantile(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::arcsine_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Arcsine_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::arcsine_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Arcsine_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Arcsine_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Arcsine_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::arcsine_distribution< double,policies::policy< > >::value_type quantile(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::arcsine_distribution< double,policies::policy< > >::value_type quantile(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.hazard

  call-seq:
    hazard(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::arcsine_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.chf

  call-seq:
    chf(boost::math::arcsine_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::arcsine_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.mean

  call-seq:
    mean -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.median

  call-seq:
    median -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_median(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.mode

  call-seq:
    mode -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.standard_deviation

  call-seq:
    standard_deviation -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.variance

  call-seq:
    variance -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.skewness

  call-seq:
    skewness -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.kurtosis

  call-seq:
    kurtosis -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::arcsine_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::arcsine_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::arcsine_distribution< double,policies::policy< > >::value_type)boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.range

  call-seq:
    range -> std::pair< boost::math::arcsine_distribution< double,policies::policy< > >::value_type,boost::math::arcsine_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_range(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::arcsine_distribution< double,policies::policy< > >::value_type,boost::math::arcsine_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Arcsine.support

  call-seq:
    support -> std::pair< boost::math::arcsine_distribution< double,policies::policy< > >::value_type,boost::math::arcsine_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Arcsine_support(int argc, VALUE *argv, VALUE self) {
  boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::arcsine_distribution< double,policies::policy< > >::value_type,boost::math::arcsine_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::arcsine_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::arcsine_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::arcsine_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::arcsine_distribution< double,policies::policy< > > *arg1 = (boost::math::arcsine_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Bernoulli

  Proxy of C++ BoostDistributions::Bernoulli class


*/
static swig_class SwigClassBernoulli;

/*
  Document-method: BoostDistributions::Bernoulli.new

  call-seq:
    Bernoulli.new(double p=0.5)
    Bernoulli.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Bernoulli__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","bernoulli_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > > *)new boost::math::bernoulli_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Bernoulli_allocate(VALUE self)
#else
_wrap_Bernoulli_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Bernoulli__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > > *)new boost::math::bernoulli_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Bernoulli(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Bernoulli__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Bernoulli__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Bernoulli.new", 
    "    Bernoulli.new(double p)\n"
    "    Bernoulli.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.success_fraction

  call-seq:
    success_fraction -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_success_fraction(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","success_fraction", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1)->success_fraction();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.pdf

  call-seq:
    pdf(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.cdf

  call-seq:
    cdf(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Bernoulli_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Bernoulli_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Bernoulli_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Bernoulli_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::bernoulli_distribution< double,policies::policy< > >::value_type cdf(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::bernoulli_distribution< double,policies::policy< > >::value_type cdf(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.quantile

  call-seq:
    quantile(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Bernoulli_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Bernoulli_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Bernoulli_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Bernoulli_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::bernoulli_distribution< double,policies::policy< > >::value_type quantile(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::bernoulli_distribution< double,policies::policy< > >::value_type quantile(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.hazard

  call-seq:
    hazard(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.chf

  call-seq:
    chf(boost::math::bernoulli_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.mean

  call-seq:
    mean -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.median

  call-seq:
    median -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_median(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.mode

  call-seq:
    mode -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.standard_deviation

  call-seq:
    standard_deviation -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.variance

  call-seq:
    variance -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.skewness

  call-seq:
    skewness -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.kurtosis

  call-seq:
    kurtosis -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::bernoulli_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::bernoulli_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::bernoulli_distribution< double,policies::policy< > >::value_type)boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.range

  call-seq:
    range -> std::pair< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_range(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Bernoulli.support

  call-seq:
    support -> std::pair< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Bernoulli_support(int argc, VALUE *argv, VALUE self) {
  boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::bernoulli_distribution< double,policies::policy< > >::value_type,boost::math::bernoulli_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::bernoulli_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::bernoulli_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::bernoulli_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::bernoulli_distribution< double,policies::policy< > > *arg1 = (boost::math::bernoulli_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Beta

  Proxy of C++ BoostDistributions::Beta class


*/
static swig_class SwigClassBeta;

/*
  Document-method: BoostDistributions::Beta.new

  call-seq:
    Beta.new(double l_alpha=1, double l_beta=1)
    Beta.new(double l_alpha=1)
    Beta.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Beta__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","beta_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","beta_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > > *)new boost::math::beta_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Beta__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","beta_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > > *)new boost::math::beta_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Beta_allocate(VALUE self)
#else
_wrap_Beta_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Beta__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > > *)new boost::math::beta_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Beta(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Beta__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Beta__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Beta__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Beta.new", 
    "    Beta.new(double l_alpha, double l_beta)\n"
    "    Beta.new(double l_alpha)\n"
    "    Beta.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.alpha

  call-seq:
    alpha -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_alpha(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::beta_distribution< double,policies::policy< > > const *)arg1)->alpha();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.beta

  call-seq:
    beta -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_beta(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","beta", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::beta_distribution< double,policies::policy< > > const *)arg1)->beta();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.find_alpha

  call-seq:
    find_alpha(double mean, double variance) -> double
    find_alpha(double beta, double x, double probability) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Beta_find_alpha__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_alpha", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_alpha", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (double)boost::math::beta_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_alpha(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.find_beta

  call-seq:
    find_beta(double mean, double variance) -> double
    find_beta(double alpha, double x, double probability) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Beta_find_beta__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_beta", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_beta", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (double)boost::math::beta_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_beta(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.find_alpha

  call-seq:
    find_alpha(double mean, double variance) -> double
    find_alpha(double beta, double x, double probability) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Beta_find_alpha__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_alpha", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_alpha", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_alpha", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (double)boost::math::beta_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_alpha(arg1,arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Beta_find_alpha(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Beta_find_alpha__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Beta_find_alpha__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Beta.find_alpha", 
    "    double Beta.find_alpha(double mean, double variance)\n"
    "    double Beta.find_alpha(double beta, double x, double probability)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.find_beta

  call-seq:
    find_beta(double mean, double variance) -> double
    find_beta(double alpha, double x, double probability) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Beta_find_beta__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_beta", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_beta", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::beta_distribution<(double,policies::policy<()>)>::find_beta", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (double)boost::math::beta_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_beta(arg1,arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Beta_find_beta(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Beta_find_beta__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Beta_find_beta__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Beta.find_beta", 
    "    double Beta.find_beta(double mean, double variance)\n"
    "    double Beta.find_beta(double alpha, double x, double probability)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.pdf

  call-seq:
    pdf(boost::math::beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.cdf

  call-seq:
    cdf(boost::math::beta_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::beta_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Beta_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Beta_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Beta_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Beta_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::beta_distribution< double,policies::policy< > >::value_type cdf(boost::math::beta_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::beta_distribution< double,policies::policy< > >::value_type cdf(boost::math::beta_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.quantile

  call-seq:
    quantile(boost::math::beta_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::beta_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::beta_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Beta_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Beta_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Beta_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Beta_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::beta_distribution< double,policies::policy< > >::value_type quantile(boost::math::beta_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::beta_distribution< double,policies::policy< > >::value_type quantile(boost::math::beta_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.hazard

  call-seq:
    hazard(boost::math::beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.chf

  call-seq:
    chf(boost::math::beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.mean

  call-seq:
    mean -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.median

  call-seq:
    median -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_median(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.mode

  call-seq:
    mode -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.standard_deviation

  call-seq:
    standard_deviation -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.variance

  call-seq:
    variance -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.skewness

  call-seq:
    skewness -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.kurtosis

  call-seq:
    kurtosis -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::beta_distribution< double,policies::policy< > >::value_type)boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.range

  call-seq:
    range -> std::pair< boost::math::beta_distribution< double,policies::policy< > >::value_type,boost::math::beta_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_range(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::beta_distribution< double,policies::policy< > >::value_type,boost::math::beta_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Beta.support

  call-seq:
    support -> std::pair< boost::math::beta_distribution< double,policies::policy< > >::value_type,boost::math::beta_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Beta_support(int argc, VALUE *argv, VALUE self) {
  boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::beta_distribution< double,policies::policy< > >::value_type,boost::math::beta_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::beta_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::beta_distribution< double,policies::policy< > > *arg1 = (boost::math::beta_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Binomial

  Proxy of C++ BoostDistributions::Binomial class


*/
static swig_class SwigClassBinomial;

/*
  Document-method: BoostDistributions::Binomial.new

  call-seq:
    Binomial.new(double n=1, double p=0.5)
    Binomial.new(double n=1)
    Binomial.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Binomial__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","binomial_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","binomial_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > > *)new boost::math::binomial_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Binomial__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","binomial_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > > *)new boost::math::binomial_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Binomial_allocate(VALUE self)
#else
_wrap_Binomial_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Binomial__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > > *)new boost::math::binomial_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Binomial(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Binomial__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Binomial__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Binomial__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Binomial.new", 
    "    Binomial.new(double n, double p)\n"
    "    Binomial.new(double n)\n"
    "    Binomial.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.success_fraction

  call-seq:
    success_fraction -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_success_fraction(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","success_fraction", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1)->success_fraction();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.trials

  call-seq:
    trials -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_trials(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","trials", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1)->trials();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::interval_type.clopper_pearson_exact_interval

  call-seq:
    clopper_pearson_exact_interval -> int

A class method.

*/
/*
  Document-method: BoostDistributions::interval_type.jeffreys_prior_interval

  call-seq:
    jeffreys_prior_interval -> int

A class method.

*/
/*
  Document-method: BoostDistributions::Binomial.find_lower_bound_on_p

  call-seq:
    find_lower_bound_on_p(double trials, double successes, double probability, boost::math::binomial_distribution< double,policies::policy< > >::interval_type t=boost::math::binomial_distribution< double,policies::policy< > >::clopper_pearson_exact_interval) -> double
    find_lower_bound_on_p(double trials, double successes, double probability) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Binomial_find_lower_bound_on_p__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  boost::math::binomial_distribution< double,policies::policy< > >::interval_type arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::interval_type","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 4, argv[3] ));
  } 
  arg4 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::interval_type >(val4);
  try {
    result = (double)boost::math::binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_lower_bound_on_p(arg1,arg2,arg3,arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Binomial_find_lower_bound_on_p__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_lower_bound_on_p(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Binomial_find_lower_bound_on_p(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Binomial_find_lower_bound_on_p__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Binomial_find_lower_bound_on_p__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Binomial.find_lower_bound_on_p", 
    "    double Binomial.find_lower_bound_on_p(double trials, double successes, double probability, boost::math::binomial_distribution< double,policies::policy< > >::interval_type t)\n"
    "    double Binomial.find_lower_bound_on_p(double trials, double successes, double probability)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.find_upper_bound_on_p

  call-seq:
    find_upper_bound_on_p(double trials, double successes, double probability, boost::math::binomial_distribution< double,policies::policy< > >::interval_type t=boost::math::binomial_distribution< double,policies::policy< > >::clopper_pearson_exact_interval) -> double
    find_upper_bound_on_p(double trials, double successes, double probability) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Binomial_find_upper_bound_on_p__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  boost::math::binomial_distribution< double,policies::policy< > >::interval_type arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::interval_type","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 4, argv[3] ));
  } 
  arg4 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::interval_type >(val4);
  try {
    result = (double)boost::math::binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_upper_bound_on_p(arg1,arg2,arg3,arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Binomial_find_upper_bound_on_p__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_upper_bound_on_p(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Binomial_find_upper_bound_on_p(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Binomial_find_upper_bound_on_p__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Binomial_find_upper_bound_on_p__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Binomial.find_upper_bound_on_p", 
    "    double Binomial.find_upper_bound_on_p(double trials, double successes, double probability, boost::math::binomial_distribution< double,policies::policy< > >::interval_type t)\n"
    "    double Binomial.find_upper_bound_on_p(double trials, double successes, double probability)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.find_minimum_number_of_trials

  call-seq:
    find_minimum_number_of_trials(double k, double p, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Binomial_find_minimum_number_of_trials(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_minimum_number_of_trials(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.find_maximum_number_of_trials

  call-seq:
    find_maximum_number_of_trials(double k, double p, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Binomial_find_maximum_number_of_trials(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::binomial_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_maximum_number_of_trials(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.pdf

  call-seq:
    pdf(boost::math::binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.cdf

  call-seq:
    cdf(boost::math::binomial_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::binomial_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Binomial_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Binomial_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Binomial_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Binomial_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::binomial_distribution< double,policies::policy< > >::value_type cdf(boost::math::binomial_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::binomial_distribution< double,policies::policy< > >::value_type cdf(boost::math::binomial_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.quantile

  call-seq:
    quantile(boost::math::binomial_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::binomial_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::binomial_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Binomial_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Binomial_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Binomial_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Binomial_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::binomial_distribution< double,policies::policy< > >::value_type quantile(boost::math::binomial_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::binomial_distribution< double,policies::policy< > >::value_type quantile(boost::math::binomial_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.hazard

  call-seq:
    hazard(boost::math::binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.chf

  call-seq:
    chf(boost::math::binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.mean

  call-seq:
    mean -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.median

  call-seq:
    median -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_median(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.mode

  call-seq:
    mode -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.standard_deviation

  call-seq:
    standard_deviation -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.variance

  call-seq:
    variance -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.skewness

  call-seq:
    skewness -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.kurtosis

  call-seq:
    kurtosis -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::binomial_distribution< double,policies::policy< > >::value_type)boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.range

  call-seq:
    range -> std::pair< boost::math::binomial_distribution< double,policies::policy< > >::value_type,boost::math::binomial_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_range(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::binomial_distribution< double,policies::policy< > >::value_type,boost::math::binomial_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Binomial.support

  call-seq:
    support -> std::pair< boost::math::binomial_distribution< double,policies::policy< > >::value_type,boost::math::binomial_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Binomial_support(int argc, VALUE *argv, VALUE self) {
  boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::binomial_distribution< double,policies::policy< > >::value_type,boost::math::binomial_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::binomial_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::binomial_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Cauchy

  Proxy of C++ BoostDistributions::Cauchy class


*/
static swig_class SwigClassCauchy;

/*
  Document-method: BoostDistributions::Cauchy.new

  call-seq:
    Cauchy.new(double l_location=0, double l_scale=1)
    Cauchy.new(double l_location=0)
    Cauchy.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Cauchy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","cauchy_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cauchy_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > > *)new boost::math::cauchy_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Cauchy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","cauchy_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > > *)new boost::math::cauchy_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Cauchy_allocate(VALUE self)
#else
_wrap_Cauchy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Cauchy__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > > *)new boost::math::cauchy_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Cauchy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Cauchy__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Cauchy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Cauchy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Cauchy.new", 
    "    Cauchy.new(double l_location, double l_scale)\n"
    "    Cauchy.new(double l_location)\n"
    "    Cauchy.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_location(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.pdf

  call-seq:
    pdf(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::cauchy_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.cdf

  call-seq:
    cdf(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::cauchy_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Cauchy_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::cauchy_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Cauchy_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cauchy_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Cauchy_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::cauchy_distribution< double,policies::policy< > >::value_type cdf(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::cauchy_distribution< double,policies::policy< > >::value_type cdf(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.quantile

  call-seq:
    quantile(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::cauchy_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Cauchy_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::cauchy_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Cauchy_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cauchy_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Cauchy_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::cauchy_distribution< double,policies::policy< > >::value_type quantile(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::cauchy_distribution< double,policies::policy< > >::value_type quantile(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.hazard

  call-seq:
    hazard(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::cauchy_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.chf

  call-seq:
    chf(boost::math::cauchy_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::cauchy_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.median

  call-seq:
    median -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_median(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.mode

  call-seq:
    mode -> boost::math::cauchy_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::cauchy_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::cauchy_distribution< double,policies::policy< > >::value_type)boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.range

  call-seq:
    range -> std::pair< boost::math::cauchy_distribution< double,policies::policy< > >::value_type,boost::math::cauchy_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_range(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::cauchy_distribution< double,policies::policy< > >::value_type,boost::math::cauchy_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Cauchy.support

  call-seq:
    support -> std::pair< boost::math::cauchy_distribution< double,policies::policy< > >::value_type,boost::math::cauchy_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Cauchy_support(int argc, VALUE *argv, VALUE self) {
  boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::cauchy_distribution< double,policies::policy< > >::value_type,boost::math::cauchy_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::cauchy_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::cauchy_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::cauchy_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::cauchy_distribution< double,policies::policy< > > *arg1 = (boost::math::cauchy_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::ChiSquared

  Proxy of C++ BoostDistributions::ChiSquared class


*/
static swig_class SwigClassChiSquared;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ChiSquared_allocate(VALUE self)
#else
_wrap_ChiSquared_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::ChiSquared.new

  call-seq:
    ChiSquared.new(double i)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_ChiSquared(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","chi_squared_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > > *)new boost::math::chi_squared_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.degrees_of_freedom

  call-seq:
    degrees_of_freedom -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_degrees_of_freedom(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","degrees_of_freedom", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.find_degrees_of_freedom

  call-seq:
    find_degrees_of_freedom(double difference_from_variance, double alpha, double beta, double variance, double hint=100) -> double
    find_degrees_of_freedom(double difference_from_variance, double alpha, double beta, double variance) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_find_degrees_of_freedom__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 4, argv[3] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 5, argv[4] ));
  } 
  arg5 = static_cast< double >(val5);
  try {
    result = (double)boost::math::chi_squared_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_degrees_of_freedom(arg1,arg2,arg3,arg4,arg5);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChiSquared_find_degrees_of_freedom__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","boost::math::chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 4, argv[3] ));
  } 
  arg4 = static_cast< double >(val4);
  try {
    result = (double)boost::math::chi_squared_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_degrees_of_freedom(arg1,arg2,arg3,arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ChiSquared_find_degrees_of_freedom(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs;
  if (argc > 5) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ChiSquared_find_degrees_of_freedom__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ChiSquared_find_degrees_of_freedom__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "ChiSquared.find_degrees_of_freedom", 
    "    double ChiSquared.find_degrees_of_freedom(double difference_from_variance, double alpha, double beta, double variance, double hint)\n"
    "    double ChiSquared.find_degrees_of_freedom(double difference_from_variance, double alpha, double beta, double variance)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.pdf

  call-seq:
    pdf(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.cdf

  call-seq:
    cdf(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChiSquared_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ChiSquared_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ChiSquared_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ChiSquared_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::chi_squared_distribution< double,policies::policy< > >::value_type cdf(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::chi_squared_distribution< double,policies::policy< > >::value_type cdf(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.quantile

  call-seq:
    quantile(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChiSquared_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ChiSquared_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ChiSquared_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ChiSquared_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::chi_squared_distribution< double,policies::policy< > >::value_type quantile(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::chi_squared_distribution< double,policies::policy< > >::value_type quantile(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.hazard

  call-seq:
    hazard(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.chf

  call-seq:
    chf(boost::math::chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.mean

  call-seq:
    mean -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.median

  call-seq:
    median -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_median(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.mode

  call-seq:
    mode -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.standard_deviation

  call-seq:
    standard_deviation -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.variance

  call-seq:
    variance -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.skewness

  call-seq:
    skewness -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.kurtosis

  call-seq:
    kurtosis -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.range

  call-seq:
    range -> std::pair< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_range(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ChiSquared.support

  call-seq:
    support -> std::pair< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_ChiSquared_support(int argc, VALUE *argv, VALUE self) {
  boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::chi_squared_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::chi_squared_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::chi_squared_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Exponential

  Proxy of C++ BoostDistributions::Exponential class


*/
static swig_class SwigClassExponential;

/*
  Document-method: BoostDistributions::Exponential.new

  call-seq:
    Exponential.new(double l_lambda=1)
    Exponential.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Exponential__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","exponential_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > > *)new boost::math::exponential_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Exponential_allocate(VALUE self)
#else
_wrap_Exponential_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Exponential__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > > *)new boost::math::exponential_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Exponential(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Exponential__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Exponential__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Exponential.new", 
    "    Exponential.new(double l_lambda)\n"
    "    Exponential.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.lambda

  call-seq:
    lambda -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_lambda(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","lambda", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1)->lambda();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.pdf

  call-seq:
    pdf(boost::math::exponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::exponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.cdf

  call-seq:
    cdf(boost::math::exponential_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::exponential_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::exponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::exponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Exponential_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::exponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Exponential_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Exponential_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Exponential_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::exponential_distribution< double,policies::policy< > >::value_type cdf(boost::math::exponential_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::exponential_distribution< double,policies::policy< > >::value_type cdf(boost::math::exponential_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.quantile

  call-seq:
    quantile(boost::math::exponential_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::exponential_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::exponential_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::exponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Exponential_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::exponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Exponential_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Exponential_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Exponential_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::exponential_distribution< double,policies::policy< > >::value_type quantile(boost::math::exponential_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::exponential_distribution< double,policies::policy< > >::value_type quantile(boost::math::exponential_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.hazard

  call-seq:
    hazard(boost::math::exponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::exponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.chf

  call-seq:
    chf(boost::math::exponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::exponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.mean

  call-seq:
    mean -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.median

  call-seq:
    median -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_median(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.mode

  call-seq:
    mode -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.standard_deviation

  call-seq:
    standard_deviation -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.variance

  call-seq:
    variance -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.skewness

  call-seq:
    skewness -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.kurtosis

  call-seq:
    kurtosis -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::exponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::exponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::exponential_distribution< double,policies::policy< > >::value_type)boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.range

  call-seq:
    range -> std::pair< boost::math::exponential_distribution< double,policies::policy< > >::value_type,boost::math::exponential_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_range(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::exponential_distribution< double,policies::policy< > >::value_type,boost::math::exponential_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Exponential.support

  call-seq:
    support -> std::pair< boost::math::exponential_distribution< double,policies::policy< > >::value_type,boost::math::exponential_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Exponential_support(int argc, VALUE *argv, VALUE self) {
  boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::exponential_distribution< double,policies::policy< > >::value_type,boost::math::exponential_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::exponential_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::exponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::exponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::exponential_distribution< double,policies::policy< > > *arg1 = (boost::math::exponential_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::ExtremeValue

  Proxy of C++ BoostDistributions::ExtremeValue class


*/
static swig_class SwigClassExtremeValue;

/*
  Document-method: BoostDistributions::ExtremeValue.new

  call-seq:
    ExtremeValue.new(double a=0, double b=1)
    ExtremeValue.new(double a=0)
    ExtremeValue.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_ExtremeValue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","extreme_value_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","extreme_value_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > > *)new boost::math::extreme_value_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtremeValue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","extreme_value_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > > *)new boost::math::extreme_value_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ExtremeValue_allocate(VALUE self)
#else
_wrap_ExtremeValue_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ExtremeValue__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > > *)new boost::math::extreme_value_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ExtremeValue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ExtremeValue__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ExtremeValue__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ExtremeValue__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ExtremeValue.new", 
    "    ExtremeValue.new(double a, double b)\n"
    "    ExtremeValue.new(double a)\n"
    "    ExtremeValue.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_location(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.pdf

  call-seq:
    pdf(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.cdf

  call-seq:
    cdf(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtremeValue_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtremeValue_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtremeValue_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ExtremeValue_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::extreme_value_distribution< double,policies::policy< > >::value_type cdf(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::extreme_value_distribution< double,policies::policy< > >::value_type cdf(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.quantile

  call-seq:
    quantile(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtremeValue_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtremeValue_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtremeValue_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ExtremeValue_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::extreme_value_distribution< double,policies::policy< > >::value_type quantile(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::extreme_value_distribution< double,policies::policy< > >::value_type quantile(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.hazard

  call-seq:
    hazard(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.chf

  call-seq:
    chf(boost::math::extreme_value_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.mean

  call-seq:
    mean -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.median

  call-seq:
    median -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_median(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.mode

  call-seq:
    mode -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.standard_deviation

  call-seq:
    standard_deviation -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.variance

  call-seq:
    variance -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.skewness

  call-seq:
    skewness -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.kurtosis

  call-seq:
    kurtosis -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::extreme_value_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::extreme_value_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::extreme_value_distribution< double,policies::policy< > >::value_type)boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.range

  call-seq:
    range -> std::pair< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_range(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::ExtremeValue.support

  call-seq:
    support -> std::pair< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_ExtremeValue_support(int argc, VALUE *argv, VALUE self) {
  boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::extreme_value_distribution< double,policies::policy< > >::value_type,boost::math::extreme_value_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::extreme_value_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::extreme_value_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::extreme_value_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::extreme_value_distribution< double,policies::policy< > > *arg1 = (boost::math::extreme_value_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::FisherF

  Proxy of C++ BoostDistributions::FisherF class


*/
static swig_class SwigClassFisherF;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_FisherF_allocate(VALUE self)
#else
_wrap_FisherF_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::FisherF.new

  call-seq:
    FisherF.new(double const & i, double const & j)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_FisherF(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","fisher_f_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","fisher_f_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > > *)new boost::math::fisher_f_distribution< double,policies::policy< > >((double const &)*arg1,(double const &)*arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.degrees_of_freedom1

  call-seq:
    degrees_of_freedom1 -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_degrees_of_freedom1(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","degrees_of_freedom1", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom1();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.degrees_of_freedom2

  call-seq:
    degrees_of_freedom2 -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_degrees_of_freedom2(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","degrees_of_freedom2", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom2();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.pdf

  call-seq:
    pdf(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.cdf

  call-seq:
    cdf(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FisherF_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_FisherF_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FisherF_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FisherF_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::fisher_f_distribution< double,policies::policy< > >::value_type cdf(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::fisher_f_distribution< double,policies::policy< > >::value_type cdf(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.quantile

  call-seq:
    quantile(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FisherF_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_FisherF_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FisherF_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FisherF_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::fisher_f_distribution< double,policies::policy< > >::value_type quantile(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::fisher_f_distribution< double,policies::policy< > >::value_type quantile(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.hazard

  call-seq:
    hazard(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.chf

  call-seq:
    chf(boost::math::fisher_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.mean

  call-seq:
    mean -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.median

  call-seq:
    median -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_median(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.mode

  call-seq:
    mode -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.standard_deviation

  call-seq:
    standard_deviation -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.variance

  call-seq:
    variance -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.skewness

  call-seq:
    skewness -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.kurtosis

  call-seq:
    kurtosis -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::fisher_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::fisher_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::fisher_f_distribution< double,policies::policy< > >::value_type)boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.range

  call-seq:
    range -> std::pair< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_range(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::FisherF.support

  call-seq:
    support -> std::pair< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_FisherF_support(int argc, VALUE *argv, VALUE self) {
  boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::fisher_f_distribution< double,policies::policy< > >::value_type,boost::math::fisher_f_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::fisher_f_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::fisher_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::fisher_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::fisher_f_distribution< double,policies::policy< > > *arg1 = (boost::math::fisher_f_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Gamma

  Proxy of C++ BoostDistributions::Gamma class


*/
static swig_class SwigClassGamma;

/*
  Document-method: BoostDistributions::Gamma.new

  call-seq:
    Gamma.new(double l_shape, double l_scale=1)
    Gamma.new(double l_shape)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Gamma__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","gamma_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","gamma_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > > *)new boost::math::gamma_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Gamma_allocate(VALUE self)
#else
_wrap_Gamma_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Gamma__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","gamma_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > > *)new boost::math::gamma_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Gamma(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Gamma__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Gamma__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Gamma.new", 
    "    Gamma.new(double l_shape, double l_scale)\n"
    "    Gamma.new(double l_shape)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.shape

  call-seq:
    shape -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_shape(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1)->shape();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.pdf

  call-seq:
    pdf(boost::math::gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.cdf

  call-seq:
    cdf(boost::math::gamma_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::gamma_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gamma_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Gamma_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Gamma_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Gamma_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::gamma_distribution< double,policies::policy< > >::value_type cdf(boost::math::gamma_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::gamma_distribution< double,policies::policy< > >::value_type cdf(boost::math::gamma_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.quantile

  call-seq:
    quantile(boost::math::gamma_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::gamma_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::gamma_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gamma_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Gamma_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Gamma_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Gamma_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::gamma_distribution< double,policies::policy< > >::value_type quantile(boost::math::gamma_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::gamma_distribution< double,policies::policy< > >::value_type quantile(boost::math::gamma_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.hazard

  call-seq:
    hazard(boost::math::gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.chf

  call-seq:
    chf(boost::math::gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.mean

  call-seq:
    mean -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.median

  call-seq:
    median -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_median(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.mode

  call-seq:
    mode -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.standard_deviation

  call-seq:
    standard_deviation -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.variance

  call-seq:
    variance -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.skewness

  call-seq:
    skewness -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.kurtosis

  call-seq:
    kurtosis -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::gamma_distribution< double,policies::policy< > >::value_type)boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.range

  call-seq:
    range -> std::pair< boost::math::gamma_distribution< double,policies::policy< > >::value_type,boost::math::gamma_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_range(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::gamma_distribution< double,policies::policy< > >::value_type,boost::math::gamma_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Gamma.support

  call-seq:
    support -> std::pair< boost::math::gamma_distribution< double,policies::policy< > >::value_type,boost::math::gamma_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Gamma_support(int argc, VALUE *argv, VALUE self) {
  boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::gamma_distribution< double,policies::policy< > >::value_type,boost::math::gamma_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::gamma_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::gamma_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Geometric

  Proxy of C++ BoostDistributions::Geometric class


*/
static swig_class SwigClassGeometric;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Geometric_allocate(VALUE self)
#else
_wrap_Geometric_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::Geometric.new

  call-seq:
    Geometric.new(double p)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Geometric(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","geometric_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > > *)new boost::math::geometric_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.success_fraction

  call-seq:
    success_fraction -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_success_fraction(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","success_fraction", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1)->success_fraction();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.successes

  call-seq:
    successes -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_successes(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","successes", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1)->successes();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.find_lower_bound_on_p

  call-seq:
    find_lower_bound_on_p(double trials, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Geometric_find_lower_bound_on_p(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (double)boost::math::geometric_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_lower_bound_on_p(arg1,arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.find_upper_bound_on_p

  call-seq:
    find_upper_bound_on_p(double trials, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Geometric_find_upper_bound_on_p(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (double)boost::math::geometric_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_upper_bound_on_p(arg1,arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.find_minimum_number_of_trials

  call-seq:
    find_minimum_number_of_trials(double k, double p, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Geometric_find_minimum_number_of_trials(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::geometric_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_minimum_number_of_trials(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.find_maximum_number_of_trials

  call-seq:
    find_maximum_number_of_trials(double k, double p, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_Geometric_find_maximum_number_of_trials(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::geometric_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::geometric_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_maximum_number_of_trials(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.pdf

  call-seq:
    pdf(boost::math::geometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::geometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.cdf

  call-seq:
    cdf(boost::math::geometric_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::geometric_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::geometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::geometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Geometric_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::geometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Geometric_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Geometric_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Geometric_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::geometric_distribution< double,policies::policy< > >::value_type cdf(boost::math::geometric_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::geometric_distribution< double,policies::policy< > >::value_type cdf(boost::math::geometric_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.quantile

  call-seq:
    quantile(boost::math::geometric_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::geometric_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::geometric_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::geometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Geometric_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::geometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Geometric_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Geometric_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Geometric_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::geometric_distribution< double,policies::policy< > >::value_type quantile(boost::math::geometric_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::geometric_distribution< double,policies::policy< > >::value_type quantile(boost::math::geometric_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.hazard

  call-seq:
    hazard(boost::math::geometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::geometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.chf

  call-seq:
    chf(boost::math::geometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::geometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.mean

  call-seq:
    mean -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.median

  call-seq:
    median -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_median(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.mode

  call-seq:
    mode -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.standard_deviation

  call-seq:
    standard_deviation -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.variance

  call-seq:
    variance -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.skewness

  call-seq:
    skewness -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.kurtosis

  call-seq:
    kurtosis -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::geometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::geometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::geometric_distribution< double,policies::policy< > >::value_type)boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.range

  call-seq:
    range -> std::pair< boost::math::geometric_distribution< double,policies::policy< > >::value_type,boost::math::geometric_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_range(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::geometric_distribution< double,policies::policy< > >::value_type,boost::math::geometric_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Geometric.support

  call-seq:
    support -> std::pair< boost::math::geometric_distribution< double,policies::policy< > >::value_type,boost::math::geometric_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Geometric_support(int argc, VALUE *argv, VALUE self) {
  boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::geometric_distribution< double,policies::policy< > >::value_type,boost::math::geometric_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::geometric_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::geometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::geometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::geometric_distribution< double,policies::policy< > > *arg1 = (boost::math::geometric_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Hyperexponential

  Proxy of C++ BoostDistributions::Hyperexponential class


*/
static swig_class SwigClassHyperexponential;

/*
  Document-method: BoostDistributions::Hyperexponential.new

  call-seq:
    Hyperexponential.new
    Hyperexponential.new(std::vector< double > const & prob, std::vector< double > const & range)
    Hyperexponential.new(std::vector< double > const & range)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Hyperexponential__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > > *)new boost::math::hyperexponential_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.probabilities

  call-seq:
    probabilities -> std::vector< double >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_probabilities(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","probabilities", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  result = ((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1)->probabilities();
  {
    for(typename std::vector< double >::const_iterator it((&result)->begin()), it_end((&result)->end());
      it != it_end; ++it){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from(*it));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.rates

  call-seq:
    rates -> std::vector< double >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_rates(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","rates", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  result = ((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1)->rates();
  {
    for(typename std::vector< double >::const_iterator it((&result)->begin()), it_end((&result)->end());
      it != it_end; ++it){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from(*it));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.num_phases

  call-seq:
    num_phases -> std::size_t

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_num_phases(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","num_phases", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  result = ((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1)->num_phases();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.new

  call-seq:
    Hyperexponential.new
    Hyperexponential.new(std::vector< double > const & prob, std::vector< double > const & range)
    Hyperexponential.new(std::vector< double > const & range)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Hyperexponential__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > temp1 ;
  std::vector< double > temp2 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    if(RB_TYPE_P(argv[0], T_ARRAY)){
      double v;
      for(unsigned int i(0), i_end((unsigned int)RARRAY_LEN(argv[0])); i < i_end; ++i){
        VALUE val(RARRAY_AREF(argv[0], i));
        if(!SWIG_IsOK(swig::asval(val, &v))){
          break;
        }
        temp1.push_back(v);
      }
    }
    
    arg1 = &temp1;
  }
  {
    if(RB_TYPE_P(argv[1], T_ARRAY)){
      double v;
      for(unsigned int i(0), i_end((unsigned int)RARRAY_LEN(argv[1])); i < i_end; ++i){
        VALUE val(RARRAY_AREF(argv[1], i));
        if(!SWIG_IsOK(swig::asval(val, &v))){
          break;
        }
        temp2.push_back(v);
      }
    }
    
    arg2 = &temp2;
  }
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > > *)new_boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg___SWIG_1((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Hyperexponential_allocate(VALUE self)
#else
_wrap_Hyperexponential_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Hyperexponential__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = 0 ;
  std::vector< double > temp1 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if(RB_TYPE_P(argv[0], T_ARRAY)){
      double v;
      for(unsigned int i(0), i_end((unsigned int)RARRAY_LEN(argv[0])); i < i_end; ++i){
        VALUE val(RARRAY_AREF(argv[0], i));
        if(!SWIG_IsOK(swig::asval(val, &v))){
          break;
        }
        temp1.push_back(v);
      }
    }
    
    arg1 = &temp1;
  }
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > > *)new_boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg___SWIG_2((std::vector< double > const &)*arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Hyperexponential(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Hyperexponential__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Hyperexponential__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Hyperexponential__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Hyperexponential.new", 
    "    Hyperexponential.new()\n"
    "    Hyperexponential.new(std::vector< double > const &prob, std::vector< double > const &range)\n"
    "    Hyperexponential.new(std::vector< double > const &range)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.pdf

  call-seq:
    pdf(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.cdf

  call-seq:
    cdf(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hyperexponential_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Hyperexponential_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Hyperexponential_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Hyperexponential_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type cdf(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type cdf(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.quantile

  call-seq:
    quantile(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hyperexponential_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Hyperexponential_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Hyperexponential_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Hyperexponential_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type quantile(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type quantile(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.hazard

  call-seq:
    hazard(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.chf

  call-seq:
    chf(boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.mean

  call-seq:
    mean -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.median

  call-seq:
    median -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_median(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.mode

  call-seq:
    mode -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.standard_deviation

  call-seq:
    standard_deviation -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.variance

  call-seq:
    variance -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.skewness

  call-seq:
    skewness -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.kurtosis

  call-seq:
    kurtosis -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type)boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.range

  call-seq:
    range -> std::pair< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_range(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hyperexponential.support

  call-seq:
    support -> std::pair< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hyperexponential_support(int argc, VALUE *argv, VALUE self) {
  boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type,boost::math::hyperexponential_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hyperexponential_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hyperexponential_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::hyperexponential_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::hyperexponential_distribution< double,policies::policy< > > *arg1 = (boost::math::hyperexponential_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Hypergeometric

  Proxy of C++ BoostDistributions::Hypergeometric class


*/
static swig_class SwigClassHypergeometric;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Hypergeometric_allocate(VALUE self)
#else
_wrap_Hypergeometric_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::Hypergeometric.new

  call-seq:
    Hypergeometric.new(unsigned int r, unsigned int n, unsigned int N)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Hypergeometric(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","hypergeometric_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","hypergeometric_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","hypergeometric_distribution<(double,policies::policy<()>)>", 3, argv[2] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > > *)new boost::math::hypergeometric_distribution< double,policies::policy< > >(arg1,arg2,arg3);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.total

  call-seq:
    total -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_total(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","total", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  result = (unsigned int)((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1)->total();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.defective

  call-seq:
    defective -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_defective(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","defective", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  result = (unsigned int)((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1)->defective();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.sample_count

  call-seq:
    sample_count -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_sample_count(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","sample_count", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  result = (unsigned int)((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1)->sample_count();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.check_params

  call-seq:
    check_params(char const * function, double * result) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_check_params(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","check_params", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","check_params", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","check_params", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  result = (bool)((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1)->check_params((char const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.check_x

  call-seq:
    check_x(unsigned int x, char const * function, double * result) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_check_x(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","check_x", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","check_x", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","check_x", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "double *","check_x", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1)->check_x(arg2,(char const *)arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.pdf

  call-seq:
    pdf(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.cdf

  call-seq:
    cdf(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hypergeometric_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Hypergeometric_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Hypergeometric_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Hypergeometric_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type cdf(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type cdf(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.quantile

  call-seq:
    quantile(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hypergeometric_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Hypergeometric_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Hypergeometric_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Hypergeometric_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type quantile(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type quantile(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.hazard

  call-seq:
    hazard(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.chf

  call-seq:
    chf(boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.mean

  call-seq:
    mean -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.median

  call-seq:
    median -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_median(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.mode

  call-seq:
    mode -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.standard_deviation

  call-seq:
    standard_deviation -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.variance

  call-seq:
    variance -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.skewness

  call-seq:
    skewness -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.kurtosis

  call-seq:
    kurtosis -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type)boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.range

  call-seq:
    range -> std::pair< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_range(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Hypergeometric.support

  call-seq:
    support -> std::pair< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Hypergeometric_support(int argc, VALUE *argv, VALUE self) {
  boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type,boost::math::hypergeometric_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::hypergeometric_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::hypergeometric_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::hypergeometric_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::hypergeometric_distribution< double,policies::policy< > > *arg1 = (boost::math::hypergeometric_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::InverseChiSquared

  Proxy of C++ BoostDistributions::InverseChiSquared class


*/
static swig_class SwigClassInverseChiSquared;

/*
  Document-method: BoostDistributions::InverseChiSquared.new

  call-seq:
    InverseChiSquared.new(double df, double l_scale)
    InverseChiSquared.new(double df=1)
    InverseChiSquared.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_InverseChiSquared__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","inverse_chi_squared_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","inverse_chi_squared_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *)new boost::math::inverse_chi_squared_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InverseChiSquared__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","inverse_chi_squared_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *)new boost::math::inverse_chi_squared_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_InverseChiSquared_allocate(VALUE self)
#else
_wrap_InverseChiSquared_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_InverseChiSquared__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *)new boost::math::inverse_chi_squared_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_InverseChiSquared(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_InverseChiSquared__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InverseChiSquared__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_InverseChiSquared__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "InverseChiSquared.new", 
    "    InverseChiSquared.new(double df, double l_scale)\n"
    "    InverseChiSquared.new(double df)\n"
    "    InverseChiSquared.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.degrees_of_freedom

  call-seq:
    degrees_of_freedom -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_degrees_of_freedom(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","degrees_of_freedom", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.pdf

  call-seq:
    pdf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.cdf

  call-seq:
    cdf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InverseChiSquared_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InverseChiSquared_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InverseChiSquared_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InverseChiSquared_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type cdf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type cdf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.quantile

  call-seq:
    quantile(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InverseChiSquared_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InverseChiSquared_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InverseChiSquared_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InverseChiSquared_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type quantile(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type quantile(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.hazard

  call-seq:
    hazard(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.chf

  call-seq:
    chf(boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.mean

  call-seq:
    mean -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.median

  call-seq:
    median -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_median(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.mode

  call-seq:
    mode -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.standard_deviation

  call-seq:
    standard_deviation -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.variance

  call-seq:
    variance -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.skewness

  call-seq:
    skewness -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.kurtosis

  call-seq:
    kurtosis -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.range

  call-seq:
    range -> std::pair< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_range(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseChiSquared.support

  call-seq:
    support -> std::pair< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseChiSquared_support(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::inverse_chi_squared_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::inverse_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::InverseGamma

  Proxy of C++ BoostDistributions::InverseGamma class


*/
static swig_class SwigClassInverseGamma;

/*
  Document-method: BoostDistributions::InverseGamma.new

  call-seq:
    InverseGamma.new(double l_shape=1, double l_scale=1)
    InverseGamma.new(double l_shape=1)
    InverseGamma.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_InverseGamma__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","inverse_gamma_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","inverse_gamma_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *)new boost::math::inverse_gamma_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InverseGamma__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","inverse_gamma_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *)new boost::math::inverse_gamma_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_InverseGamma_allocate(VALUE self)
#else
_wrap_InverseGamma_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_InverseGamma__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *)new boost::math::inverse_gamma_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_InverseGamma(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_InverseGamma__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InverseGamma__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_InverseGamma__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "InverseGamma.new", 
    "    InverseGamma.new(double l_shape, double l_scale)\n"
    "    InverseGamma.new(double l_shape)\n"
    "    InverseGamma.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.shape

  call-seq:
    shape -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_shape(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1)->shape();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.pdf

  call-seq:
    pdf(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.cdf

  call-seq:
    cdf(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InverseGamma_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InverseGamma_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InverseGamma_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InverseGamma_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type cdf(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type cdf(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.quantile

  call-seq:
    quantile(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InverseGamma_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InverseGamma_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InverseGamma_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InverseGamma_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type quantile(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type quantile(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.hazard

  call-seq:
    hazard(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.chf

  call-seq:
    chf(boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.mean

  call-seq:
    mean -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.median

  call-seq:
    median -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_median(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.mode

  call-seq:
    mode -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.standard_deviation

  call-seq:
    standard_deviation -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.variance

  call-seq:
    variance -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.skewness

  call-seq:
    skewness -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.kurtosis

  call-seq:
    kurtosis -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.range

  call-seq:
    range -> std::pair< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_range(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGamma.support

  call-seq:
    support -> std::pair< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGamma_support(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gamma_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gamma_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gamma_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::inverse_gamma_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::inverse_gamma_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gamma_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::InverseGaussian

  Proxy of C++ BoostDistributions::InverseGaussian class


*/
static swig_class SwigClassInverseGaussian;

/*
  Document-method: BoostDistributions::InverseGaussian.new

  call-seq:
    InverseGaussian.new(double l_mean=1, double l_scale=1)
    InverseGaussian.new(double l_mean=1)
    InverseGaussian.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_InverseGaussian__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","inverse_gaussian_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","inverse_gaussian_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *)new boost::math::inverse_gaussian_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InverseGaussian__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","inverse_gaussian_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *)new boost::math::inverse_gaussian_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_InverseGaussian_allocate(VALUE self)
#else
_wrap_InverseGaussian_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_InverseGaussian__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *)new boost::math::inverse_gaussian_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_InverseGaussian(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_InverseGaussian__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InverseGaussian__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_InverseGaussian__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "InverseGaussian.new", 
    "    InverseGaussian.new(double l_mean, double l_scale)\n"
    "    InverseGaussian.new(double l_mean)\n"
    "    InverseGaussian.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.mean

  call-seq:
    mean -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1)->mean();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_location(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.shape

  call-seq:
    shape -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_shape(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1)->shape();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.pdf

  call-seq:
    pdf(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.cdf

  call-seq:
    cdf(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InverseGaussian_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InverseGaussian_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InverseGaussian_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InverseGaussian_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type cdf(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type cdf(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.quantile

  call-seq:
    quantile(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InverseGaussian_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InverseGaussian_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InverseGaussian_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InverseGaussian_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type quantile(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type quantile(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.hazard

  call-seq:
    hazard(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.chf

  call-seq:
    chf(boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.median

  call-seq:
    median -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_median(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.mode

  call-seq:
    mode -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.standard_deviation

  call-seq:
    standard_deviation -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.variance

  call-seq:
    variance -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.skewness

  call-seq:
    skewness -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.kurtosis

  call-seq:
    kurtosis -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type)boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.range

  call-seq:
    range -> std::pair< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_range(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::InverseGaussian.support

  call-seq:
    support -> std::pair< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_InverseGaussian_support(int argc, VALUE *argv, VALUE self) {
  boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type,boost::math::inverse_gaussian_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::inverse_gaussian_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::inverse_gaussian_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::inverse_gaussian_distribution< double,policies::policy< > > *arg1 = (boost::math::inverse_gaussian_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::KolmogorovSmirnov

  Proxy of C++ BoostDistributions::KolmogorovSmirnov class


*/
static swig_class SwigClassKolmogorovSmirnov;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_KolmogorovSmirnov_allocate(VALUE self)
#else
_wrap_KolmogorovSmirnov_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.new

  call-seq:
    KolmogorovSmirnov.new(double n)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_KolmogorovSmirnov(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","kolmogorov_smirnov_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *)new boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.number_of_observations

  call-seq:
    number_of_observations -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_number_of_observations(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","number_of_observations", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1)->number_of_observations();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.pdf

  call-seq:
    pdf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.cdf

  call-seq:
    cdf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_KolmogorovSmirnov_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KolmogorovSmirnov_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_KolmogorovSmirnov_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type cdf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type cdf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.quantile

  call-seq:
    quantile(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_KolmogorovSmirnov_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KolmogorovSmirnov_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_KolmogorovSmirnov_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type quantile(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type quantile(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.hazard

  call-seq:
    hazard(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.chf

  call-seq:
    chf(boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.mean

  call-seq:
    mean -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.median

  call-seq:
    median -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_median(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.mode

  call-seq:
    mode -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.standard_deviation

  call-seq:
    standard_deviation -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.variance

  call-seq:
    variance -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.skewness

  call-seq:
    skewness -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.kurtosis

  call-seq:
    kurtosis -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type)boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.range

  call-seq:
    range -> std::pair< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_range(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::KolmogorovSmirnov.support

  call-seq:
    support -> std::pair< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_KolmogorovSmirnov_support(int argc, VALUE *argv, VALUE self) {
  boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type,boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *arg1 = (boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Laplace

  Proxy of C++ BoostDistributions::Laplace class


*/
static swig_class SwigClassLaplace;

/*
  Document-method: BoostDistributions::Laplace.new

  call-seq:
    Laplace.new(double l_location=0, double l_scale=1)
    Laplace.new(double l_location=0)
    Laplace.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Laplace__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","laplace_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","laplace_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > > *)new boost::math::laplace_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Laplace__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","laplace_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > > *)new boost::math::laplace_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Laplace_allocate(VALUE self)
#else
_wrap_Laplace_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Laplace__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > > *)new boost::math::laplace_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Laplace(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Laplace__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Laplace__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Laplace__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Laplace.new", 
    "    Laplace.new(double l_location, double l_scale)\n"
    "    Laplace.new(double l_location)\n"
    "    Laplace.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_location(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.check_parameters

  call-seq:
    check_parameters(char const * function, double * result) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_check_parameters(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","check_parameters", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","check_parameters", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","check_parameters", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  result = (bool)((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1)->check_parameters((char const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.pdf

  call-seq:
    pdf(boost::math::laplace_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::laplace_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.cdf

  call-seq:
    cdf(boost::math::laplace_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::laplace_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::laplace_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::laplace_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Laplace_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::laplace_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Laplace_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Laplace_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Laplace_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::laplace_distribution< double,policies::policy< > >::value_type cdf(boost::math::laplace_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::laplace_distribution< double,policies::policy< > >::value_type cdf(boost::math::laplace_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.quantile

  call-seq:
    quantile(boost::math::laplace_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::laplace_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::laplace_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::laplace_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Laplace_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::laplace_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Laplace_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Laplace_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Laplace_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::laplace_distribution< double,policies::policy< > >::value_type quantile(boost::math::laplace_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::laplace_distribution< double,policies::policy< > >::value_type quantile(boost::math::laplace_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.hazard

  call-seq:
    hazard(boost::math::laplace_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::laplace_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.chf

  call-seq:
    chf(boost::math::laplace_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::laplace_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.mean

  call-seq:
    mean -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.median

  call-seq:
    median -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_median(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.mode

  call-seq:
    mode -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.standard_deviation

  call-seq:
    standard_deviation -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.variance

  call-seq:
    variance -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.skewness

  call-seq:
    skewness -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.kurtosis

  call-seq:
    kurtosis -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::laplace_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::laplace_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::laplace_distribution< double,policies::policy< > >::value_type)boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.range

  call-seq:
    range -> std::pair< boost::math::laplace_distribution< double,policies::policy< > >::value_type,boost::math::laplace_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_range(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::laplace_distribution< double,policies::policy< > >::value_type,boost::math::laplace_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Laplace.support

  call-seq:
    support -> std::pair< boost::math::laplace_distribution< double,policies::policy< > >::value_type,boost::math::laplace_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Laplace_support(int argc, VALUE *argv, VALUE self) {
  boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::laplace_distribution< double,policies::policy< > >::value_type,boost::math::laplace_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::laplace_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::laplace_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::laplace_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::laplace_distribution< double,policies::policy< > > *arg1 = (boost::math::laplace_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Logistic

  Proxy of C++ BoostDistributions::Logistic class


*/
static swig_class SwigClassLogistic;

/*
  Document-method: BoostDistributions::Logistic.new

  call-seq:
    Logistic.new(double l_location=0, double l_scale=1)
    Logistic.new(double l_location=0)
    Logistic.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Logistic__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","logistic_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","logistic_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > > *)new boost::math::logistic_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Logistic__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","logistic_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > > *)new boost::math::logistic_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Logistic_allocate(VALUE self)
#else
_wrap_Logistic_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Logistic__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > > *)new boost::math::logistic_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Logistic(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Logistic__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Logistic__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Logistic__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Logistic.new", 
    "    Logistic.new(double l_location, double l_scale)\n"
    "    Logistic.new(double l_location)\n"
    "    Logistic.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_location(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.pdf

  call-seq:
    pdf(boost::math::logistic_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::logistic_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.cdf

  call-seq:
    cdf(boost::math::logistic_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::logistic_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::logistic_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::logistic_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Logistic_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::logistic_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Logistic_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Logistic_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Logistic_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::logistic_distribution< double,policies::policy< > >::value_type cdf(boost::math::logistic_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::logistic_distribution< double,policies::policy< > >::value_type cdf(boost::math::logistic_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.quantile

  call-seq:
    quantile(boost::math::logistic_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::logistic_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::logistic_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::logistic_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Logistic_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::logistic_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Logistic_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Logistic_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Logistic_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::logistic_distribution< double,policies::policy< > >::value_type quantile(boost::math::logistic_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::logistic_distribution< double,policies::policy< > >::value_type quantile(boost::math::logistic_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.hazard

  call-seq:
    hazard(boost::math::logistic_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::logistic_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.chf

  call-seq:
    chf(boost::math::logistic_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::logistic_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.mean

  call-seq:
    mean -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.median

  call-seq:
    median -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_median(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.mode

  call-seq:
    mode -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.standard_deviation

  call-seq:
    standard_deviation -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.variance

  call-seq:
    variance -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.skewness

  call-seq:
    skewness -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.kurtosis

  call-seq:
    kurtosis -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::logistic_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::logistic_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::logistic_distribution< double,policies::policy< > >::value_type)boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.range

  call-seq:
    range -> std::pair< boost::math::logistic_distribution< double,policies::policy< > >::value_type,boost::math::logistic_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_range(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::logistic_distribution< double,policies::policy< > >::value_type,boost::math::logistic_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Logistic.support

  call-seq:
    support -> std::pair< boost::math::logistic_distribution< double,policies::policy< > >::value_type,boost::math::logistic_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Logistic_support(int argc, VALUE *argv, VALUE self) {
  boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::logistic_distribution< double,policies::policy< > >::value_type,boost::math::logistic_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::logistic_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::logistic_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::logistic_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::logistic_distribution< double,policies::policy< > > *arg1 = (boost::math::logistic_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Lognormal

  Proxy of C++ BoostDistributions::Lognormal class


*/
static swig_class SwigClassLognormal;

/*
  Document-method: BoostDistributions::Lognormal.new

  call-seq:
    Lognormal.new(double l_location=0, double l_scale=1)
    Lognormal.new(double l_location=0)
    Lognormal.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Lognormal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","lognormal_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","lognormal_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > > *)new boost::math::lognormal_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Lognormal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","lognormal_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > > *)new boost::math::lognormal_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Lognormal_allocate(VALUE self)
#else
_wrap_Lognormal_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Lognormal__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > > *)new boost::math::lognormal_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Lognormal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Lognormal__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Lognormal__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Lognormal__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Lognormal.new", 
    "    Lognormal.new(double l_location, double l_scale)\n"
    "    Lognormal.new(double l_location)\n"
    "    Lognormal.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_location(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.pdf

  call-seq:
    pdf(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::lognormal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.cdf

  call-seq:
    cdf(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::lognormal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Lognormal_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::lognormal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Lognormal_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Lognormal_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Lognormal_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::lognormal_distribution< double,policies::policy< > >::value_type cdf(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::lognormal_distribution< double,policies::policy< > >::value_type cdf(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.quantile

  call-seq:
    quantile(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::lognormal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Lognormal_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::lognormal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Lognormal_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Lognormal_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Lognormal_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::lognormal_distribution< double,policies::policy< > >::value_type quantile(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::lognormal_distribution< double,policies::policy< > >::value_type quantile(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.hazard

  call-seq:
    hazard(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::lognormal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.chf

  call-seq:
    chf(boost::math::lognormal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::lognormal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.mean

  call-seq:
    mean -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.median

  call-seq:
    median -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_median(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.mode

  call-seq:
    mode -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.standard_deviation

  call-seq:
    standard_deviation -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.variance

  call-seq:
    variance -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.skewness

  call-seq:
    skewness -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.kurtosis

  call-seq:
    kurtosis -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::lognormal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::lognormal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::lognormal_distribution< double,policies::policy< > >::value_type)boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.range

  call-seq:
    range -> std::pair< boost::math::lognormal_distribution< double,policies::policy< > >::value_type,boost::math::lognormal_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_range(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::lognormal_distribution< double,policies::policy< > >::value_type,boost::math::lognormal_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Lognormal.support

  call-seq:
    support -> std::pair< boost::math::lognormal_distribution< double,policies::policy< > >::value_type,boost::math::lognormal_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Lognormal_support(int argc, VALUE *argv, VALUE self) {
  boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::lognormal_distribution< double,policies::policy< > >::value_type,boost::math::lognormal_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::lognormal_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::lognormal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::lognormal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::lognormal_distribution< double,policies::policy< > > *arg1 = (boost::math::lognormal_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::NegativeBinomial

  Proxy of C++ BoostDistributions::NegativeBinomial class


*/
static swig_class SwigClassNegativeBinomial;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_NegativeBinomial_allocate(VALUE self)
#else
_wrap_NegativeBinomial_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.new

  call-seq:
    NegativeBinomial.new(double r, double p)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_NegativeBinomial(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","negative_binomial_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","negative_binomial_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > > *)new boost::math::negative_binomial_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.success_fraction

  call-seq:
    success_fraction -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_success_fraction(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","success_fraction", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1)->success_fraction();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.successes

  call-seq:
    successes -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_successes(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","successes", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1)->successes();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.find_lower_bound_on_p

  call-seq:
    find_lower_bound_on_p(double trials, double successes, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_find_lower_bound_on_p(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_lower_bound_on_p", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::negative_binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_lower_bound_on_p(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.find_upper_bound_on_p

  call-seq:
    find_upper_bound_on_p(double trials, double successes, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_find_upper_bound_on_p(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_upper_bound_on_p", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::negative_binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_upper_bound_on_p(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.find_minimum_number_of_trials

  call-seq:
    find_minimum_number_of_trials(double k, double p, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_find_minimum_number_of_trials(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_minimum_number_of_trials", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::negative_binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_minimum_number_of_trials(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.find_maximum_number_of_trials

  call-seq:
    find_maximum_number_of_trials(double k, double p, double alpha) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_find_maximum_number_of_trials(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::negative_binomial_distribution<(double,policies::policy<()>)>::find_maximum_number_of_trials", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::negative_binomial_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_maximum_number_of_trials(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.pdf

  call-seq:
    pdf(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.cdf

  call-seq:
    cdf(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NegativeBinomial_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NegativeBinomial_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NegativeBinomial_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NegativeBinomial_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type cdf(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type cdf(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.quantile

  call-seq:
    quantile(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NegativeBinomial_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NegativeBinomial_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NegativeBinomial_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NegativeBinomial_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type quantile(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type quantile(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.hazard

  call-seq:
    hazard(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.chf

  call-seq:
    chf(boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.mean

  call-seq:
    mean -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.median

  call-seq:
    median -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_median(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.mode

  call-seq:
    mode -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.standard_deviation

  call-seq:
    standard_deviation -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.variance

  call-seq:
    variance -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.skewness

  call-seq:
    skewness -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.kurtosis

  call-seq:
    kurtosis -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type)boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.range

  call-seq:
    range -> std::pair< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_range(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NegativeBinomial.support

  call-seq:
    support -> std::pair< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NegativeBinomial_support(int argc, VALUE *argv, VALUE self) {
  boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type,boost::math::negative_binomial_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::negative_binomial_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::negative_binomial_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::negative_binomial_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::negative_binomial_distribution< double,policies::policy< > > *arg1 = (boost::math::negative_binomial_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::NonCentralBeta

  Proxy of C++ BoostDistributions::NonCentralBeta class


*/
static swig_class SwigClassNonCentralBeta;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_NonCentralBeta_allocate(VALUE self)
#else
_wrap_NonCentralBeta_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.new

  call-seq:
    NonCentralBeta.new(double a_, double b_, double lambda)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_NonCentralBeta(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","non_central_beta_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","non_central_beta_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","non_central_beta_distribution<(double,policies::policy<()>)>", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > > *)new boost::math::non_central_beta_distribution< double,policies::policy< > >(arg1,arg2,arg3);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.alpha

  call-seq:
    alpha -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_alpha(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1)->alpha();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.beta

  call-seq:
    beta -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_beta(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","beta", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1)->beta();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.non_centrality

  call-seq:
    non_centrality -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_non_centrality(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","non_centrality", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1)->non_centrality();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.pdf

  call-seq:
    pdf(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.cdf

  call-seq:
    cdf(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralBeta_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralBeta_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralBeta_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralBeta_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.quantile

  call-seq:
    quantile(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralBeta_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralBeta_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralBeta_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralBeta_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.hazard

  call-seq:
    hazard(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.chf

  call-seq:
    chf(boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.mean

  call-seq:
    mean -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.median

  call-seq:
    median -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_median(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.mode

  call-seq:
    mode -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.standard_deviation

  call-seq:
    standard_deviation -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.variance

  call-seq:
    variance -> boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type)boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.range

  call-seq:
    range -> std::pair< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_range(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralBeta.support

  call-seq:
    support -> std::pair< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralBeta_support(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type,boost::math::non_central_beta_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_beta_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_beta_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::non_central_beta_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::non_central_beta_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_beta_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::NonCentralChiSquared

  Proxy of C++ BoostDistributions::NonCentralChiSquared class


*/
static swig_class SwigClassNonCentralChiSquared;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_NonCentralChiSquared_allocate(VALUE self)
#else
_wrap_NonCentralChiSquared_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.new

  call-seq:
    NonCentralChiSquared.new(double df_, double lambda)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_NonCentralChiSquared(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","non_central_chi_squared_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","non_central_chi_squared_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *)new boost::math::non_central_chi_squared_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.degrees_of_freedom

  call-seq:
    degrees_of_freedom -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_degrees_of_freedom(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","degrees_of_freedom", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.non_centrality

  call-seq:
    non_centrality -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_non_centrality(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","non_centrality", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1)->non_centrality();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.find_degrees_of_freedom

  call-seq:
    find_degrees_of_freedom(double lam, double x, double p) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_find_degrees_of_freedom(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::non_central_chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::non_central_chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::non_central_chi_squared_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (double)boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_degrees_of_freedom(arg1,arg2,arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.find_non_centrality

  call-seq:
    find_non_centrality(double v, double x, double p) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_find_non_centrality(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::non_central_chi_squared_distribution<(double,policies::policy<()>)>::find_non_centrality", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::non_central_chi_squared_distribution<(double,policies::policy<()>)>::find_non_centrality", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::non_central_chi_squared_distribution<(double,policies::policy<()>)>::find_non_centrality", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (double)boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_non_centrality(arg1,arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.pdf

  call-seq:
    pdf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.cdf

  call-seq:
    cdf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralChiSquared_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralChiSquared_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralChiSquared_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralChiSquared_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.quantile

  call-seq:
    quantile(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralChiSquared_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralChiSquared_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralChiSquared_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralChiSquared_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.hazard

  call-seq:
    hazard(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.chf

  call-seq:
    chf(boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.mean

  call-seq:
    mean -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.median

  call-seq:
    median -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_median(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.mode

  call-seq:
    mode -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.standard_deviation

  call-seq:
    standard_deviation -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.variance

  call-seq:
    variance -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.skewness

  call-seq:
    skewness -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.kurtosis

  call-seq:
    kurtosis -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type)boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.range

  call-seq:
    range -> std::pair< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_range(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralChiSquared.support

  call-seq:
    support -> std::pair< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralChiSquared_support(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type,boost::math::non_central_chi_squared_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_chi_squared_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::non_central_chi_squared_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::NonCentralF

  Proxy of C++ BoostDistributions::NonCentralF class


*/
static swig_class SwigClassNonCentralF;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_NonCentralF_allocate(VALUE self)
#else
_wrap_NonCentralF_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::NonCentralF.new

  call-seq:
    NonCentralF.new(double v1_, double v2_, double lambda)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_NonCentralF(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","non_central_f_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","non_central_f_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","non_central_f_distribution<(double,policies::policy<()>)>", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > > *)new boost::math::non_central_f_distribution< double,policies::policy< > >(arg1,arg2,arg3);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.degrees_of_freedom1

  call-seq:
    degrees_of_freedom1 -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_degrees_of_freedom1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","degrees_of_freedom1", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom1();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.degrees_of_freedom2

  call-seq:
    degrees_of_freedom2 -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_degrees_of_freedom2(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","degrees_of_freedom2", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom2();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.non_centrality

  call-seq:
    non_centrality -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_non_centrality(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","non_centrality", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1)->non_centrality();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.pdf

  call-seq:
    pdf(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.cdf

  call-seq:
    cdf(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralF_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralF_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralF_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralF_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::non_central_f_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::non_central_f_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.quantile

  call-seq:
    quantile(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralF_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralF_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralF_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralF_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::non_central_f_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::non_central_f_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.hazard

  call-seq:
    hazard(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.chf

  call-seq:
    chf(boost::math::non_central_f_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.mean

  call-seq:
    mean -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.median

  call-seq:
    median -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_median(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.mode

  call-seq:
    mode -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.standard_deviation

  call-seq:
    standard_deviation -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.variance

  call-seq:
    variance -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.skewness

  call-seq:
    skewness -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.kurtosis

  call-seq:
    kurtosis -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::non_central_f_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_f_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_f_distribution< double,policies::policy< > >::value_type)boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.range

  call-seq:
    range -> std::pair< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_range(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralF.support

  call-seq:
    support -> std::pair< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralF_support(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_f_distribution< double,policies::policy< > >::value_type,boost::math::non_central_f_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_f_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_f_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::non_central_f_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::non_central_f_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_f_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::NonCentralT

  Proxy of C++ BoostDistributions::NonCentralT class


*/
static swig_class SwigClassNonCentralT;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_NonCentralT_allocate(VALUE self)
#else
_wrap_NonCentralT_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::NonCentralT.new

  call-seq:
    NonCentralT.new(double v_, double lambda)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_NonCentralT(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","non_central_t_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","non_central_t_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > > *)new boost::math::non_central_t_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.degrees_of_freedom

  call-seq:
    degrees_of_freedom -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_degrees_of_freedom(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","degrees_of_freedom", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.non_centrality

  call-seq:
    non_centrality -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_non_centrality(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","non_centrality", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1)->non_centrality();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.pdf

  call-seq:
    pdf(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.cdf

  call-seq:
    cdf(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralT_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralT_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralT_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralT_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::non_central_t_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::non_central_t_distribution< double,policies::policy< > >::value_type cdf(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.quantile

  call-seq:
    quantile(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonCentralT_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonCentralT_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NonCentralT_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NonCentralT_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::non_central_t_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::non_central_t_distribution< double,policies::policy< > >::value_type quantile(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.hazard

  call-seq:
    hazard(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.chf

  call-seq:
    chf(boost::math::non_central_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.mean

  call-seq:
    mean -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.median

  call-seq:
    median -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_median(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.mode

  call-seq:
    mode -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.standard_deviation

  call-seq:
    standard_deviation -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.variance

  call-seq:
    variance -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.skewness

  call-seq:
    skewness -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.kurtosis

  call-seq:
    kurtosis -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::non_central_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::non_central_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::non_central_t_distribution< double,policies::policy< > >::value_type)boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.range

  call-seq:
    range -> std::pair< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_range(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::NonCentralT.support

  call-seq:
    support -> std::pair< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_NonCentralT_support(int argc, VALUE *argv, VALUE self) {
  boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::non_central_t_distribution< double,policies::policy< > >::value_type,boost::math::non_central_t_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::non_central_t_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::non_central_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::non_central_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::non_central_t_distribution< double,policies::policy< > > *arg1 = (boost::math::non_central_t_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Normal

  Proxy of C++ BoostDistributions::Normal class


*/
static swig_class SwigClassNormal;

/*
  Document-method: BoostDistributions::Normal.new

  call-seq:
    Normal.new(double l_mean=0, double sd=1)
    Normal.new(double l_mean=0)
    Normal.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Normal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","normal_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","normal_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > > *)new boost::math::normal_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Normal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","normal_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > > *)new boost::math::normal_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Normal_allocate(VALUE self)
#else
_wrap_Normal_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Normal__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > > *)new boost::math::normal_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Normal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Normal__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Normal__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Normal__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Normal.new", 
    "    Normal.new(double l_mean, double sd)\n"
    "    Normal.new(double l_mean)\n"
    "    Normal.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.mean

  call-seq:
    mean -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::normal_distribution< double,policies::policy< > > const *)arg1)->mean();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.standard_deviation

  call-seq:
    standard_deviation -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::normal_distribution< double,policies::policy< > > const *)arg1)->standard_deviation();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_location(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::normal_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::normal_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.pdf

  call-seq:
    pdf(boost::math::normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.cdf

  call-seq:
    cdf(boost::math::normal_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::normal_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Normal_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Normal_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Normal_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Normal_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::normal_distribution< double,policies::policy< > >::value_type cdf(boost::math::normal_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::normal_distribution< double,policies::policy< > >::value_type cdf(boost::math::normal_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.quantile

  call-seq:
    quantile(boost::math::normal_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::normal_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::normal_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Normal_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Normal_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Normal_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Normal_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::normal_distribution< double,policies::policy< > >::value_type quantile(boost::math::normal_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::normal_distribution< double,policies::policy< > >::value_type quantile(boost::math::normal_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.hazard

  call-seq:
    hazard(boost::math::normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.chf

  call-seq:
    chf(boost::math::normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.median

  call-seq:
    median -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_median(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.mode

  call-seq:
    mode -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.variance

  call-seq:
    variance -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.skewness

  call-seq:
    skewness -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.kurtosis

  call-seq:
    kurtosis -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::normal_distribution< double,policies::policy< > >::value_type)boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.range

  call-seq:
    range -> std::pair< boost::math::normal_distribution< double,policies::policy< > >::value_type,boost::math::normal_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_range(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::normal_distribution< double,policies::policy< > >::value_type,boost::math::normal_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Normal.support

  call-seq:
    support -> std::pair< boost::math::normal_distribution< double,policies::policy< > >::value_type,boost::math::normal_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Normal_support(int argc, VALUE *argv, VALUE self) {
  boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::normal_distribution< double,policies::policy< > >::value_type,boost::math::normal_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::normal_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::normal_distribution< double,policies::policy< > > *arg1 = (boost::math::normal_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Pareto

  Proxy of C++ BoostDistributions::Pareto class


*/
static swig_class SwigClassPareto;

/*
  Document-method: BoostDistributions::Pareto.new

  call-seq:
    Pareto.new(double l_scale=1, double l_shape=1)
    Pareto.new(double l_scale=1)
    Pareto.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Pareto__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","pareto_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pareto_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > > *)new boost::math::pareto_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Pareto__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","pareto_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > > *)new boost::math::pareto_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Pareto_allocate(VALUE self)
#else
_wrap_Pareto_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Pareto__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > > *)new boost::math::pareto_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Pareto(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Pareto__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Pareto__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Pareto__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Pareto.new", 
    "    Pareto.new(double l_scale, double l_shape)\n"
    "    Pareto.new(double l_scale)\n"
    "    Pareto.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.shape

  call-seq:
    shape -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_shape(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1)->shape();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.pdf

  call-seq:
    pdf(boost::math::pareto_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::pareto_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.cdf

  call-seq:
    cdf(boost::math::pareto_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::pareto_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::pareto_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::pareto_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pareto_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::pareto_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Pareto_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Pareto_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Pareto_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::pareto_distribution< double,policies::policy< > >::value_type cdf(boost::math::pareto_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::pareto_distribution< double,policies::policy< > >::value_type cdf(boost::math::pareto_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.quantile

  call-seq:
    quantile(boost::math::pareto_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::pareto_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::pareto_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::pareto_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pareto_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::pareto_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Pareto_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Pareto_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Pareto_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::pareto_distribution< double,policies::policy< > >::value_type quantile(boost::math::pareto_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::pareto_distribution< double,policies::policy< > >::value_type quantile(boost::math::pareto_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.hazard

  call-seq:
    hazard(boost::math::pareto_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::pareto_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.chf

  call-seq:
    chf(boost::math::pareto_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::pareto_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.mean

  call-seq:
    mean -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.median

  call-seq:
    median -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_median(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.mode

  call-seq:
    mode -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.standard_deviation

  call-seq:
    standard_deviation -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.variance

  call-seq:
    variance -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.skewness

  call-seq:
    skewness -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.kurtosis

  call-seq:
    kurtosis -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::pareto_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::pareto_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::pareto_distribution< double,policies::policy< > >::value_type)boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.range

  call-seq:
    range -> std::pair< boost::math::pareto_distribution< double,policies::policy< > >::value_type,boost::math::pareto_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_range(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::pareto_distribution< double,policies::policy< > >::value_type,boost::math::pareto_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Pareto.support

  call-seq:
    support -> std::pair< boost::math::pareto_distribution< double,policies::policy< > >::value_type,boost::math::pareto_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Pareto_support(int argc, VALUE *argv, VALUE self) {
  boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::pareto_distribution< double,policies::policy< > >::value_type,boost::math::pareto_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::pareto_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::pareto_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::pareto_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::pareto_distribution< double,policies::policy< > > *arg1 = (boost::math::pareto_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Poisson

  Proxy of C++ BoostDistributions::Poisson class


*/
static swig_class SwigClassPoisson;

/*
  Document-method: BoostDistributions::Poisson.new

  call-seq:
    Poisson.new(double l_mean=1)
    Poisson.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Poisson__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","poisson_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > > *)new boost::math::poisson_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Poisson_allocate(VALUE self)
#else
_wrap_Poisson_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Poisson__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > > *)new boost::math::poisson_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Poisson(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Poisson__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Poisson__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Poisson.new", 
    "    Poisson.new(double l_mean)\n"
    "    Poisson.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.mean

  call-seq:
    mean -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1)->mean();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.pdf

  call-seq:
    pdf(boost::math::poisson_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::poisson_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.cdf

  call-seq:
    cdf(boost::math::poisson_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::poisson_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::poisson_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::poisson_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Poisson_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::poisson_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Poisson_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Poisson_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Poisson_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::poisson_distribution< double,policies::policy< > >::value_type cdf(boost::math::poisson_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::poisson_distribution< double,policies::policy< > >::value_type cdf(boost::math::poisson_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.quantile

  call-seq:
    quantile(boost::math::poisson_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::poisson_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::poisson_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::poisson_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Poisson_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::poisson_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Poisson_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Poisson_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Poisson_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::poisson_distribution< double,policies::policy< > >::value_type quantile(boost::math::poisson_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::poisson_distribution< double,policies::policy< > >::value_type quantile(boost::math::poisson_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.hazard

  call-seq:
    hazard(boost::math::poisson_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::poisson_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.chf

  call-seq:
    chf(boost::math::poisson_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::poisson_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.median

  call-seq:
    median -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_median(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.mode

  call-seq:
    mode -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.standard_deviation

  call-seq:
    standard_deviation -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.variance

  call-seq:
    variance -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.skewness

  call-seq:
    skewness -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.kurtosis

  call-seq:
    kurtosis -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::poisson_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::poisson_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::poisson_distribution< double,policies::policy< > >::value_type)boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.range

  call-seq:
    range -> std::pair< boost::math::poisson_distribution< double,policies::policy< > >::value_type,boost::math::poisson_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_range(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::poisson_distribution< double,policies::policy< > >::value_type,boost::math::poisson_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Poisson.support

  call-seq:
    support -> std::pair< boost::math::poisson_distribution< double,policies::policy< > >::value_type,boost::math::poisson_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Poisson_support(int argc, VALUE *argv, VALUE self) {
  boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::poisson_distribution< double,policies::policy< > >::value_type,boost::math::poisson_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::poisson_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::poisson_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::poisson_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::poisson_distribution< double,policies::policy< > > *arg1 = (boost::math::poisson_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Rayleigh

  Proxy of C++ BoostDistributions::Rayleigh class


*/
static swig_class SwigClassRayleigh;

/*
  Document-method: BoostDistributions::Rayleigh.new

  call-seq:
    Rayleigh.new(double l_sigma=1)
    Rayleigh.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Rayleigh__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","rayleigh_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > > *)new boost::math::rayleigh_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Rayleigh_allocate(VALUE self)
#else
_wrap_Rayleigh_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Rayleigh__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > > *)new boost::math::rayleigh_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Rayleigh(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Rayleigh__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Rayleigh__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Rayleigh.new", 
    "    Rayleigh.new(double l_sigma)\n"
    "    Rayleigh.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.sigma

  call-seq:
    sigma -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_sigma(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","sigma", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1)->sigma();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.pdf

  call-seq:
    pdf(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.cdf

  call-seq:
    cdf(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Rayleigh_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Rayleigh_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rayleigh_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Rayleigh_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::rayleigh_distribution< double,policies::policy< > >::value_type cdf(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::rayleigh_distribution< double,policies::policy< > >::value_type cdf(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.quantile

  call-seq:
    quantile(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Rayleigh_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Rayleigh_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rayleigh_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Rayleigh_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::rayleigh_distribution< double,policies::policy< > >::value_type quantile(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::rayleigh_distribution< double,policies::policy< > >::value_type quantile(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.hazard

  call-seq:
    hazard(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.chf

  call-seq:
    chf(boost::math::rayleigh_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.mean

  call-seq:
    mean -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.median

  call-seq:
    median -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_median(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.mode

  call-seq:
    mode -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.standard_deviation

  call-seq:
    standard_deviation -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.variance

  call-seq:
    variance -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.skewness

  call-seq:
    skewness -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.kurtosis

  call-seq:
    kurtosis -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::rayleigh_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::rayleigh_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::rayleigh_distribution< double,policies::policy< > >::value_type)boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.range

  call-seq:
    range -> std::pair< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_range(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Rayleigh.support

  call-seq:
    support -> std::pair< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Rayleigh_support(int argc, VALUE *argv, VALUE self) {
  boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::rayleigh_distribution< double,policies::policy< > >::value_type,boost::math::rayleigh_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::rayleigh_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::rayleigh_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::rayleigh_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::rayleigh_distribution< double,policies::policy< > > *arg1 = (boost::math::rayleigh_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::SkewNormal

  Proxy of C++ BoostDistributions::SkewNormal class


*/
static swig_class SwigClassSkewNormal;

/*
  Document-method: BoostDistributions::SkewNormal.new

  call-seq:
    SkewNormal.new(double l_location=0, double l_scale=1, double l_shape=0)
    SkewNormal.new(double l_location=0, double l_scale=1)
    SkewNormal.new(double l_location=0)
    SkewNormal.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_SkewNormal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","skew_normal_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","skew_normal_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","skew_normal_distribution<(double,policies::policy<()>)>", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > > *)new boost::math::skew_normal_distribution< double,policies::policy< > >(arg1,arg2,arg3);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_SkewNormal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","skew_normal_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","skew_normal_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > > *)new boost::math::skew_normal_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_SkewNormal__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","skew_normal_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > > *)new boost::math::skew_normal_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SkewNormal_allocate(VALUE self)
#else
_wrap_SkewNormal_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SkewNormal__SWIG_3(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > > *)new boost::math::skew_normal_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_SkewNormal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_SkewNormal__SWIG_3(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SkewNormal__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SkewNormal__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SkewNormal__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "SkewNormal.new", 
    "    SkewNormal.new(double l_location, double l_scale, double l_shape)\n"
    "    SkewNormal.new(double l_location, double l_scale)\n"
    "    SkewNormal.new(double l_location)\n"
    "    SkewNormal.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.location

  call-seq:
    location -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_location(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","location", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1)->location();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.shape

  call-seq:
    shape -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_shape(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1)->shape();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.pdf

  call-seq:
    pdf(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.cdf

  call-seq:
    cdf(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SkewNormal_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SkewNormal_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SkewNormal_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SkewNormal_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::skew_normal_distribution< double,policies::policy< > >::value_type cdf(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::skew_normal_distribution< double,policies::policy< > >::value_type cdf(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.quantile

  call-seq:
    quantile(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SkewNormal_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SkewNormal_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SkewNormal_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SkewNormal_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::skew_normal_distribution< double,policies::policy< > >::value_type quantile(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::skew_normal_distribution< double,policies::policy< > >::value_type quantile(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.hazard

  call-seq:
    hazard(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.chf

  call-seq:
    chf(boost::math::skew_normal_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.mean

  call-seq:
    mean -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.median

  call-seq:
    median -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_median(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.mode

  call-seq:
    mode -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.standard_deviation

  call-seq:
    standard_deviation -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.variance

  call-seq:
    variance -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.skewness

  call-seq:
    skewness -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.kurtosis

  call-seq:
    kurtosis -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::skew_normal_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::skew_normal_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::skew_normal_distribution< double,policies::policy< > >::value_type)boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.range

  call-seq:
    range -> std::pair< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_range(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::SkewNormal.support

  call-seq:
    support -> std::pair< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_SkewNormal_support(int argc, VALUE *argv, VALUE self) {
  boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::skew_normal_distribution< double,policies::policy< > >::value_type,boost::math::skew_normal_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::skew_normal_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::skew_normal_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::skew_normal_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::skew_normal_distribution< double,policies::policy< > > *arg1 = (boost::math::skew_normal_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::StudentsT

  Proxy of C++ BoostDistributions::StudentsT class


*/
static swig_class SwigClassStudentsT;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_StudentsT_allocate(VALUE self)
#else
_wrap_StudentsT_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: BoostDistributions::StudentsT.new

  call-seq:
    StudentsT.new(double df)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_StudentsT(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","students_t_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > > *)new boost::math::students_t_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.degrees_of_freedom

  call-seq:
    degrees_of_freedom -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_degrees_of_freedom(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","degrees_of_freedom", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1)->degrees_of_freedom();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.find_degrees_of_freedom

  call-seq:
    find_degrees_of_freedom(double difference_from_mean, double alpha, double beta, double sd, double hint=100) -> double
    find_degrees_of_freedom(double difference_from_mean, double alpha, double beta, double sd) -> double

A class method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_find_degrees_of_freedom__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 4, argv[3] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 5, argv[4] ));
  } 
  arg5 = static_cast< double >(val5);
  try {
    result = (double)boost::math::students_t_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_degrees_of_freedom(arg1,arg2,arg3,arg4,arg5);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StudentsT_find_degrees_of_freedom__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","boost::math::students_t_distribution<(double,policies::policy<()>)>::find_degrees_of_freedom", 4, argv[3] ));
  } 
  arg4 = static_cast< double >(val4);
  try {
    result = (double)boost::math::students_t_distribution< double,policies::policy< > >::SWIGTEMPLATEDISAMBIGUATOR find_degrees_of_freedom(arg1,arg2,arg3,arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_StudentsT_find_degrees_of_freedom(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs;
  if (argc > 5) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StudentsT_find_degrees_of_freedom__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_StudentsT_find_degrees_of_freedom__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "StudentsT.find_degrees_of_freedom", 
    "    double StudentsT.find_degrees_of_freedom(double difference_from_mean, double alpha, double beta, double sd, double hint)\n"
    "    double StudentsT.find_degrees_of_freedom(double difference_from_mean, double alpha, double beta, double sd)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.pdf

  call-seq:
    pdf(boost::math::students_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::students_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.cdf

  call-seq:
    cdf(boost::math::students_t_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::students_t_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::students_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::students_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StudentsT_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::students_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_StudentsT_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StudentsT_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StudentsT_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::students_t_distribution< double,policies::policy< > >::value_type cdf(boost::math::students_t_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::students_t_distribution< double,policies::policy< > >::value_type cdf(boost::math::students_t_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.quantile

  call-seq:
    quantile(boost::math::students_t_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::students_t_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::students_t_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::students_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_StudentsT_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::students_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_StudentsT_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StudentsT_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StudentsT_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::students_t_distribution< double,policies::policy< > >::value_type quantile(boost::math::students_t_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::students_t_distribution< double,policies::policy< > >::value_type quantile(boost::math::students_t_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.hazard

  call-seq:
    hazard(boost::math::students_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::students_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.chf

  call-seq:
    chf(boost::math::students_t_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::students_t_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.mean

  call-seq:
    mean -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.median

  call-seq:
    median -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_median(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.mode

  call-seq:
    mode -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.standard_deviation

  call-seq:
    standard_deviation -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.variance

  call-seq:
    variance -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.skewness

  call-seq:
    skewness -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.kurtosis

  call-seq:
    kurtosis -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::students_t_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::students_t_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::students_t_distribution< double,policies::policy< > >::value_type)boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.range

  call-seq:
    range -> std::pair< boost::math::students_t_distribution< double,policies::policy< > >::value_type,boost::math::students_t_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_range(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::students_t_distribution< double,policies::policy< > >::value_type,boost::math::students_t_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::StudentsT.support

  call-seq:
    support -> std::pair< boost::math::students_t_distribution< double,policies::policy< > >::value_type,boost::math::students_t_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_StudentsT_support(int argc, VALUE *argv, VALUE self) {
  boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::students_t_distribution< double,policies::policy< > >::value_type,boost::math::students_t_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::students_t_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::students_t_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::students_t_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::students_t_distribution< double,policies::policy< > > *arg1 = (boost::math::students_t_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Triangular

  Proxy of C++ BoostDistributions::Triangular class


*/
static swig_class SwigClassTriangular;

/*
  Document-method: BoostDistributions::Triangular.new

  call-seq:
    Triangular.new(double l_lower=-1, double l_mode=0, double l_upper=1)
    Triangular.new(double l_lower=-1, double l_mode=0)
    Triangular.new(double l_lower=-1)
    Triangular.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Triangular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","triangular_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","triangular_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","triangular_distribution<(double,policies::policy<()>)>", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > > *)new boost::math::triangular_distribution< double,policies::policy< > >(arg1,arg2,arg3);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Triangular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","triangular_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","triangular_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > > *)new boost::math::triangular_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Triangular__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","triangular_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > > *)new boost::math::triangular_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Triangular_allocate(VALUE self)
#else
_wrap_Triangular_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Triangular__SWIG_3(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > > *)new boost::math::triangular_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Triangular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Triangular__SWIG_3(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Triangular__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Triangular__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Triangular__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Triangular.new", 
    "    Triangular.new(double l_lower, double l_mode, double l_upper)\n"
    "    Triangular.new(double l_lower, double l_mode)\n"
    "    Triangular.new(double l_lower)\n"
    "    Triangular.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.lower

  call-seq:
    lower -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_lower(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","lower", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1)->lower();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.mode

  call-seq:
    mode -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1)->mode();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.upper

  call-seq:
    upper -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_upper(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","upper", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1)->upper();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.pdf

  call-seq:
    pdf(boost::math::triangular_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::triangular_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.cdf

  call-seq:
    cdf(boost::math::triangular_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::triangular_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::triangular_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::triangular_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Triangular_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::triangular_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Triangular_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Triangular_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Triangular_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::triangular_distribution< double,policies::policy< > >::value_type cdf(boost::math::triangular_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::triangular_distribution< double,policies::policy< > >::value_type cdf(boost::math::triangular_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.quantile

  call-seq:
    quantile(boost::math::triangular_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::triangular_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::triangular_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::triangular_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Triangular_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::triangular_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Triangular_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Triangular_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Triangular_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::triangular_distribution< double,policies::policy< > >::value_type quantile(boost::math::triangular_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::triangular_distribution< double,policies::policy< > >::value_type quantile(boost::math::triangular_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.hazard

  call-seq:
    hazard(boost::math::triangular_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::triangular_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.chf

  call-seq:
    chf(boost::math::triangular_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::triangular_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.mean

  call-seq:
    mean -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.median

  call-seq:
    median -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_median(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.standard_deviation

  call-seq:
    standard_deviation -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.variance

  call-seq:
    variance -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.skewness

  call-seq:
    skewness -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.kurtosis

  call-seq:
    kurtosis -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::triangular_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::triangular_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::triangular_distribution< double,policies::policy< > >::value_type)boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.range

  call-seq:
    range -> std::pair< boost::math::triangular_distribution< double,policies::policy< > >::value_type,boost::math::triangular_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_range(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::triangular_distribution< double,policies::policy< > >::value_type,boost::math::triangular_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Triangular.support

  call-seq:
    support -> std::pair< boost::math::triangular_distribution< double,policies::policy< > >::value_type,boost::math::triangular_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Triangular_support(int argc, VALUE *argv, VALUE self) {
  boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::triangular_distribution< double,policies::policy< > >::value_type,boost::math::triangular_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::triangular_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::triangular_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::triangular_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::triangular_distribution< double,policies::policy< > > *arg1 = (boost::math::triangular_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Uniform

  Proxy of C++ BoostDistributions::Uniform class


*/
static swig_class SwigClassUniform;

/*
  Document-method: BoostDistributions::Uniform.new

  call-seq:
    Uniform.new(double l_lower=0, double l_upper=1)
    Uniform.new(double l_lower=0)
    Uniform.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Uniform__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","uniform_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","uniform_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > > *)new boost::math::uniform_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Uniform__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","uniform_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > > *)new boost::math::uniform_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Uniform_allocate(VALUE self)
#else
_wrap_Uniform_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Uniform__SWIG_2(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > > *)new boost::math::uniform_distribution< double,policies::policy< > >();
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Uniform(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Uniform__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Uniform__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Uniform__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Uniform.new", 
    "    Uniform.new(double l_lower, double l_upper)\n"
    "    Uniform.new(double l_lower)\n"
    "    Uniform.new()\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.lower

  call-seq:
    lower -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_lower(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","lower", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1)->lower();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.upper

  call-seq:
    upper -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_upper(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","upper", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1)->upper();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.pdf

  call-seq:
    pdf(boost::math::uniform_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::uniform_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.cdf

  call-seq:
    cdf(boost::math::uniform_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::uniform_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::uniform_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::uniform_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Uniform_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::uniform_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Uniform_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Uniform_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Uniform_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::uniform_distribution< double,policies::policy< > >::value_type cdf(boost::math::uniform_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::uniform_distribution< double,policies::policy< > >::value_type cdf(boost::math::uniform_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.quantile

  call-seq:
    quantile(boost::math::uniform_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::uniform_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::uniform_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::uniform_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Uniform_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::uniform_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Uniform_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Uniform_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Uniform_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::uniform_distribution< double,policies::policy< > >::value_type quantile(boost::math::uniform_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::uniform_distribution< double,policies::policy< > >::value_type quantile(boost::math::uniform_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.hazard

  call-seq:
    hazard(boost::math::uniform_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::uniform_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.chf

  call-seq:
    chf(boost::math::uniform_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::uniform_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.mean

  call-seq:
    mean -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.median

  call-seq:
    median -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_median(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.mode

  call-seq:
    mode -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.standard_deviation

  call-seq:
    standard_deviation -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.variance

  call-seq:
    variance -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.skewness

  call-seq:
    skewness -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.kurtosis

  call-seq:
    kurtosis -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::uniform_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::uniform_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::uniform_distribution< double,policies::policy< > >::value_type)boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.range

  call-seq:
    range -> std::pair< boost::math::uniform_distribution< double,policies::policy< > >::value_type,boost::math::uniform_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_range(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::uniform_distribution< double,policies::policy< > >::value_type,boost::math::uniform_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Uniform.support

  call-seq:
    support -> std::pair< boost::math::uniform_distribution< double,policies::policy< > >::value_type,boost::math::uniform_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Uniform_support(int argc, VALUE *argv, VALUE self) {
  boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::uniform_distribution< double,policies::policy< > >::value_type,boost::math::uniform_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::uniform_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::uniform_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::uniform_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::uniform_distribution< double,policies::policy< > > *arg1 = (boost::math::uniform_distribution< double,policies::policy< > > *)self;
    delete arg1;
}

/*
  Document-class: BoostDistributions::Weibull

  Proxy of C++ BoostDistributions::Weibull class


*/
static swig_class SwigClassWeibull;

/*
  Document-method: BoostDistributions::Weibull.new

  call-seq:
    Weibull.new(double l_shape, double l_scale=1)
    Weibull.new(double l_shape)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Weibull__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","weibull_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","weibull_distribution<(double,policies::policy<()>)>", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > > *)new boost::math::weibull_distribution< double,policies::policy< > >(arg1,arg2);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Weibull_allocate(VALUE self)
#else
_wrap_Weibull_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Weibull__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","weibull_distribution<(double,policies::policy<()>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > > *)new boost::math::weibull_distribution< double,policies::policy< > >(arg1);
    DATA_PTR(self) = result;
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Weibull(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Weibull__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Weibull__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Weibull.new", 
    "    Weibull.new(double l_shape, double l_scale)\n"
    "    Weibull.new(double l_shape)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.shape

  call-seq:
    shape -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_shape(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1)->shape();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.scale

  call-seq:
    scale -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_scale(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  result = (double)((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1)->scale();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.pdf

  call-seq:
    pdf(boost::math::weibull_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_pdf(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","pdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > >::value_type","pdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::weibull_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__pdf((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.cdf

  call-seq:
    cdf(boost::math::weibull_distribution< double,policies::policy< > >::value_type const & x, 
    bool const & is_complement=False) -> boost::math::weibull_distribution< double,policies::policy< > >::value_type
    cdf(boost::math::weibull_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_cdf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::weibull_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","cdf", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Weibull_cdf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","cdf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > >::value_type","cdf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::weibull_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__cdf__SWIG_0((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Weibull_cdf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Weibull_cdf__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Weibull_cdf__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "cdf", 
    "    boost::math::weibull_distribution< double,policies::policy< > >::value_type cdf(boost::math::weibull_distribution< double,policies::policy< > >::value_type const &x, bool const &is_complement)\n"
    "    boost::math::weibull_distribution< double,policies::policy< > >::value_type cdf(boost::math::weibull_distribution< double,policies::policy< > >::value_type const &x)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.quantile

  call-seq:
    quantile(boost::math::weibull_distribution< double,policies::policy< > >::value_type const & p, 
    bool const & is_complement=False) -> boost::math::weibull_distribution< double,policies::policy< > >::value_type
    quantile(boost::math::weibull_distribution< double,policies::policy< > >::value_type const & p) -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_quantile__SWIG_0(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::weibull_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","quantile", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2,(bool const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Weibull_quantile__SWIG_1(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","quantile", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > >::value_type","quantile", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::weibull_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__quantile__SWIG_0((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Weibull_quantile(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Weibull_quantile__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Weibull_quantile__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "quantile", 
    "    boost::math::weibull_distribution< double,policies::policy< > >::value_type quantile(boost::math::weibull_distribution< double,policies::policy< > >::value_type const &p, bool const &is_complement)\n"
    "    boost::math::weibull_distribution< double,policies::policy< > >::value_type quantile(boost::math::weibull_distribution< double,policies::policy< > >::value_type const &p)\n");
  
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.hazard

  call-seq:
    hazard(boost::math::weibull_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_hazard(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","hazard", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > >::value_type","hazard", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::weibull_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__hazard((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.chf

  call-seq:
    chf(boost::math::weibull_distribution< double,policies::policy< > >::value_type const & x) -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_chf(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","chf", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > >::value_type","chf", 2, argv[0] ));
  } 
  temp2 = static_cast< boost::math::weibull_distribution< double,policies::policy< > >::value_type >(val2);
  arg2 = &temp2;
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__chf((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1,(double const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.mean

  call-seq:
    mean -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_mean(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mean((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.median

  call-seq:
    median -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_median(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","median", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__median((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.mode

  call-seq:
    mode -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_mode(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","mode", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__mode((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.standard_deviation

  call-seq:
    standard_deviation -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_standard_deviation(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","standard_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__standard_deviation((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.variance

  call-seq:
    variance -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_variance(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","variance", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__variance((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.skewness

  call-seq:
    skewness -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_skewness(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","skewness", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__skewness((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.kurtosis

  call-seq:
    kurtosis -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_kurtosis(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","kurtosis", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.kurtosis_excess

  call-seq:
    kurtosis_excess -> boost::math::weibull_distribution< double,policies::policy< > >::value_type

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_kurtosis_excess(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::math::weibull_distribution< double,policies::policy< > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","kurtosis_excess", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = (boost::math::weibull_distribution< double,policies::policy< > >::value_type)boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__kurtosis_excess((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.range

  call-seq:
    range -> std::pair< boost::math::weibull_distribution< double,policies::policy< > >::value_type,boost::math::weibull_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_range(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::weibull_distribution< double,policies::policy< > >::value_type,boost::math::weibull_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__range((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: BoostDistributions::Weibull.support

  call-seq:
    support -> std::pair< boost::math::weibull_distribution< double,policies::policy< > >::value_type,boost::math::weibull_distribution< double,policies::policy< > >::value_type >

An instance method.

*/
SWIGINTERN VALUE
_wrap_Weibull_support(int argc, VALUE *argv, VALUE self) {
  boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< boost::math::weibull_distribution< double,policies::policy< > >::value_type,boost::math::weibull_distribution< double,policies::policy< > >::value_type > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "boost::math::weibull_distribution< double,policies::policy< > > const *","support", 1, self )); 
  }
  arg1 = reinterpret_cast< boost::math::weibull_distribution< double,policies::policy< > > * >(argp1);
  try {
    result = boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg__support((boost::math::weibull_distribution< double,policies::policy< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->first));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->second));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_(void *self) {
    boost::math::weibull_distribution< double,policies::policy< > > *arg1 = (boost::math::weibull_distribution< double,policies::policy< > > *)self;
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_boost__math__arcsine_distributionT_double_policies__policyT_t_t = {"_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t", "boost::math::arcsine *|boost::math::arcsine_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t = {"_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t", "boost::math::bernoulli_distribution< double,policies::policy< > > *|boost::math::bernoulli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__beta_distributionT_double_policies__policyT_t_t = {"_p_boost__math__beta_distributionT_double_policies__policyT_t_t", "boost::math::beta_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__binomial_distributionT_double_policies__policyT_t_t = {"_p_boost__math__binomial_distributionT_double_policies__policyT_t_t", "boost::math::binomial_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__binomial_distributionT_t = {"_p_boost__math__binomial_distributionT_t", "boost::math::binomial *|boost::math::binomial_distribution< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__cauchy_distributionT_double_policies__policyT_t_t = {"_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t", "boost::math::cauchy_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__cauchy_distributionT_double_t = {"_p_boost__math__cauchy_distributionT_double_t", "boost::math::cauchy *|boost::math::cauchy_distribution< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t = {"_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t", "boost::math::chi_squared_distribution< double,policies::policy< > > *|boost::math::chi_squared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__exponential_distributionT_double_policies__policyT_t_t = {"_p_boost__math__exponential_distributionT_double_policies__policyT_t_t", "boost::math::exponential_distribution< double,policies::policy< > > *|boost::math::exponential *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t = {"_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t", "boost::math::extreme_value *|boost::math::extreme_value_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t = {"_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t", "boost::math::fisher_f *|boost::math::fisher_f_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__gamma_distributionT_double_policies__policyT_t_t = {"_p_boost__math__gamma_distributionT_double_policies__policyT_t_t", "boost::math::gamma_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__geometric_distributionT_double_policies__policyT_t_t = {"_p_boost__math__geometric_distributionT_double_policies__policyT_t_t", "boost::math::geometric_distribution< double,policies::policy< > > *|boost::math::geometric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t = {"_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t", "boost::math::hyperexponential_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t = {"_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t", "boost::math::hypergeometric_distribution< double,policies::policy< > > *|boost::math::hypergeometric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t = {"_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t", "boost::math::inverse_chi_squared_distribution< double,policies::policy< > > *|boost::math::inverse_chi_squared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t = {"_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t", "boost::math::inverse_gamma_distribution< double,policies::policy< > > *|boost::math::inverse_gamma *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t = {"_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t", "boost::math::inverse_gaussian *|boost::math::inverse_gaussian_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t = {"_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t", "boost::math::kolmogorov_smirnov_distribution< double,policies::policy< > > *|boost::math::kolmogorov_k *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__laplace_distributionT_double_policies__policyT_t_t = {"_p_boost__math__laplace_distributionT_double_policies__policyT_t_t", "boost::math::laplace *|boost::math::laplace_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__logistic_distributionT_double_policies__policyT_t_t = {"_p_boost__math__logistic_distributionT_double_policies__policyT_t_t", "boost::math::logistic *|boost::math::logistic_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__lognormal_distributionT_double_policies__policyT_t_t = {"_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t", "boost::math::lognormal_distribution< double,policies::policy< > > *|boost::math::lognormal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t = {"_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t", "boost::math::negative_binomial_distribution< double,policies::policy< > > *|boost::math::negative_binomial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t = {"_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t", "boost::math::non_central_beta_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__non_central_beta_distributionT_double_t = {"_p_boost__math__non_central_beta_distributionT_double_t", "boost::math::non_central_beta_distribution< double > *|boost::math::non_central_beta *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t = {"_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t", "boost::math::non_central_chi_squared_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__non_central_chi_squared_distributionT_double_t = {"_p_boost__math__non_central_chi_squared_distributionT_double_t", "boost::math::non_central_chi_squared_distribution< double > *|boost::math::non_central_chi_squared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t = {"_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t", "boost::math::non_central_f_distribution< double,policies::policy< > > *|boost::math::non_central_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t = {"_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t", "boost::math::non_central_t_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__non_central_t_distributionT_double_t = {"_p_boost__math__non_central_t_distributionT_double_t", "boost::math::non_central_t *|boost::math::non_central_t_distribution< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__normal_distributionT_double_policies__policyT_t_t = {"_p_boost__math__normal_distributionT_double_policies__policyT_t_t", "boost::math::normal_distribution< double,policies::policy< > > *|boost::math::normal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__pareto_distributionT_double_policies__policyT_t_t = {"_p_boost__math__pareto_distributionT_double_policies__policyT_t_t", "boost::math::pareto_distribution< double,policies::policy< > > *|boost::math::pareto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__poisson_distributionT_double_policies__policyT_t_t = {"_p_boost__math__poisson_distributionT_double_policies__policyT_t_t", "boost::math::poisson_distribution< double,policies::policy< > > *|boost::math::poisson *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t = {"_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t", "boost::math::rayleigh *|boost::math::rayleigh_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t = {"_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t", "boost::math::skew_normal_distribution< double,policies::policy< > > *|boost::math::skew_normal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__students_t_distributionT_double_policies__policyT_t_t = {"_p_boost__math__students_t_distributionT_double_policies__policyT_t_t", "boost::math::students_t_distribution< double,policies::policy< > > *|boost::math::students_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__triangular_distributionT_double_policies__policyT_t_t = {"_p_boost__math__triangular_distributionT_double_policies__policyT_t_t", "boost::math::triangular_distribution< double,policies::policy< > > *|boost::math::triangular *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__uniform_distributionT_double_policies__policyT_t_t = {"_p_boost__math__uniform_distributionT_double_policies__policyT_t_t", "boost::math::uniform_distribution< double,policies::policy< > > *|boost::math::uniform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__math__weibull_distributionT_double_policies__policyT_t_t = {"_p_boost__math__weibull_distributionT_double_policies__policyT_t_t", "boost::math::weibull *|boost::math::weibull_distribution< double,policies::policy< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_policy_type = {"_p_policy_type", "policy_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_boost__math__arcsine_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__beta_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__binomial_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__binomial_distributionT_t,
  &_swigt__p_boost__math__cauchy_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__cauchy_distributionT_double_t,
  &_swigt__p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__exponential_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__gamma_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__geometric_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__laplace_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__logistic_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__lognormal_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__non_central_beta_distributionT_double_t,
  &_swigt__p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__non_central_chi_squared_distributionT_double_t,
  &_swigt__p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__non_central_t_distributionT_double_t,
  &_swigt__p_boost__math__normal_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__pareto_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__poisson_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__students_t_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__triangular_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__uniform_distributionT_double_policies__policyT_t_t,
  &_swigt__p_boost__math__weibull_distributionT_double_policies__policyT_t_t,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_policy_type,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_boost__math__arcsine_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__beta_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__beta_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__binomial_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__binomial_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__binomial_distributionT_t[] = {  {&_swigt__p_boost__math__binomial_distributionT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__cauchy_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__cauchy_distributionT_double_t[] = {  {&_swigt__p_boost__math__cauchy_distributionT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__exponential_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__exponential_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__gamma_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__gamma_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__geometric_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__geometric_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__laplace_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__laplace_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__logistic_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__logistic_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__lognormal_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__non_central_beta_distributionT_double_t[] = {  {&_swigt__p_boost__math__non_central_beta_distributionT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__non_central_chi_squared_distributionT_double_t[] = {  {&_swigt__p_boost__math__non_central_chi_squared_distributionT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__non_central_t_distributionT_double_t[] = {  {&_swigt__p_boost__math__non_central_t_distributionT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__normal_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__normal_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__pareto_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__pareto_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__poisson_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__poisson_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__students_t_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__students_t_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__triangular_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__triangular_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__uniform_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__uniform_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__math__weibull_distributionT_double_policies__policyT_t_t[] = {  {&_swigt__p_boost__math__weibull_distributionT_double_policies__policyT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_policy_type[] = {  {&_swigt__p_policy_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_boost__math__arcsine_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__beta_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__binomial_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__binomial_distributionT_t,
  _swigc__p_boost__math__cauchy_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__cauchy_distributionT_double_t,
  _swigc__p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__exponential_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__gamma_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__geometric_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__laplace_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__logistic_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__lognormal_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__non_central_beta_distributionT_double_t,
  _swigc__p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__non_central_chi_squared_distributionT_double_t,
  _swigc__p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__non_central_t_distributionT_double_t,
  _swigc__p_boost__math__normal_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__pareto_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__poisson_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__students_t_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__triangular_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__uniform_distributionT_double_policies__policyT_t_t,
  _swigc__p_boost__math__weibull_distributionT_double_policies__policyT_t_t,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_policy_type,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_BoostDistributions(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mBoostDistributions = rb_define_module("BoostDistributions");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mBoostDistributions, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  rb_define_const(mBoostDistributions, "BOOST_VERSION", SWIG_From_int(static_cast< int >(108200)));
  rb_define_const(mBoostDistributions, "BOOST_LIB_VERSION", SWIG_FromCharPtr("1_82"));
  
  SwigClassArcsine.klass = rb_define_class_under(mBoostDistributions, "Arcsine", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__arcsine_distributionT_double_policies__policyT_t_t, (void *) &SwigClassArcsine);
  rb_define_alloc_func(SwigClassArcsine.klass, _wrap_Arcsine_allocate);
  rb_define_method(SwigClassArcsine.klass, "initialize", VALUEFUNC(_wrap_new_Arcsine), -1);
  rb_define_method(SwigClassArcsine.klass, "x_min", VALUEFUNC(_wrap_Arcsine_x_min), -1);
  rb_define_method(SwigClassArcsine.klass, "x_max", VALUEFUNC(_wrap_Arcsine_x_max), -1);
  rb_define_method(SwigClassArcsine.klass, "pdf", VALUEFUNC(_wrap_Arcsine_pdf), -1);
  rb_define_method(SwigClassArcsine.klass, "cdf", VALUEFUNC(_wrap_Arcsine_cdf), -1);
  rb_define_method(SwigClassArcsine.klass, "quantile", VALUEFUNC(_wrap_Arcsine_quantile), -1);
  rb_define_method(SwigClassArcsine.klass, "hazard", VALUEFUNC(_wrap_Arcsine_hazard), -1);
  rb_define_method(SwigClassArcsine.klass, "chf", VALUEFUNC(_wrap_Arcsine_chf), -1);
  rb_define_method(SwigClassArcsine.klass, "mean", VALUEFUNC(_wrap_Arcsine_mean), -1);
  rb_define_method(SwigClassArcsine.klass, "median", VALUEFUNC(_wrap_Arcsine_median), -1);
  rb_define_method(SwigClassArcsine.klass, "mode", VALUEFUNC(_wrap_Arcsine_mode), -1);
  rb_define_method(SwigClassArcsine.klass, "standard_deviation", VALUEFUNC(_wrap_Arcsine_standard_deviation), -1);
  rb_define_method(SwigClassArcsine.klass, "variance", VALUEFUNC(_wrap_Arcsine_variance), -1);
  rb_define_method(SwigClassArcsine.klass, "skewness", VALUEFUNC(_wrap_Arcsine_skewness), -1);
  rb_define_method(SwigClassArcsine.klass, "kurtosis", VALUEFUNC(_wrap_Arcsine_kurtosis), -1);
  rb_define_method(SwigClassArcsine.klass, "kurtosis_excess", VALUEFUNC(_wrap_Arcsine_kurtosis_excess), -1);
  rb_define_method(SwigClassArcsine.klass, "range", VALUEFUNC(_wrap_Arcsine_range), -1);
  rb_define_method(SwigClassArcsine.klass, "support", VALUEFUNC(_wrap_Arcsine_support), -1);
  SwigClassArcsine.mark = 0;
  SwigClassArcsine.destroy = (void (*)(void *)) free_boost_math_arcsine_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassArcsine.trackObjects = 0;
  
  SwigClassBernoulli.klass = rb_define_class_under(mBoostDistributions, "Bernoulli", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__bernoulli_distributionT_double_policies__policyT_t_t, (void *) &SwigClassBernoulli);
  rb_define_alloc_func(SwigClassBernoulli.klass, _wrap_Bernoulli_allocate);
  rb_define_method(SwigClassBernoulli.klass, "initialize", VALUEFUNC(_wrap_new_Bernoulli), -1);
  rb_define_method(SwigClassBernoulli.klass, "success_fraction", VALUEFUNC(_wrap_Bernoulli_success_fraction), -1);
  rb_define_method(SwigClassBernoulli.klass, "pdf", VALUEFUNC(_wrap_Bernoulli_pdf), -1);
  rb_define_method(SwigClassBernoulli.klass, "cdf", VALUEFUNC(_wrap_Bernoulli_cdf), -1);
  rb_define_method(SwigClassBernoulli.klass, "quantile", VALUEFUNC(_wrap_Bernoulli_quantile), -1);
  rb_define_method(SwigClassBernoulli.klass, "hazard", VALUEFUNC(_wrap_Bernoulli_hazard), -1);
  rb_define_method(SwigClassBernoulli.klass, "chf", VALUEFUNC(_wrap_Bernoulli_chf), -1);
  rb_define_method(SwigClassBernoulli.klass, "mean", VALUEFUNC(_wrap_Bernoulli_mean), -1);
  rb_define_method(SwigClassBernoulli.klass, "median", VALUEFUNC(_wrap_Bernoulli_median), -1);
  rb_define_method(SwigClassBernoulli.klass, "mode", VALUEFUNC(_wrap_Bernoulli_mode), -1);
  rb_define_method(SwigClassBernoulli.klass, "standard_deviation", VALUEFUNC(_wrap_Bernoulli_standard_deviation), -1);
  rb_define_method(SwigClassBernoulli.klass, "variance", VALUEFUNC(_wrap_Bernoulli_variance), -1);
  rb_define_method(SwigClassBernoulli.klass, "skewness", VALUEFUNC(_wrap_Bernoulli_skewness), -1);
  rb_define_method(SwigClassBernoulli.klass, "kurtosis", VALUEFUNC(_wrap_Bernoulli_kurtosis), -1);
  rb_define_method(SwigClassBernoulli.klass, "kurtosis_excess", VALUEFUNC(_wrap_Bernoulli_kurtosis_excess), -1);
  rb_define_method(SwigClassBernoulli.klass, "range", VALUEFUNC(_wrap_Bernoulli_range), -1);
  rb_define_method(SwigClassBernoulli.klass, "support", VALUEFUNC(_wrap_Bernoulli_support), -1);
  SwigClassBernoulli.mark = 0;
  SwigClassBernoulli.destroy = (void (*)(void *)) free_boost_math_bernoulli_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassBernoulli.trackObjects = 0;
  
  SwigClassBeta.klass = rb_define_class_under(mBoostDistributions, "Beta", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__beta_distributionT_double_policies__policyT_t_t, (void *) &SwigClassBeta);
  rb_define_alloc_func(SwigClassBeta.klass, _wrap_Beta_allocate);
  rb_define_method(SwigClassBeta.klass, "initialize", VALUEFUNC(_wrap_new_Beta), -1);
  rb_define_method(SwigClassBeta.klass, "alpha", VALUEFUNC(_wrap_Beta_alpha), -1);
  rb_define_method(SwigClassBeta.klass, "beta", VALUEFUNC(_wrap_Beta_beta), -1);
  rb_define_singleton_method(SwigClassBeta.klass, "find_alpha", VALUEFUNC(_wrap_Beta_find_alpha), -1);
  rb_define_singleton_method(SwigClassBeta.klass, "find_beta", VALUEFUNC(_wrap_Beta_find_beta), -1);
  rb_define_method(SwigClassBeta.klass, "pdf", VALUEFUNC(_wrap_Beta_pdf), -1);
  rb_define_method(SwigClassBeta.klass, "cdf", VALUEFUNC(_wrap_Beta_cdf), -1);
  rb_define_method(SwigClassBeta.klass, "quantile", VALUEFUNC(_wrap_Beta_quantile), -1);
  rb_define_method(SwigClassBeta.klass, "hazard", VALUEFUNC(_wrap_Beta_hazard), -1);
  rb_define_method(SwigClassBeta.klass, "chf", VALUEFUNC(_wrap_Beta_chf), -1);
  rb_define_method(SwigClassBeta.klass, "mean", VALUEFUNC(_wrap_Beta_mean), -1);
  rb_define_method(SwigClassBeta.klass, "median", VALUEFUNC(_wrap_Beta_median), -1);
  rb_define_method(SwigClassBeta.klass, "mode", VALUEFUNC(_wrap_Beta_mode), -1);
  rb_define_method(SwigClassBeta.klass, "standard_deviation", VALUEFUNC(_wrap_Beta_standard_deviation), -1);
  rb_define_method(SwigClassBeta.klass, "variance", VALUEFUNC(_wrap_Beta_variance), -1);
  rb_define_method(SwigClassBeta.klass, "skewness", VALUEFUNC(_wrap_Beta_skewness), -1);
  rb_define_method(SwigClassBeta.klass, "kurtosis", VALUEFUNC(_wrap_Beta_kurtosis), -1);
  rb_define_method(SwigClassBeta.klass, "kurtosis_excess", VALUEFUNC(_wrap_Beta_kurtosis_excess), -1);
  rb_define_method(SwigClassBeta.klass, "range", VALUEFUNC(_wrap_Beta_range), -1);
  rb_define_method(SwigClassBeta.klass, "support", VALUEFUNC(_wrap_Beta_support), -1);
  SwigClassBeta.mark = 0;
  SwigClassBeta.destroy = (void (*)(void *)) free_boost_math_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassBeta.trackObjects = 0;
  
  SwigClassBinomial.klass = rb_define_class_under(mBoostDistributions, "Binomial", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__binomial_distributionT_double_policies__policyT_t_t, (void *) &SwigClassBinomial);
  rb_define_alloc_func(SwigClassBinomial.klass, _wrap_Binomial_allocate);
  rb_define_method(SwigClassBinomial.klass, "initialize", VALUEFUNC(_wrap_new_Binomial), -1);
  rb_define_method(SwigClassBinomial.klass, "success_fraction", VALUEFUNC(_wrap_Binomial_success_fraction), -1);
  rb_define_method(SwigClassBinomial.klass, "trials", VALUEFUNC(_wrap_Binomial_trials), -1);
  rb_define_const(SwigClassBinomial.klass, "Clopper_pearson_exact_interval", SWIG_From_int(static_cast< int >(boost::math::binomial_distribution< double,policies::policy< > >::clopper_pearson_exact_interval)));
  rb_define_const(SwigClassBinomial.klass, "Jeffreys_prior_interval", SWIG_From_int(static_cast< int >(boost::math::binomial_distribution< double,policies::policy< > >::jeffreys_prior_interval)));
  rb_define_singleton_method(SwigClassBinomial.klass, "find_lower_bound_on_p", VALUEFUNC(_wrap_Binomial_find_lower_bound_on_p), -1);
  rb_define_singleton_method(SwigClassBinomial.klass, "find_upper_bound_on_p", VALUEFUNC(_wrap_Binomial_find_upper_bound_on_p), -1);
  rb_define_singleton_method(SwigClassBinomial.klass, "find_minimum_number_of_trials", VALUEFUNC(_wrap_Binomial_find_minimum_number_of_trials), -1);
  rb_define_singleton_method(SwigClassBinomial.klass, "find_maximum_number_of_trials", VALUEFUNC(_wrap_Binomial_find_maximum_number_of_trials), -1);
  rb_define_method(SwigClassBinomial.klass, "pdf", VALUEFUNC(_wrap_Binomial_pdf), -1);
  rb_define_method(SwigClassBinomial.klass, "cdf", VALUEFUNC(_wrap_Binomial_cdf), -1);
  rb_define_method(SwigClassBinomial.klass, "quantile", VALUEFUNC(_wrap_Binomial_quantile), -1);
  rb_define_method(SwigClassBinomial.klass, "hazard", VALUEFUNC(_wrap_Binomial_hazard), -1);
  rb_define_method(SwigClassBinomial.klass, "chf", VALUEFUNC(_wrap_Binomial_chf), -1);
  rb_define_method(SwigClassBinomial.klass, "mean", VALUEFUNC(_wrap_Binomial_mean), -1);
  rb_define_method(SwigClassBinomial.klass, "median", VALUEFUNC(_wrap_Binomial_median), -1);
  rb_define_method(SwigClassBinomial.klass, "mode", VALUEFUNC(_wrap_Binomial_mode), -1);
  rb_define_method(SwigClassBinomial.klass, "standard_deviation", VALUEFUNC(_wrap_Binomial_standard_deviation), -1);
  rb_define_method(SwigClassBinomial.klass, "variance", VALUEFUNC(_wrap_Binomial_variance), -1);
  rb_define_method(SwigClassBinomial.klass, "skewness", VALUEFUNC(_wrap_Binomial_skewness), -1);
  rb_define_method(SwigClassBinomial.klass, "kurtosis", VALUEFUNC(_wrap_Binomial_kurtosis), -1);
  rb_define_method(SwigClassBinomial.klass, "kurtosis_excess", VALUEFUNC(_wrap_Binomial_kurtosis_excess), -1);
  rb_define_method(SwigClassBinomial.klass, "range", VALUEFUNC(_wrap_Binomial_range), -1);
  rb_define_method(SwigClassBinomial.klass, "support", VALUEFUNC(_wrap_Binomial_support), -1);
  SwigClassBinomial.mark = 0;
  SwigClassBinomial.destroy = (void (*)(void *)) free_boost_math_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassBinomial.trackObjects = 0;
  
  SwigClassCauchy.klass = rb_define_class_under(mBoostDistributions, "Cauchy", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__cauchy_distributionT_double_policies__policyT_t_t, (void *) &SwigClassCauchy);
  rb_define_alloc_func(SwigClassCauchy.klass, _wrap_Cauchy_allocate);
  rb_define_method(SwigClassCauchy.klass, "initialize", VALUEFUNC(_wrap_new_Cauchy), -1);
  rb_define_method(SwigClassCauchy.klass, "location", VALUEFUNC(_wrap_Cauchy_location), -1);
  rb_define_method(SwigClassCauchy.klass, "scale", VALUEFUNC(_wrap_Cauchy_scale), -1);
  rb_define_method(SwigClassCauchy.klass, "pdf", VALUEFUNC(_wrap_Cauchy_pdf), -1);
  rb_define_method(SwigClassCauchy.klass, "cdf", VALUEFUNC(_wrap_Cauchy_cdf), -1);
  rb_define_method(SwigClassCauchy.klass, "quantile", VALUEFUNC(_wrap_Cauchy_quantile), -1);
  rb_define_method(SwigClassCauchy.klass, "hazard", VALUEFUNC(_wrap_Cauchy_hazard), -1);
  rb_define_method(SwigClassCauchy.klass, "chf", VALUEFUNC(_wrap_Cauchy_chf), -1);
  rb_define_method(SwigClassCauchy.klass, "median", VALUEFUNC(_wrap_Cauchy_median), -1);
  rb_define_method(SwigClassCauchy.klass, "mode", VALUEFUNC(_wrap_Cauchy_mode), -1);
  rb_define_method(SwigClassCauchy.klass, "range", VALUEFUNC(_wrap_Cauchy_range), -1);
  rb_define_method(SwigClassCauchy.klass, "support", VALUEFUNC(_wrap_Cauchy_support), -1);
  SwigClassCauchy.mark = 0;
  SwigClassCauchy.destroy = (void (*)(void *)) free_boost_math_cauchy_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassCauchy.trackObjects = 0;
  
  SwigClassChiSquared.klass = rb_define_class_under(mBoostDistributions, "ChiSquared", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__chi_squared_distributionT_double_policies__policyT_t_t, (void *) &SwigClassChiSquared);
  rb_define_alloc_func(SwigClassChiSquared.klass, _wrap_ChiSquared_allocate);
  rb_define_method(SwigClassChiSquared.klass, "initialize", VALUEFUNC(_wrap_new_ChiSquared), -1);
  rb_define_method(SwigClassChiSquared.klass, "degrees_of_freedom", VALUEFUNC(_wrap_ChiSquared_degrees_of_freedom), -1);
  rb_define_singleton_method(SwigClassChiSquared.klass, "find_degrees_of_freedom", VALUEFUNC(_wrap_ChiSquared_find_degrees_of_freedom), -1);
  rb_define_method(SwigClassChiSquared.klass, "pdf", VALUEFUNC(_wrap_ChiSquared_pdf), -1);
  rb_define_method(SwigClassChiSquared.klass, "cdf", VALUEFUNC(_wrap_ChiSquared_cdf), -1);
  rb_define_method(SwigClassChiSquared.klass, "quantile", VALUEFUNC(_wrap_ChiSquared_quantile), -1);
  rb_define_method(SwigClassChiSquared.klass, "hazard", VALUEFUNC(_wrap_ChiSquared_hazard), -1);
  rb_define_method(SwigClassChiSquared.klass, "chf", VALUEFUNC(_wrap_ChiSquared_chf), -1);
  rb_define_method(SwigClassChiSquared.klass, "mean", VALUEFUNC(_wrap_ChiSquared_mean), -1);
  rb_define_method(SwigClassChiSquared.klass, "median", VALUEFUNC(_wrap_ChiSquared_median), -1);
  rb_define_method(SwigClassChiSquared.klass, "mode", VALUEFUNC(_wrap_ChiSquared_mode), -1);
  rb_define_method(SwigClassChiSquared.klass, "standard_deviation", VALUEFUNC(_wrap_ChiSquared_standard_deviation), -1);
  rb_define_method(SwigClassChiSquared.klass, "variance", VALUEFUNC(_wrap_ChiSquared_variance), -1);
  rb_define_method(SwigClassChiSquared.klass, "skewness", VALUEFUNC(_wrap_ChiSquared_skewness), -1);
  rb_define_method(SwigClassChiSquared.klass, "kurtosis", VALUEFUNC(_wrap_ChiSquared_kurtosis), -1);
  rb_define_method(SwigClassChiSquared.klass, "kurtosis_excess", VALUEFUNC(_wrap_ChiSquared_kurtosis_excess), -1);
  rb_define_method(SwigClassChiSquared.klass, "range", VALUEFUNC(_wrap_ChiSquared_range), -1);
  rb_define_method(SwigClassChiSquared.klass, "support", VALUEFUNC(_wrap_ChiSquared_support), -1);
  SwigClassChiSquared.mark = 0;
  SwigClassChiSquared.destroy = (void (*)(void *)) free_boost_math_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassChiSquared.trackObjects = 0;
  
  SwigClassExponential.klass = rb_define_class_under(mBoostDistributions, "Exponential", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__exponential_distributionT_double_policies__policyT_t_t, (void *) &SwigClassExponential);
  rb_define_alloc_func(SwigClassExponential.klass, _wrap_Exponential_allocate);
  rb_define_method(SwigClassExponential.klass, "initialize", VALUEFUNC(_wrap_new_Exponential), -1);
  rb_define_method(SwigClassExponential.klass, "lambda", VALUEFUNC(_wrap_Exponential_lambda), -1);
  rb_define_method(SwigClassExponential.klass, "pdf", VALUEFUNC(_wrap_Exponential_pdf), -1);
  rb_define_method(SwigClassExponential.klass, "cdf", VALUEFUNC(_wrap_Exponential_cdf), -1);
  rb_define_method(SwigClassExponential.klass, "quantile", VALUEFUNC(_wrap_Exponential_quantile), -1);
  rb_define_method(SwigClassExponential.klass, "hazard", VALUEFUNC(_wrap_Exponential_hazard), -1);
  rb_define_method(SwigClassExponential.klass, "chf", VALUEFUNC(_wrap_Exponential_chf), -1);
  rb_define_method(SwigClassExponential.klass, "mean", VALUEFUNC(_wrap_Exponential_mean), -1);
  rb_define_method(SwigClassExponential.klass, "median", VALUEFUNC(_wrap_Exponential_median), -1);
  rb_define_method(SwigClassExponential.klass, "mode", VALUEFUNC(_wrap_Exponential_mode), -1);
  rb_define_method(SwigClassExponential.klass, "standard_deviation", VALUEFUNC(_wrap_Exponential_standard_deviation), -1);
  rb_define_method(SwigClassExponential.klass, "variance", VALUEFUNC(_wrap_Exponential_variance), -1);
  rb_define_method(SwigClassExponential.klass, "skewness", VALUEFUNC(_wrap_Exponential_skewness), -1);
  rb_define_method(SwigClassExponential.klass, "kurtosis", VALUEFUNC(_wrap_Exponential_kurtosis), -1);
  rb_define_method(SwigClassExponential.klass, "kurtosis_excess", VALUEFUNC(_wrap_Exponential_kurtosis_excess), -1);
  rb_define_method(SwigClassExponential.klass, "range", VALUEFUNC(_wrap_Exponential_range), -1);
  rb_define_method(SwigClassExponential.klass, "support", VALUEFUNC(_wrap_Exponential_support), -1);
  SwigClassExponential.mark = 0;
  SwigClassExponential.destroy = (void (*)(void *)) free_boost_math_exponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassExponential.trackObjects = 0;
  
  SwigClassExtremeValue.klass = rb_define_class_under(mBoostDistributions, "ExtremeValue", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__extreme_value_distributionT_double_policies__policyT_t_t, (void *) &SwigClassExtremeValue);
  rb_define_alloc_func(SwigClassExtremeValue.klass, _wrap_ExtremeValue_allocate);
  rb_define_method(SwigClassExtremeValue.klass, "initialize", VALUEFUNC(_wrap_new_ExtremeValue), -1);
  rb_define_method(SwigClassExtremeValue.klass, "location", VALUEFUNC(_wrap_ExtremeValue_location), -1);
  rb_define_method(SwigClassExtremeValue.klass, "scale", VALUEFUNC(_wrap_ExtremeValue_scale), -1);
  rb_define_method(SwigClassExtremeValue.klass, "pdf", VALUEFUNC(_wrap_ExtremeValue_pdf), -1);
  rb_define_method(SwigClassExtremeValue.klass, "cdf", VALUEFUNC(_wrap_ExtremeValue_cdf), -1);
  rb_define_method(SwigClassExtremeValue.klass, "quantile", VALUEFUNC(_wrap_ExtremeValue_quantile), -1);
  rb_define_method(SwigClassExtremeValue.klass, "hazard", VALUEFUNC(_wrap_ExtremeValue_hazard), -1);
  rb_define_method(SwigClassExtremeValue.klass, "chf", VALUEFUNC(_wrap_ExtremeValue_chf), -1);
  rb_define_method(SwigClassExtremeValue.klass, "mean", VALUEFUNC(_wrap_ExtremeValue_mean), -1);
  rb_define_method(SwigClassExtremeValue.klass, "median", VALUEFUNC(_wrap_ExtremeValue_median), -1);
  rb_define_method(SwigClassExtremeValue.klass, "mode", VALUEFUNC(_wrap_ExtremeValue_mode), -1);
  rb_define_method(SwigClassExtremeValue.klass, "standard_deviation", VALUEFUNC(_wrap_ExtremeValue_standard_deviation), -1);
  rb_define_method(SwigClassExtremeValue.klass, "variance", VALUEFUNC(_wrap_ExtremeValue_variance), -1);
  rb_define_method(SwigClassExtremeValue.klass, "skewness", VALUEFUNC(_wrap_ExtremeValue_skewness), -1);
  rb_define_method(SwigClassExtremeValue.klass, "kurtosis", VALUEFUNC(_wrap_ExtremeValue_kurtosis), -1);
  rb_define_method(SwigClassExtremeValue.klass, "kurtosis_excess", VALUEFUNC(_wrap_ExtremeValue_kurtosis_excess), -1);
  rb_define_method(SwigClassExtremeValue.klass, "range", VALUEFUNC(_wrap_ExtremeValue_range), -1);
  rb_define_method(SwigClassExtremeValue.klass, "support", VALUEFUNC(_wrap_ExtremeValue_support), -1);
  SwigClassExtremeValue.mark = 0;
  SwigClassExtremeValue.destroy = (void (*)(void *)) free_boost_math_extreme_value_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassExtremeValue.trackObjects = 0;
  
  SwigClassFisherF.klass = rb_define_class_under(mBoostDistributions, "FisherF", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__fisher_f_distributionT_double_policies__policyT_t_t, (void *) &SwigClassFisherF);
  rb_define_alloc_func(SwigClassFisherF.klass, _wrap_FisherF_allocate);
  rb_define_method(SwigClassFisherF.klass, "initialize", VALUEFUNC(_wrap_new_FisherF), -1);
  rb_define_method(SwigClassFisherF.klass, "degrees_of_freedom1", VALUEFUNC(_wrap_FisherF_degrees_of_freedom1), -1);
  rb_define_method(SwigClassFisherF.klass, "degrees_of_freedom2", VALUEFUNC(_wrap_FisherF_degrees_of_freedom2), -1);
  rb_define_method(SwigClassFisherF.klass, "pdf", VALUEFUNC(_wrap_FisherF_pdf), -1);
  rb_define_method(SwigClassFisherF.klass, "cdf", VALUEFUNC(_wrap_FisherF_cdf), -1);
  rb_define_method(SwigClassFisherF.klass, "quantile", VALUEFUNC(_wrap_FisherF_quantile), -1);
  rb_define_method(SwigClassFisherF.klass, "hazard", VALUEFUNC(_wrap_FisherF_hazard), -1);
  rb_define_method(SwigClassFisherF.klass, "chf", VALUEFUNC(_wrap_FisherF_chf), -1);
  rb_define_method(SwigClassFisherF.klass, "mean", VALUEFUNC(_wrap_FisherF_mean), -1);
  rb_define_method(SwigClassFisherF.klass, "median", VALUEFUNC(_wrap_FisherF_median), -1);
  rb_define_method(SwigClassFisherF.klass, "mode", VALUEFUNC(_wrap_FisherF_mode), -1);
  rb_define_method(SwigClassFisherF.klass, "standard_deviation", VALUEFUNC(_wrap_FisherF_standard_deviation), -1);
  rb_define_method(SwigClassFisherF.klass, "variance", VALUEFUNC(_wrap_FisherF_variance), -1);
  rb_define_method(SwigClassFisherF.klass, "skewness", VALUEFUNC(_wrap_FisherF_skewness), -1);
  rb_define_method(SwigClassFisherF.klass, "kurtosis", VALUEFUNC(_wrap_FisherF_kurtosis), -1);
  rb_define_method(SwigClassFisherF.klass, "kurtosis_excess", VALUEFUNC(_wrap_FisherF_kurtosis_excess), -1);
  rb_define_method(SwigClassFisherF.klass, "range", VALUEFUNC(_wrap_FisherF_range), -1);
  rb_define_method(SwigClassFisherF.klass, "support", VALUEFUNC(_wrap_FisherF_support), -1);
  SwigClassFisherF.mark = 0;
  SwigClassFisherF.destroy = (void (*)(void *)) free_boost_math_fisher_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassFisherF.trackObjects = 0;
  
  SwigClassGamma.klass = rb_define_class_under(mBoostDistributions, "Gamma", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__gamma_distributionT_double_policies__policyT_t_t, (void *) &SwigClassGamma);
  rb_define_alloc_func(SwigClassGamma.klass, _wrap_Gamma_allocate);
  rb_define_method(SwigClassGamma.klass, "initialize", VALUEFUNC(_wrap_new_Gamma), -1);
  rb_define_method(SwigClassGamma.klass, "shape", VALUEFUNC(_wrap_Gamma_shape), -1);
  rb_define_method(SwigClassGamma.klass, "scale", VALUEFUNC(_wrap_Gamma_scale), -1);
  rb_define_method(SwigClassGamma.klass, "pdf", VALUEFUNC(_wrap_Gamma_pdf), -1);
  rb_define_method(SwigClassGamma.klass, "cdf", VALUEFUNC(_wrap_Gamma_cdf), -1);
  rb_define_method(SwigClassGamma.klass, "quantile", VALUEFUNC(_wrap_Gamma_quantile), -1);
  rb_define_method(SwigClassGamma.klass, "hazard", VALUEFUNC(_wrap_Gamma_hazard), -1);
  rb_define_method(SwigClassGamma.klass, "chf", VALUEFUNC(_wrap_Gamma_chf), -1);
  rb_define_method(SwigClassGamma.klass, "mean", VALUEFUNC(_wrap_Gamma_mean), -1);
  rb_define_method(SwigClassGamma.klass, "median", VALUEFUNC(_wrap_Gamma_median), -1);
  rb_define_method(SwigClassGamma.klass, "mode", VALUEFUNC(_wrap_Gamma_mode), -1);
  rb_define_method(SwigClassGamma.klass, "standard_deviation", VALUEFUNC(_wrap_Gamma_standard_deviation), -1);
  rb_define_method(SwigClassGamma.klass, "variance", VALUEFUNC(_wrap_Gamma_variance), -1);
  rb_define_method(SwigClassGamma.klass, "skewness", VALUEFUNC(_wrap_Gamma_skewness), -1);
  rb_define_method(SwigClassGamma.klass, "kurtosis", VALUEFUNC(_wrap_Gamma_kurtosis), -1);
  rb_define_method(SwigClassGamma.klass, "kurtosis_excess", VALUEFUNC(_wrap_Gamma_kurtosis_excess), -1);
  rb_define_method(SwigClassGamma.klass, "range", VALUEFUNC(_wrap_Gamma_range), -1);
  rb_define_method(SwigClassGamma.klass, "support", VALUEFUNC(_wrap_Gamma_support), -1);
  SwigClassGamma.mark = 0;
  SwigClassGamma.destroy = (void (*)(void *)) free_boost_math_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassGamma.trackObjects = 0;
  
  SwigClassGeometric.klass = rb_define_class_under(mBoostDistributions, "Geometric", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__geometric_distributionT_double_policies__policyT_t_t, (void *) &SwigClassGeometric);
  rb_define_alloc_func(SwigClassGeometric.klass, _wrap_Geometric_allocate);
  rb_define_method(SwigClassGeometric.klass, "initialize", VALUEFUNC(_wrap_new_Geometric), -1);
  rb_define_method(SwigClassGeometric.klass, "success_fraction", VALUEFUNC(_wrap_Geometric_success_fraction), -1);
  rb_define_method(SwigClassGeometric.klass, "successes", VALUEFUNC(_wrap_Geometric_successes), -1);
  rb_define_singleton_method(SwigClassGeometric.klass, "find_lower_bound_on_p", VALUEFUNC(_wrap_Geometric_find_lower_bound_on_p), -1);
  rb_define_singleton_method(SwigClassGeometric.klass, "find_upper_bound_on_p", VALUEFUNC(_wrap_Geometric_find_upper_bound_on_p), -1);
  rb_define_singleton_method(SwigClassGeometric.klass, "find_minimum_number_of_trials", VALUEFUNC(_wrap_Geometric_find_minimum_number_of_trials), -1);
  rb_define_singleton_method(SwigClassGeometric.klass, "find_maximum_number_of_trials", VALUEFUNC(_wrap_Geometric_find_maximum_number_of_trials), -1);
  rb_define_method(SwigClassGeometric.klass, "pdf", VALUEFUNC(_wrap_Geometric_pdf), -1);
  rb_define_method(SwigClassGeometric.klass, "cdf", VALUEFUNC(_wrap_Geometric_cdf), -1);
  rb_define_method(SwigClassGeometric.klass, "quantile", VALUEFUNC(_wrap_Geometric_quantile), -1);
  rb_define_method(SwigClassGeometric.klass, "hazard", VALUEFUNC(_wrap_Geometric_hazard), -1);
  rb_define_method(SwigClassGeometric.klass, "chf", VALUEFUNC(_wrap_Geometric_chf), -1);
  rb_define_method(SwigClassGeometric.klass, "mean", VALUEFUNC(_wrap_Geometric_mean), -1);
  rb_define_method(SwigClassGeometric.klass, "median", VALUEFUNC(_wrap_Geometric_median), -1);
  rb_define_method(SwigClassGeometric.klass, "mode", VALUEFUNC(_wrap_Geometric_mode), -1);
  rb_define_method(SwigClassGeometric.klass, "standard_deviation", VALUEFUNC(_wrap_Geometric_standard_deviation), -1);
  rb_define_method(SwigClassGeometric.klass, "variance", VALUEFUNC(_wrap_Geometric_variance), -1);
  rb_define_method(SwigClassGeometric.klass, "skewness", VALUEFUNC(_wrap_Geometric_skewness), -1);
  rb_define_method(SwigClassGeometric.klass, "kurtosis", VALUEFUNC(_wrap_Geometric_kurtosis), -1);
  rb_define_method(SwigClassGeometric.klass, "kurtosis_excess", VALUEFUNC(_wrap_Geometric_kurtosis_excess), -1);
  rb_define_method(SwigClassGeometric.klass, "range", VALUEFUNC(_wrap_Geometric_range), -1);
  rb_define_method(SwigClassGeometric.klass, "support", VALUEFUNC(_wrap_Geometric_support), -1);
  SwigClassGeometric.mark = 0;
  SwigClassGeometric.destroy = (void (*)(void *)) free_boost_math_geometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassGeometric.trackObjects = 0;
  
  SwigClassHyperexponential.klass = rb_define_class_under(mBoostDistributions, "Hyperexponential", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__hyperexponential_distributionT_double_policies__policyT_t_t, (void *) &SwigClassHyperexponential);
  rb_define_alloc_func(SwigClassHyperexponential.klass, _wrap_Hyperexponential_allocate);
  rb_define_method(SwigClassHyperexponential.klass, "initialize", VALUEFUNC(_wrap_new_Hyperexponential), -1);
  rb_define_method(SwigClassHyperexponential.klass, "probabilities", VALUEFUNC(_wrap_Hyperexponential_probabilities), -1);
  rb_define_method(SwigClassHyperexponential.klass, "rates", VALUEFUNC(_wrap_Hyperexponential_rates), -1);
  rb_define_method(SwigClassHyperexponential.klass, "num_phases", VALUEFUNC(_wrap_Hyperexponential_num_phases), -1);
  rb_define_method(SwigClassHyperexponential.klass, "pdf", VALUEFUNC(_wrap_Hyperexponential_pdf), -1);
  rb_define_method(SwigClassHyperexponential.klass, "cdf", VALUEFUNC(_wrap_Hyperexponential_cdf), -1);
  rb_define_method(SwigClassHyperexponential.klass, "quantile", VALUEFUNC(_wrap_Hyperexponential_quantile), -1);
  rb_define_method(SwigClassHyperexponential.klass, "hazard", VALUEFUNC(_wrap_Hyperexponential_hazard), -1);
  rb_define_method(SwigClassHyperexponential.klass, "chf", VALUEFUNC(_wrap_Hyperexponential_chf), -1);
  rb_define_method(SwigClassHyperexponential.klass, "mean", VALUEFUNC(_wrap_Hyperexponential_mean), -1);
  rb_define_method(SwigClassHyperexponential.klass, "median", VALUEFUNC(_wrap_Hyperexponential_median), -1);
  rb_define_method(SwigClassHyperexponential.klass, "mode", VALUEFUNC(_wrap_Hyperexponential_mode), -1);
  rb_define_method(SwigClassHyperexponential.klass, "standard_deviation", VALUEFUNC(_wrap_Hyperexponential_standard_deviation), -1);
  rb_define_method(SwigClassHyperexponential.klass, "variance", VALUEFUNC(_wrap_Hyperexponential_variance), -1);
  rb_define_method(SwigClassHyperexponential.klass, "skewness", VALUEFUNC(_wrap_Hyperexponential_skewness), -1);
  rb_define_method(SwigClassHyperexponential.klass, "kurtosis", VALUEFUNC(_wrap_Hyperexponential_kurtosis), -1);
  rb_define_method(SwigClassHyperexponential.klass, "kurtosis_excess", VALUEFUNC(_wrap_Hyperexponential_kurtosis_excess), -1);
  rb_define_method(SwigClassHyperexponential.klass, "range", VALUEFUNC(_wrap_Hyperexponential_range), -1);
  rb_define_method(SwigClassHyperexponential.klass, "support", VALUEFUNC(_wrap_Hyperexponential_support), -1);
  SwigClassHyperexponential.mark = 0;
  SwigClassHyperexponential.destroy = (void (*)(void *)) free_boost_math_hyperexponential_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassHyperexponential.trackObjects = 0;
  
  SwigClassHypergeometric.klass = rb_define_class_under(mBoostDistributions, "Hypergeometric", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__hypergeometric_distributionT_double_policies__policyT_t_t, (void *) &SwigClassHypergeometric);
  rb_define_alloc_func(SwigClassHypergeometric.klass, _wrap_Hypergeometric_allocate);
  rb_define_method(SwigClassHypergeometric.klass, "initialize", VALUEFUNC(_wrap_new_Hypergeometric), -1);
  rb_define_method(SwigClassHypergeometric.klass, "total", VALUEFUNC(_wrap_Hypergeometric_total), -1);
  rb_define_method(SwigClassHypergeometric.klass, "defective", VALUEFUNC(_wrap_Hypergeometric_defective), -1);
  rb_define_method(SwigClassHypergeometric.klass, "sample_count", VALUEFUNC(_wrap_Hypergeometric_sample_count), -1);
  rb_define_method(SwigClassHypergeometric.klass, "check_params", VALUEFUNC(_wrap_Hypergeometric_check_params), -1);
  rb_define_method(SwigClassHypergeometric.klass, "check_x", VALUEFUNC(_wrap_Hypergeometric_check_x), -1);
  rb_define_method(SwigClassHypergeometric.klass, "pdf", VALUEFUNC(_wrap_Hypergeometric_pdf), -1);
  rb_define_method(SwigClassHypergeometric.klass, "cdf", VALUEFUNC(_wrap_Hypergeometric_cdf), -1);
  rb_define_method(SwigClassHypergeometric.klass, "quantile", VALUEFUNC(_wrap_Hypergeometric_quantile), -1);
  rb_define_method(SwigClassHypergeometric.klass, "hazard", VALUEFUNC(_wrap_Hypergeometric_hazard), -1);
  rb_define_method(SwigClassHypergeometric.klass, "chf", VALUEFUNC(_wrap_Hypergeometric_chf), -1);
  rb_define_method(SwigClassHypergeometric.klass, "mean", VALUEFUNC(_wrap_Hypergeometric_mean), -1);
  rb_define_method(SwigClassHypergeometric.klass, "median", VALUEFUNC(_wrap_Hypergeometric_median), -1);
  rb_define_method(SwigClassHypergeometric.klass, "mode", VALUEFUNC(_wrap_Hypergeometric_mode), -1);
  rb_define_method(SwigClassHypergeometric.klass, "standard_deviation", VALUEFUNC(_wrap_Hypergeometric_standard_deviation), -1);
  rb_define_method(SwigClassHypergeometric.klass, "variance", VALUEFUNC(_wrap_Hypergeometric_variance), -1);
  rb_define_method(SwigClassHypergeometric.klass, "skewness", VALUEFUNC(_wrap_Hypergeometric_skewness), -1);
  rb_define_method(SwigClassHypergeometric.klass, "kurtosis", VALUEFUNC(_wrap_Hypergeometric_kurtosis), -1);
  rb_define_method(SwigClassHypergeometric.klass, "kurtosis_excess", VALUEFUNC(_wrap_Hypergeometric_kurtosis_excess), -1);
  rb_define_method(SwigClassHypergeometric.klass, "range", VALUEFUNC(_wrap_Hypergeometric_range), -1);
  rb_define_method(SwigClassHypergeometric.klass, "support", VALUEFUNC(_wrap_Hypergeometric_support), -1);
  SwigClassHypergeometric.mark = 0;
  SwigClassHypergeometric.destroy = (void (*)(void *)) free_boost_math_hypergeometric_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassHypergeometric.trackObjects = 0;
  
  SwigClassInverseChiSquared.klass = rb_define_class_under(mBoostDistributions, "InverseChiSquared", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__inverse_chi_squared_distributionT_double_policies__policyT_t_t, (void *) &SwigClassInverseChiSquared);
  rb_define_alloc_func(SwigClassInverseChiSquared.klass, _wrap_InverseChiSquared_allocate);
  rb_define_method(SwigClassInverseChiSquared.klass, "initialize", VALUEFUNC(_wrap_new_InverseChiSquared), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "degrees_of_freedom", VALUEFUNC(_wrap_InverseChiSquared_degrees_of_freedom), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "scale", VALUEFUNC(_wrap_InverseChiSquared_scale), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "pdf", VALUEFUNC(_wrap_InverseChiSquared_pdf), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "cdf", VALUEFUNC(_wrap_InverseChiSquared_cdf), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "quantile", VALUEFUNC(_wrap_InverseChiSquared_quantile), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "hazard", VALUEFUNC(_wrap_InverseChiSquared_hazard), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "chf", VALUEFUNC(_wrap_InverseChiSquared_chf), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "mean", VALUEFUNC(_wrap_InverseChiSquared_mean), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "median", VALUEFUNC(_wrap_InverseChiSquared_median), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "mode", VALUEFUNC(_wrap_InverseChiSquared_mode), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "standard_deviation", VALUEFUNC(_wrap_InverseChiSquared_standard_deviation), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "variance", VALUEFUNC(_wrap_InverseChiSquared_variance), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "skewness", VALUEFUNC(_wrap_InverseChiSquared_skewness), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "kurtosis", VALUEFUNC(_wrap_InverseChiSquared_kurtosis), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "kurtosis_excess", VALUEFUNC(_wrap_InverseChiSquared_kurtosis_excess), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "range", VALUEFUNC(_wrap_InverseChiSquared_range), -1);
  rb_define_method(SwigClassInverseChiSquared.klass, "support", VALUEFUNC(_wrap_InverseChiSquared_support), -1);
  SwigClassInverseChiSquared.mark = 0;
  SwigClassInverseChiSquared.destroy = (void (*)(void *)) free_boost_math_inverse_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassInverseChiSquared.trackObjects = 0;
  
  SwigClassInverseGamma.klass = rb_define_class_under(mBoostDistributions, "InverseGamma", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__inverse_gamma_distributionT_double_policies__policyT_t_t, (void *) &SwigClassInverseGamma);
  rb_define_alloc_func(SwigClassInverseGamma.klass, _wrap_InverseGamma_allocate);
  rb_define_method(SwigClassInverseGamma.klass, "initialize", VALUEFUNC(_wrap_new_InverseGamma), -1);
  rb_define_method(SwigClassInverseGamma.klass, "shape", VALUEFUNC(_wrap_InverseGamma_shape), -1);
  rb_define_method(SwigClassInverseGamma.klass, "scale", VALUEFUNC(_wrap_InverseGamma_scale), -1);
  rb_define_method(SwigClassInverseGamma.klass, "pdf", VALUEFUNC(_wrap_InverseGamma_pdf), -1);
  rb_define_method(SwigClassInverseGamma.klass, "cdf", VALUEFUNC(_wrap_InverseGamma_cdf), -1);
  rb_define_method(SwigClassInverseGamma.klass, "quantile", VALUEFUNC(_wrap_InverseGamma_quantile), -1);
  rb_define_method(SwigClassInverseGamma.klass, "hazard", VALUEFUNC(_wrap_InverseGamma_hazard), -1);
  rb_define_method(SwigClassInverseGamma.klass, "chf", VALUEFUNC(_wrap_InverseGamma_chf), -1);
  rb_define_method(SwigClassInverseGamma.klass, "mean", VALUEFUNC(_wrap_InverseGamma_mean), -1);
  rb_define_method(SwigClassInverseGamma.klass, "median", VALUEFUNC(_wrap_InverseGamma_median), -1);
  rb_define_method(SwigClassInverseGamma.klass, "mode", VALUEFUNC(_wrap_InverseGamma_mode), -1);
  rb_define_method(SwigClassInverseGamma.klass, "standard_deviation", VALUEFUNC(_wrap_InverseGamma_standard_deviation), -1);
  rb_define_method(SwigClassInverseGamma.klass, "variance", VALUEFUNC(_wrap_InverseGamma_variance), -1);
  rb_define_method(SwigClassInverseGamma.klass, "skewness", VALUEFUNC(_wrap_InverseGamma_skewness), -1);
  rb_define_method(SwigClassInverseGamma.klass, "kurtosis", VALUEFUNC(_wrap_InverseGamma_kurtosis), -1);
  rb_define_method(SwigClassInverseGamma.klass, "kurtosis_excess", VALUEFUNC(_wrap_InverseGamma_kurtosis_excess), -1);
  rb_define_method(SwigClassInverseGamma.klass, "range", VALUEFUNC(_wrap_InverseGamma_range), -1);
  rb_define_method(SwigClassInverseGamma.klass, "support", VALUEFUNC(_wrap_InverseGamma_support), -1);
  SwigClassInverseGamma.mark = 0;
  SwigClassInverseGamma.destroy = (void (*)(void *)) free_boost_math_inverse_gamma_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassInverseGamma.trackObjects = 0;
  
  SwigClassInverseGaussian.klass = rb_define_class_under(mBoostDistributions, "InverseGaussian", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__inverse_gaussian_distributionT_double_policies__policyT_t_t, (void *) &SwigClassInverseGaussian);
  rb_define_alloc_func(SwigClassInverseGaussian.klass, _wrap_InverseGaussian_allocate);
  rb_define_method(SwigClassInverseGaussian.klass, "initialize", VALUEFUNC(_wrap_new_InverseGaussian), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "mean", VALUEFUNC(_wrap_InverseGaussian_mean), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "location", VALUEFUNC(_wrap_InverseGaussian_location), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "scale", VALUEFUNC(_wrap_InverseGaussian_scale), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "shape", VALUEFUNC(_wrap_InverseGaussian_shape), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "pdf", VALUEFUNC(_wrap_InverseGaussian_pdf), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "cdf", VALUEFUNC(_wrap_InverseGaussian_cdf), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "quantile", VALUEFUNC(_wrap_InverseGaussian_quantile), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "hazard", VALUEFUNC(_wrap_InverseGaussian_hazard), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "chf", VALUEFUNC(_wrap_InverseGaussian_chf), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "median", VALUEFUNC(_wrap_InverseGaussian_median), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "mode", VALUEFUNC(_wrap_InverseGaussian_mode), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "standard_deviation", VALUEFUNC(_wrap_InverseGaussian_standard_deviation), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "variance", VALUEFUNC(_wrap_InverseGaussian_variance), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "skewness", VALUEFUNC(_wrap_InverseGaussian_skewness), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "kurtosis", VALUEFUNC(_wrap_InverseGaussian_kurtosis), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "kurtosis_excess", VALUEFUNC(_wrap_InverseGaussian_kurtosis_excess), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "range", VALUEFUNC(_wrap_InverseGaussian_range), -1);
  rb_define_method(SwigClassInverseGaussian.klass, "support", VALUEFUNC(_wrap_InverseGaussian_support), -1);
  SwigClassInverseGaussian.mark = 0;
  SwigClassInverseGaussian.destroy = (void (*)(void *)) free_boost_math_inverse_gaussian_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassInverseGaussian.trackObjects = 0;
  
  SwigClassKolmogorovSmirnov.klass = rb_define_class_under(mBoostDistributions, "KolmogorovSmirnov", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__kolmogorov_smirnov_distributionT_double_policies__policyT_t_t, (void *) &SwigClassKolmogorovSmirnov);
  rb_define_alloc_func(SwigClassKolmogorovSmirnov.klass, _wrap_KolmogorovSmirnov_allocate);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "initialize", VALUEFUNC(_wrap_new_KolmogorovSmirnov), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "number_of_observations", VALUEFUNC(_wrap_KolmogorovSmirnov_number_of_observations), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "pdf", VALUEFUNC(_wrap_KolmogorovSmirnov_pdf), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "cdf", VALUEFUNC(_wrap_KolmogorovSmirnov_cdf), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "quantile", VALUEFUNC(_wrap_KolmogorovSmirnov_quantile), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "hazard", VALUEFUNC(_wrap_KolmogorovSmirnov_hazard), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "chf", VALUEFUNC(_wrap_KolmogorovSmirnov_chf), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "mean", VALUEFUNC(_wrap_KolmogorovSmirnov_mean), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "median", VALUEFUNC(_wrap_KolmogorovSmirnov_median), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "mode", VALUEFUNC(_wrap_KolmogorovSmirnov_mode), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "standard_deviation", VALUEFUNC(_wrap_KolmogorovSmirnov_standard_deviation), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "variance", VALUEFUNC(_wrap_KolmogorovSmirnov_variance), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "skewness", VALUEFUNC(_wrap_KolmogorovSmirnov_skewness), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "kurtosis", VALUEFUNC(_wrap_KolmogorovSmirnov_kurtosis), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "kurtosis_excess", VALUEFUNC(_wrap_KolmogorovSmirnov_kurtosis_excess), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "range", VALUEFUNC(_wrap_KolmogorovSmirnov_range), -1);
  rb_define_method(SwigClassKolmogorovSmirnov.klass, "support", VALUEFUNC(_wrap_KolmogorovSmirnov_support), -1);
  SwigClassKolmogorovSmirnov.mark = 0;
  SwigClassKolmogorovSmirnov.destroy = (void (*)(void *)) free_boost_math_kolmogorov_smirnov_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassKolmogorovSmirnov.trackObjects = 0;
  
  SwigClassLaplace.klass = rb_define_class_under(mBoostDistributions, "Laplace", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__laplace_distributionT_double_policies__policyT_t_t, (void *) &SwigClassLaplace);
  rb_define_alloc_func(SwigClassLaplace.klass, _wrap_Laplace_allocate);
  rb_define_method(SwigClassLaplace.klass, "initialize", VALUEFUNC(_wrap_new_Laplace), -1);
  rb_define_method(SwigClassLaplace.klass, "location", VALUEFUNC(_wrap_Laplace_location), -1);
  rb_define_method(SwigClassLaplace.klass, "scale", VALUEFUNC(_wrap_Laplace_scale), -1);
  rb_define_method(SwigClassLaplace.klass, "check_parameters", VALUEFUNC(_wrap_Laplace_check_parameters), -1);
  rb_define_method(SwigClassLaplace.klass, "pdf", VALUEFUNC(_wrap_Laplace_pdf), -1);
  rb_define_method(SwigClassLaplace.klass, "cdf", VALUEFUNC(_wrap_Laplace_cdf), -1);
  rb_define_method(SwigClassLaplace.klass, "quantile", VALUEFUNC(_wrap_Laplace_quantile), -1);
  rb_define_method(SwigClassLaplace.klass, "hazard", VALUEFUNC(_wrap_Laplace_hazard), -1);
  rb_define_method(SwigClassLaplace.klass, "chf", VALUEFUNC(_wrap_Laplace_chf), -1);
  rb_define_method(SwigClassLaplace.klass, "mean", VALUEFUNC(_wrap_Laplace_mean), -1);
  rb_define_method(SwigClassLaplace.klass, "median", VALUEFUNC(_wrap_Laplace_median), -1);
  rb_define_method(SwigClassLaplace.klass, "mode", VALUEFUNC(_wrap_Laplace_mode), -1);
  rb_define_method(SwigClassLaplace.klass, "standard_deviation", VALUEFUNC(_wrap_Laplace_standard_deviation), -1);
  rb_define_method(SwigClassLaplace.klass, "variance", VALUEFUNC(_wrap_Laplace_variance), -1);
  rb_define_method(SwigClassLaplace.klass, "skewness", VALUEFUNC(_wrap_Laplace_skewness), -1);
  rb_define_method(SwigClassLaplace.klass, "kurtosis", VALUEFUNC(_wrap_Laplace_kurtosis), -1);
  rb_define_method(SwigClassLaplace.klass, "kurtosis_excess", VALUEFUNC(_wrap_Laplace_kurtosis_excess), -1);
  rb_define_method(SwigClassLaplace.klass, "range", VALUEFUNC(_wrap_Laplace_range), -1);
  rb_define_method(SwigClassLaplace.klass, "support", VALUEFUNC(_wrap_Laplace_support), -1);
  SwigClassLaplace.mark = 0;
  SwigClassLaplace.destroy = (void (*)(void *)) free_boost_math_laplace_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassLaplace.trackObjects = 0;
  
  SwigClassLogistic.klass = rb_define_class_under(mBoostDistributions, "Logistic", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__logistic_distributionT_double_policies__policyT_t_t, (void *) &SwigClassLogistic);
  rb_define_alloc_func(SwigClassLogistic.klass, _wrap_Logistic_allocate);
  rb_define_method(SwigClassLogistic.klass, "initialize", VALUEFUNC(_wrap_new_Logistic), -1);
  rb_define_method(SwigClassLogistic.klass, "scale", VALUEFUNC(_wrap_Logistic_scale), -1);
  rb_define_method(SwigClassLogistic.klass, "location", VALUEFUNC(_wrap_Logistic_location), -1);
  rb_define_method(SwigClassLogistic.klass, "pdf", VALUEFUNC(_wrap_Logistic_pdf), -1);
  rb_define_method(SwigClassLogistic.klass, "cdf", VALUEFUNC(_wrap_Logistic_cdf), -1);
  rb_define_method(SwigClassLogistic.klass, "quantile", VALUEFUNC(_wrap_Logistic_quantile), -1);
  rb_define_method(SwigClassLogistic.klass, "hazard", VALUEFUNC(_wrap_Logistic_hazard), -1);
  rb_define_method(SwigClassLogistic.klass, "chf", VALUEFUNC(_wrap_Logistic_chf), -1);
  rb_define_method(SwigClassLogistic.klass, "mean", VALUEFUNC(_wrap_Logistic_mean), -1);
  rb_define_method(SwigClassLogistic.klass, "median", VALUEFUNC(_wrap_Logistic_median), -1);
  rb_define_method(SwigClassLogistic.klass, "mode", VALUEFUNC(_wrap_Logistic_mode), -1);
  rb_define_method(SwigClassLogistic.klass, "standard_deviation", VALUEFUNC(_wrap_Logistic_standard_deviation), -1);
  rb_define_method(SwigClassLogistic.klass, "variance", VALUEFUNC(_wrap_Logistic_variance), -1);
  rb_define_method(SwigClassLogistic.klass, "skewness", VALUEFUNC(_wrap_Logistic_skewness), -1);
  rb_define_method(SwigClassLogistic.klass, "kurtosis", VALUEFUNC(_wrap_Logistic_kurtosis), -1);
  rb_define_method(SwigClassLogistic.klass, "kurtosis_excess", VALUEFUNC(_wrap_Logistic_kurtosis_excess), -1);
  rb_define_method(SwigClassLogistic.klass, "range", VALUEFUNC(_wrap_Logistic_range), -1);
  rb_define_method(SwigClassLogistic.klass, "support", VALUEFUNC(_wrap_Logistic_support), -1);
  SwigClassLogistic.mark = 0;
  SwigClassLogistic.destroy = (void (*)(void *)) free_boost_math_logistic_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassLogistic.trackObjects = 0;
  
  SwigClassLognormal.klass = rb_define_class_under(mBoostDistributions, "Lognormal", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__lognormal_distributionT_double_policies__policyT_t_t, (void *) &SwigClassLognormal);
  rb_define_alloc_func(SwigClassLognormal.klass, _wrap_Lognormal_allocate);
  rb_define_method(SwigClassLognormal.klass, "initialize", VALUEFUNC(_wrap_new_Lognormal), -1);
  rb_define_method(SwigClassLognormal.klass, "location", VALUEFUNC(_wrap_Lognormal_location), -1);
  rb_define_method(SwigClassLognormal.klass, "scale", VALUEFUNC(_wrap_Lognormal_scale), -1);
  rb_define_method(SwigClassLognormal.klass, "pdf", VALUEFUNC(_wrap_Lognormal_pdf), -1);
  rb_define_method(SwigClassLognormal.klass, "cdf", VALUEFUNC(_wrap_Lognormal_cdf), -1);
  rb_define_method(SwigClassLognormal.klass, "quantile", VALUEFUNC(_wrap_Lognormal_quantile), -1);
  rb_define_method(SwigClassLognormal.klass, "hazard", VALUEFUNC(_wrap_Lognormal_hazard), -1);
  rb_define_method(SwigClassLognormal.klass, "chf", VALUEFUNC(_wrap_Lognormal_chf), -1);
  rb_define_method(SwigClassLognormal.klass, "mean", VALUEFUNC(_wrap_Lognormal_mean), -1);
  rb_define_method(SwigClassLognormal.klass, "median", VALUEFUNC(_wrap_Lognormal_median), -1);
  rb_define_method(SwigClassLognormal.klass, "mode", VALUEFUNC(_wrap_Lognormal_mode), -1);
  rb_define_method(SwigClassLognormal.klass, "standard_deviation", VALUEFUNC(_wrap_Lognormal_standard_deviation), -1);
  rb_define_method(SwigClassLognormal.klass, "variance", VALUEFUNC(_wrap_Lognormal_variance), -1);
  rb_define_method(SwigClassLognormal.klass, "skewness", VALUEFUNC(_wrap_Lognormal_skewness), -1);
  rb_define_method(SwigClassLognormal.klass, "kurtosis", VALUEFUNC(_wrap_Lognormal_kurtosis), -1);
  rb_define_method(SwigClassLognormal.klass, "kurtosis_excess", VALUEFUNC(_wrap_Lognormal_kurtosis_excess), -1);
  rb_define_method(SwigClassLognormal.klass, "range", VALUEFUNC(_wrap_Lognormal_range), -1);
  rb_define_method(SwigClassLognormal.klass, "support", VALUEFUNC(_wrap_Lognormal_support), -1);
  SwigClassLognormal.mark = 0;
  SwigClassLognormal.destroy = (void (*)(void *)) free_boost_math_lognormal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassLognormal.trackObjects = 0;
  
  SwigClassNegativeBinomial.klass = rb_define_class_under(mBoostDistributions, "NegativeBinomial", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__negative_binomial_distributionT_double_policies__policyT_t_t, (void *) &SwigClassNegativeBinomial);
  rb_define_alloc_func(SwigClassNegativeBinomial.klass, _wrap_NegativeBinomial_allocate);
  rb_define_method(SwigClassNegativeBinomial.klass, "initialize", VALUEFUNC(_wrap_new_NegativeBinomial), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "success_fraction", VALUEFUNC(_wrap_NegativeBinomial_success_fraction), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "successes", VALUEFUNC(_wrap_NegativeBinomial_successes), -1);
  rb_define_singleton_method(SwigClassNegativeBinomial.klass, "find_lower_bound_on_p", VALUEFUNC(_wrap_NegativeBinomial_find_lower_bound_on_p), -1);
  rb_define_singleton_method(SwigClassNegativeBinomial.klass, "find_upper_bound_on_p", VALUEFUNC(_wrap_NegativeBinomial_find_upper_bound_on_p), -1);
  rb_define_singleton_method(SwigClassNegativeBinomial.klass, "find_minimum_number_of_trials", VALUEFUNC(_wrap_NegativeBinomial_find_minimum_number_of_trials), -1);
  rb_define_singleton_method(SwigClassNegativeBinomial.klass, "find_maximum_number_of_trials", VALUEFUNC(_wrap_NegativeBinomial_find_maximum_number_of_trials), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "pdf", VALUEFUNC(_wrap_NegativeBinomial_pdf), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "cdf", VALUEFUNC(_wrap_NegativeBinomial_cdf), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "quantile", VALUEFUNC(_wrap_NegativeBinomial_quantile), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "hazard", VALUEFUNC(_wrap_NegativeBinomial_hazard), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "chf", VALUEFUNC(_wrap_NegativeBinomial_chf), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "mean", VALUEFUNC(_wrap_NegativeBinomial_mean), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "median", VALUEFUNC(_wrap_NegativeBinomial_median), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "mode", VALUEFUNC(_wrap_NegativeBinomial_mode), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "standard_deviation", VALUEFUNC(_wrap_NegativeBinomial_standard_deviation), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "variance", VALUEFUNC(_wrap_NegativeBinomial_variance), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "skewness", VALUEFUNC(_wrap_NegativeBinomial_skewness), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "kurtosis", VALUEFUNC(_wrap_NegativeBinomial_kurtosis), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "kurtosis_excess", VALUEFUNC(_wrap_NegativeBinomial_kurtosis_excess), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "range", VALUEFUNC(_wrap_NegativeBinomial_range), -1);
  rb_define_method(SwigClassNegativeBinomial.klass, "support", VALUEFUNC(_wrap_NegativeBinomial_support), -1);
  SwigClassNegativeBinomial.mark = 0;
  SwigClassNegativeBinomial.destroy = (void (*)(void *)) free_boost_math_negative_binomial_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassNegativeBinomial.trackObjects = 0;
  
  SwigClassNonCentralBeta.klass = rb_define_class_under(mBoostDistributions, "NonCentralBeta", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__non_central_beta_distributionT_double_policies__policyT_t_t, (void *) &SwigClassNonCentralBeta);
  rb_define_alloc_func(SwigClassNonCentralBeta.klass, _wrap_NonCentralBeta_allocate);
  rb_define_method(SwigClassNonCentralBeta.klass, "initialize", VALUEFUNC(_wrap_new_NonCentralBeta), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "alpha", VALUEFUNC(_wrap_NonCentralBeta_alpha), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "beta", VALUEFUNC(_wrap_NonCentralBeta_beta), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "non_centrality", VALUEFUNC(_wrap_NonCentralBeta_non_centrality), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "pdf", VALUEFUNC(_wrap_NonCentralBeta_pdf), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "cdf", VALUEFUNC(_wrap_NonCentralBeta_cdf), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "quantile", VALUEFUNC(_wrap_NonCentralBeta_quantile), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "hazard", VALUEFUNC(_wrap_NonCentralBeta_hazard), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "chf", VALUEFUNC(_wrap_NonCentralBeta_chf), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "mean", VALUEFUNC(_wrap_NonCentralBeta_mean), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "median", VALUEFUNC(_wrap_NonCentralBeta_median), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "mode", VALUEFUNC(_wrap_NonCentralBeta_mode), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "standard_deviation", VALUEFUNC(_wrap_NonCentralBeta_standard_deviation), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "variance", VALUEFUNC(_wrap_NonCentralBeta_variance), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "range", VALUEFUNC(_wrap_NonCentralBeta_range), -1);
  rb_define_method(SwigClassNonCentralBeta.klass, "support", VALUEFUNC(_wrap_NonCentralBeta_support), -1);
  SwigClassNonCentralBeta.mark = 0;
  SwigClassNonCentralBeta.destroy = (void (*)(void *)) free_boost_math_non_central_beta_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassNonCentralBeta.trackObjects = 0;
  
  SwigClassNonCentralChiSquared.klass = rb_define_class_under(mBoostDistributions, "NonCentralChiSquared", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__non_central_chi_squared_distributionT_double_policies__policyT_t_t, (void *) &SwigClassNonCentralChiSquared);
  rb_define_alloc_func(SwigClassNonCentralChiSquared.klass, _wrap_NonCentralChiSquared_allocate);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "initialize", VALUEFUNC(_wrap_new_NonCentralChiSquared), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "degrees_of_freedom", VALUEFUNC(_wrap_NonCentralChiSquared_degrees_of_freedom), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "non_centrality", VALUEFUNC(_wrap_NonCentralChiSquared_non_centrality), -1);
  rb_define_singleton_method(SwigClassNonCentralChiSquared.klass, "find_degrees_of_freedom", VALUEFUNC(_wrap_NonCentralChiSquared_find_degrees_of_freedom), -1);
  rb_define_singleton_method(SwigClassNonCentralChiSquared.klass, "find_non_centrality", VALUEFUNC(_wrap_NonCentralChiSquared_find_non_centrality), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "pdf", VALUEFUNC(_wrap_NonCentralChiSquared_pdf), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "cdf", VALUEFUNC(_wrap_NonCentralChiSquared_cdf), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "quantile", VALUEFUNC(_wrap_NonCentralChiSquared_quantile), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "hazard", VALUEFUNC(_wrap_NonCentralChiSquared_hazard), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "chf", VALUEFUNC(_wrap_NonCentralChiSquared_chf), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "mean", VALUEFUNC(_wrap_NonCentralChiSquared_mean), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "median", VALUEFUNC(_wrap_NonCentralChiSquared_median), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "mode", VALUEFUNC(_wrap_NonCentralChiSquared_mode), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "standard_deviation", VALUEFUNC(_wrap_NonCentralChiSquared_standard_deviation), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "variance", VALUEFUNC(_wrap_NonCentralChiSquared_variance), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "skewness", VALUEFUNC(_wrap_NonCentralChiSquared_skewness), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "kurtosis", VALUEFUNC(_wrap_NonCentralChiSquared_kurtosis), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "kurtosis_excess", VALUEFUNC(_wrap_NonCentralChiSquared_kurtosis_excess), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "range", VALUEFUNC(_wrap_NonCentralChiSquared_range), -1);
  rb_define_method(SwigClassNonCentralChiSquared.klass, "support", VALUEFUNC(_wrap_NonCentralChiSquared_support), -1);
  SwigClassNonCentralChiSquared.mark = 0;
  SwigClassNonCentralChiSquared.destroy = (void (*)(void *)) free_boost_math_non_central_chi_squared_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassNonCentralChiSquared.trackObjects = 0;
  
  SwigClassNonCentralF.klass = rb_define_class_under(mBoostDistributions, "NonCentralF", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__non_central_f_distributionT_double_policies__policyT_t_t, (void *) &SwigClassNonCentralF);
  rb_define_alloc_func(SwigClassNonCentralF.klass, _wrap_NonCentralF_allocate);
  rb_define_method(SwigClassNonCentralF.klass, "initialize", VALUEFUNC(_wrap_new_NonCentralF), -1);
  rb_define_method(SwigClassNonCentralF.klass, "degrees_of_freedom1", VALUEFUNC(_wrap_NonCentralF_degrees_of_freedom1), -1);
  rb_define_method(SwigClassNonCentralF.klass, "degrees_of_freedom2", VALUEFUNC(_wrap_NonCentralF_degrees_of_freedom2), -1);
  rb_define_method(SwigClassNonCentralF.klass, "non_centrality", VALUEFUNC(_wrap_NonCentralF_non_centrality), -1);
  rb_define_method(SwigClassNonCentralF.klass, "pdf", VALUEFUNC(_wrap_NonCentralF_pdf), -1);
  rb_define_method(SwigClassNonCentralF.klass, "cdf", VALUEFUNC(_wrap_NonCentralF_cdf), -1);
  rb_define_method(SwigClassNonCentralF.klass, "quantile", VALUEFUNC(_wrap_NonCentralF_quantile), -1);
  rb_define_method(SwigClassNonCentralF.klass, "hazard", VALUEFUNC(_wrap_NonCentralF_hazard), -1);
  rb_define_method(SwigClassNonCentralF.klass, "chf", VALUEFUNC(_wrap_NonCentralF_chf), -1);
  rb_define_method(SwigClassNonCentralF.klass, "mean", VALUEFUNC(_wrap_NonCentralF_mean), -1);
  rb_define_method(SwigClassNonCentralF.klass, "median", VALUEFUNC(_wrap_NonCentralF_median), -1);
  rb_define_method(SwigClassNonCentralF.klass, "mode", VALUEFUNC(_wrap_NonCentralF_mode), -1);
  rb_define_method(SwigClassNonCentralF.klass, "standard_deviation", VALUEFUNC(_wrap_NonCentralF_standard_deviation), -1);
  rb_define_method(SwigClassNonCentralF.klass, "variance", VALUEFUNC(_wrap_NonCentralF_variance), -1);
  rb_define_method(SwigClassNonCentralF.klass, "skewness", VALUEFUNC(_wrap_NonCentralF_skewness), -1);
  rb_define_method(SwigClassNonCentralF.klass, "kurtosis", VALUEFUNC(_wrap_NonCentralF_kurtosis), -1);
  rb_define_method(SwigClassNonCentralF.klass, "kurtosis_excess", VALUEFUNC(_wrap_NonCentralF_kurtosis_excess), -1);
  rb_define_method(SwigClassNonCentralF.klass, "range", VALUEFUNC(_wrap_NonCentralF_range), -1);
  rb_define_method(SwigClassNonCentralF.klass, "support", VALUEFUNC(_wrap_NonCentralF_support), -1);
  SwigClassNonCentralF.mark = 0;
  SwigClassNonCentralF.destroy = (void (*)(void *)) free_boost_math_non_central_f_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassNonCentralF.trackObjects = 0;
  
  SwigClassNonCentralT.klass = rb_define_class_under(mBoostDistributions, "NonCentralT", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__non_central_t_distributionT_double_policies__policyT_t_t, (void *) &SwigClassNonCentralT);
  rb_define_alloc_func(SwigClassNonCentralT.klass, _wrap_NonCentralT_allocate);
  rb_define_method(SwigClassNonCentralT.klass, "initialize", VALUEFUNC(_wrap_new_NonCentralT), -1);
  rb_define_method(SwigClassNonCentralT.klass, "degrees_of_freedom", VALUEFUNC(_wrap_NonCentralT_degrees_of_freedom), -1);
  rb_define_method(SwigClassNonCentralT.klass, "non_centrality", VALUEFUNC(_wrap_NonCentralT_non_centrality), -1);
  rb_define_method(SwigClassNonCentralT.klass, "pdf", VALUEFUNC(_wrap_NonCentralT_pdf), -1);
  rb_define_method(SwigClassNonCentralT.klass, "cdf", VALUEFUNC(_wrap_NonCentralT_cdf), -1);
  rb_define_method(SwigClassNonCentralT.klass, "quantile", VALUEFUNC(_wrap_NonCentralT_quantile), -1);
  rb_define_method(SwigClassNonCentralT.klass, "hazard", VALUEFUNC(_wrap_NonCentralT_hazard), -1);
  rb_define_method(SwigClassNonCentralT.klass, "chf", VALUEFUNC(_wrap_NonCentralT_chf), -1);
  rb_define_method(SwigClassNonCentralT.klass, "mean", VALUEFUNC(_wrap_NonCentralT_mean), -1);
  rb_define_method(SwigClassNonCentralT.klass, "median", VALUEFUNC(_wrap_NonCentralT_median), -1);
  rb_define_method(SwigClassNonCentralT.klass, "mode", VALUEFUNC(_wrap_NonCentralT_mode), -1);
  rb_define_method(SwigClassNonCentralT.klass, "standard_deviation", VALUEFUNC(_wrap_NonCentralT_standard_deviation), -1);
  rb_define_method(SwigClassNonCentralT.klass, "variance", VALUEFUNC(_wrap_NonCentralT_variance), -1);
  rb_define_method(SwigClassNonCentralT.klass, "skewness", VALUEFUNC(_wrap_NonCentralT_skewness), -1);
  rb_define_method(SwigClassNonCentralT.klass, "kurtosis", VALUEFUNC(_wrap_NonCentralT_kurtosis), -1);
  rb_define_method(SwigClassNonCentralT.klass, "kurtosis_excess", VALUEFUNC(_wrap_NonCentralT_kurtosis_excess), -1);
  rb_define_method(SwigClassNonCentralT.klass, "range", VALUEFUNC(_wrap_NonCentralT_range), -1);
  rb_define_method(SwigClassNonCentralT.klass, "support", VALUEFUNC(_wrap_NonCentralT_support), -1);
  SwigClassNonCentralT.mark = 0;
  SwigClassNonCentralT.destroy = (void (*)(void *)) free_boost_math_non_central_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassNonCentralT.trackObjects = 0;
  
  SwigClassNormal.klass = rb_define_class_under(mBoostDistributions, "Normal", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__normal_distributionT_double_policies__policyT_t_t, (void *) &SwigClassNormal);
  rb_define_alloc_func(SwigClassNormal.klass, _wrap_Normal_allocate);
  rb_define_method(SwigClassNormal.klass, "initialize", VALUEFUNC(_wrap_new_Normal), -1);
  rb_define_method(SwigClassNormal.klass, "mean", VALUEFUNC(_wrap_Normal_mean), -1);
  rb_define_method(SwigClassNormal.klass, "standard_deviation", VALUEFUNC(_wrap_Normal_standard_deviation), -1);
  rb_define_method(SwigClassNormal.klass, "location", VALUEFUNC(_wrap_Normal_location), -1);
  rb_define_method(SwigClassNormal.klass, "scale", VALUEFUNC(_wrap_Normal_scale), -1);
  rb_define_method(SwigClassNormal.klass, "pdf", VALUEFUNC(_wrap_Normal_pdf), -1);
  rb_define_method(SwigClassNormal.klass, "cdf", VALUEFUNC(_wrap_Normal_cdf), -1);
  rb_define_method(SwigClassNormal.klass, "quantile", VALUEFUNC(_wrap_Normal_quantile), -1);
  rb_define_method(SwigClassNormal.klass, "hazard", VALUEFUNC(_wrap_Normal_hazard), -1);
  rb_define_method(SwigClassNormal.klass, "chf", VALUEFUNC(_wrap_Normal_chf), -1);
  rb_define_method(SwigClassNormal.klass, "median", VALUEFUNC(_wrap_Normal_median), -1);
  rb_define_method(SwigClassNormal.klass, "mode", VALUEFUNC(_wrap_Normal_mode), -1);
  rb_define_method(SwigClassNormal.klass, "variance", VALUEFUNC(_wrap_Normal_variance), -1);
  rb_define_method(SwigClassNormal.klass, "skewness", VALUEFUNC(_wrap_Normal_skewness), -1);
  rb_define_method(SwigClassNormal.klass, "kurtosis", VALUEFUNC(_wrap_Normal_kurtosis), -1);
  rb_define_method(SwigClassNormal.klass, "kurtosis_excess", VALUEFUNC(_wrap_Normal_kurtosis_excess), -1);
  rb_define_method(SwigClassNormal.klass, "range", VALUEFUNC(_wrap_Normal_range), -1);
  rb_define_method(SwigClassNormal.klass, "support", VALUEFUNC(_wrap_Normal_support), -1);
  SwigClassNormal.mark = 0;
  SwigClassNormal.destroy = (void (*)(void *)) free_boost_math_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassNormal.trackObjects = 0;
  
  SwigClassPareto.klass = rb_define_class_under(mBoostDistributions, "Pareto", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__pareto_distributionT_double_policies__policyT_t_t, (void *) &SwigClassPareto);
  rb_define_alloc_func(SwigClassPareto.klass, _wrap_Pareto_allocate);
  rb_define_method(SwigClassPareto.klass, "initialize", VALUEFUNC(_wrap_new_Pareto), -1);
  rb_define_method(SwigClassPareto.klass, "scale", VALUEFUNC(_wrap_Pareto_scale), -1);
  rb_define_method(SwigClassPareto.klass, "shape", VALUEFUNC(_wrap_Pareto_shape), -1);
  rb_define_method(SwigClassPareto.klass, "pdf", VALUEFUNC(_wrap_Pareto_pdf), -1);
  rb_define_method(SwigClassPareto.klass, "cdf", VALUEFUNC(_wrap_Pareto_cdf), -1);
  rb_define_method(SwigClassPareto.klass, "quantile", VALUEFUNC(_wrap_Pareto_quantile), -1);
  rb_define_method(SwigClassPareto.klass, "hazard", VALUEFUNC(_wrap_Pareto_hazard), -1);
  rb_define_method(SwigClassPareto.klass, "chf", VALUEFUNC(_wrap_Pareto_chf), -1);
  rb_define_method(SwigClassPareto.klass, "mean", VALUEFUNC(_wrap_Pareto_mean), -1);
  rb_define_method(SwigClassPareto.klass, "median", VALUEFUNC(_wrap_Pareto_median), -1);
  rb_define_method(SwigClassPareto.klass, "mode", VALUEFUNC(_wrap_Pareto_mode), -1);
  rb_define_method(SwigClassPareto.klass, "standard_deviation", VALUEFUNC(_wrap_Pareto_standard_deviation), -1);
  rb_define_method(SwigClassPareto.klass, "variance", VALUEFUNC(_wrap_Pareto_variance), -1);
  rb_define_method(SwigClassPareto.klass, "skewness", VALUEFUNC(_wrap_Pareto_skewness), -1);
  rb_define_method(SwigClassPareto.klass, "kurtosis", VALUEFUNC(_wrap_Pareto_kurtosis), -1);
  rb_define_method(SwigClassPareto.klass, "kurtosis_excess", VALUEFUNC(_wrap_Pareto_kurtosis_excess), -1);
  rb_define_method(SwigClassPareto.klass, "range", VALUEFUNC(_wrap_Pareto_range), -1);
  rb_define_method(SwigClassPareto.klass, "support", VALUEFUNC(_wrap_Pareto_support), -1);
  SwigClassPareto.mark = 0;
  SwigClassPareto.destroy = (void (*)(void *)) free_boost_math_pareto_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassPareto.trackObjects = 0;
  
  SwigClassPoisson.klass = rb_define_class_under(mBoostDistributions, "Poisson", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__poisson_distributionT_double_policies__policyT_t_t, (void *) &SwigClassPoisson);
  rb_define_alloc_func(SwigClassPoisson.klass, _wrap_Poisson_allocate);
  rb_define_method(SwigClassPoisson.klass, "initialize", VALUEFUNC(_wrap_new_Poisson), -1);
  rb_define_method(SwigClassPoisson.klass, "mean", VALUEFUNC(_wrap_Poisson_mean), -1);
  rb_define_method(SwigClassPoisson.klass, "pdf", VALUEFUNC(_wrap_Poisson_pdf), -1);
  rb_define_method(SwigClassPoisson.klass, "cdf", VALUEFUNC(_wrap_Poisson_cdf), -1);
  rb_define_method(SwigClassPoisson.klass, "quantile", VALUEFUNC(_wrap_Poisson_quantile), -1);
  rb_define_method(SwigClassPoisson.klass, "hazard", VALUEFUNC(_wrap_Poisson_hazard), -1);
  rb_define_method(SwigClassPoisson.klass, "chf", VALUEFUNC(_wrap_Poisson_chf), -1);
  rb_define_method(SwigClassPoisson.klass, "median", VALUEFUNC(_wrap_Poisson_median), -1);
  rb_define_method(SwigClassPoisson.klass, "mode", VALUEFUNC(_wrap_Poisson_mode), -1);
  rb_define_method(SwigClassPoisson.klass, "standard_deviation", VALUEFUNC(_wrap_Poisson_standard_deviation), -1);
  rb_define_method(SwigClassPoisson.klass, "variance", VALUEFUNC(_wrap_Poisson_variance), -1);
  rb_define_method(SwigClassPoisson.klass, "skewness", VALUEFUNC(_wrap_Poisson_skewness), -1);
  rb_define_method(SwigClassPoisson.klass, "kurtosis", VALUEFUNC(_wrap_Poisson_kurtosis), -1);
  rb_define_method(SwigClassPoisson.klass, "kurtosis_excess", VALUEFUNC(_wrap_Poisson_kurtosis_excess), -1);
  rb_define_method(SwigClassPoisson.klass, "range", VALUEFUNC(_wrap_Poisson_range), -1);
  rb_define_method(SwigClassPoisson.klass, "support", VALUEFUNC(_wrap_Poisson_support), -1);
  SwigClassPoisson.mark = 0;
  SwigClassPoisson.destroy = (void (*)(void *)) free_boost_math_poisson_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassPoisson.trackObjects = 0;
  
  SwigClassRayleigh.klass = rb_define_class_under(mBoostDistributions, "Rayleigh", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__rayleigh_distributionT_double_policies__policyT_t_t, (void *) &SwigClassRayleigh);
  rb_define_alloc_func(SwigClassRayleigh.klass, _wrap_Rayleigh_allocate);
  rb_define_method(SwigClassRayleigh.klass, "initialize", VALUEFUNC(_wrap_new_Rayleigh), -1);
  rb_define_method(SwigClassRayleigh.klass, "sigma", VALUEFUNC(_wrap_Rayleigh_sigma), -1);
  rb_define_method(SwigClassRayleigh.klass, "pdf", VALUEFUNC(_wrap_Rayleigh_pdf), -1);
  rb_define_method(SwigClassRayleigh.klass, "cdf", VALUEFUNC(_wrap_Rayleigh_cdf), -1);
  rb_define_method(SwigClassRayleigh.klass, "quantile", VALUEFUNC(_wrap_Rayleigh_quantile), -1);
  rb_define_method(SwigClassRayleigh.klass, "hazard", VALUEFUNC(_wrap_Rayleigh_hazard), -1);
  rb_define_method(SwigClassRayleigh.klass, "chf", VALUEFUNC(_wrap_Rayleigh_chf), -1);
  rb_define_method(SwigClassRayleigh.klass, "mean", VALUEFUNC(_wrap_Rayleigh_mean), -1);
  rb_define_method(SwigClassRayleigh.klass, "median", VALUEFUNC(_wrap_Rayleigh_median), -1);
  rb_define_method(SwigClassRayleigh.klass, "mode", VALUEFUNC(_wrap_Rayleigh_mode), -1);
  rb_define_method(SwigClassRayleigh.klass, "standard_deviation", VALUEFUNC(_wrap_Rayleigh_standard_deviation), -1);
  rb_define_method(SwigClassRayleigh.klass, "variance", VALUEFUNC(_wrap_Rayleigh_variance), -1);
  rb_define_method(SwigClassRayleigh.klass, "skewness", VALUEFUNC(_wrap_Rayleigh_skewness), -1);
  rb_define_method(SwigClassRayleigh.klass, "kurtosis", VALUEFUNC(_wrap_Rayleigh_kurtosis), -1);
  rb_define_method(SwigClassRayleigh.klass, "kurtosis_excess", VALUEFUNC(_wrap_Rayleigh_kurtosis_excess), -1);
  rb_define_method(SwigClassRayleigh.klass, "range", VALUEFUNC(_wrap_Rayleigh_range), -1);
  rb_define_method(SwigClassRayleigh.klass, "support", VALUEFUNC(_wrap_Rayleigh_support), -1);
  SwigClassRayleigh.mark = 0;
  SwigClassRayleigh.destroy = (void (*)(void *)) free_boost_math_rayleigh_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassRayleigh.trackObjects = 0;
  
  SwigClassSkewNormal.klass = rb_define_class_under(mBoostDistributions, "SkewNormal", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__skew_normal_distributionT_double_policies__policyT_t_t, (void *) &SwigClassSkewNormal);
  rb_define_alloc_func(SwigClassSkewNormal.klass, _wrap_SkewNormal_allocate);
  rb_define_method(SwigClassSkewNormal.klass, "initialize", VALUEFUNC(_wrap_new_SkewNormal), -1);
  rb_define_method(SwigClassSkewNormal.klass, "location", VALUEFUNC(_wrap_SkewNormal_location), -1);
  rb_define_method(SwigClassSkewNormal.klass, "scale", VALUEFUNC(_wrap_SkewNormal_scale), -1);
  rb_define_method(SwigClassSkewNormal.klass, "shape", VALUEFUNC(_wrap_SkewNormal_shape), -1);
  rb_define_method(SwigClassSkewNormal.klass, "pdf", VALUEFUNC(_wrap_SkewNormal_pdf), -1);
  rb_define_method(SwigClassSkewNormal.klass, "cdf", VALUEFUNC(_wrap_SkewNormal_cdf), -1);
  rb_define_method(SwigClassSkewNormal.klass, "quantile", VALUEFUNC(_wrap_SkewNormal_quantile), -1);
  rb_define_method(SwigClassSkewNormal.klass, "hazard", VALUEFUNC(_wrap_SkewNormal_hazard), -1);
  rb_define_method(SwigClassSkewNormal.klass, "chf", VALUEFUNC(_wrap_SkewNormal_chf), -1);
  rb_define_method(SwigClassSkewNormal.klass, "mean", VALUEFUNC(_wrap_SkewNormal_mean), -1);
  rb_define_method(SwigClassSkewNormal.klass, "median", VALUEFUNC(_wrap_SkewNormal_median), -1);
  rb_define_method(SwigClassSkewNormal.klass, "mode", VALUEFUNC(_wrap_SkewNormal_mode), -1);
  rb_define_method(SwigClassSkewNormal.klass, "standard_deviation", VALUEFUNC(_wrap_SkewNormal_standard_deviation), -1);
  rb_define_method(SwigClassSkewNormal.klass, "variance", VALUEFUNC(_wrap_SkewNormal_variance), -1);
  rb_define_method(SwigClassSkewNormal.klass, "skewness", VALUEFUNC(_wrap_SkewNormal_skewness), -1);
  rb_define_method(SwigClassSkewNormal.klass, "kurtosis", VALUEFUNC(_wrap_SkewNormal_kurtosis), -1);
  rb_define_method(SwigClassSkewNormal.klass, "kurtosis_excess", VALUEFUNC(_wrap_SkewNormal_kurtosis_excess), -1);
  rb_define_method(SwigClassSkewNormal.klass, "range", VALUEFUNC(_wrap_SkewNormal_range), -1);
  rb_define_method(SwigClassSkewNormal.klass, "support", VALUEFUNC(_wrap_SkewNormal_support), -1);
  SwigClassSkewNormal.mark = 0;
  SwigClassSkewNormal.destroy = (void (*)(void *)) free_boost_math_skew_normal_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassSkewNormal.trackObjects = 0;
  
  SwigClassStudentsT.klass = rb_define_class_under(mBoostDistributions, "StudentsT", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__students_t_distributionT_double_policies__policyT_t_t, (void *) &SwigClassStudentsT);
  rb_define_alloc_func(SwigClassStudentsT.klass, _wrap_StudentsT_allocate);
  rb_define_method(SwigClassStudentsT.klass, "initialize", VALUEFUNC(_wrap_new_StudentsT), -1);
  rb_define_method(SwigClassStudentsT.klass, "degrees_of_freedom", VALUEFUNC(_wrap_StudentsT_degrees_of_freedom), -1);
  rb_define_singleton_method(SwigClassStudentsT.klass, "find_degrees_of_freedom", VALUEFUNC(_wrap_StudentsT_find_degrees_of_freedom), -1);
  rb_define_method(SwigClassStudentsT.klass, "pdf", VALUEFUNC(_wrap_StudentsT_pdf), -1);
  rb_define_method(SwigClassStudentsT.klass, "cdf", VALUEFUNC(_wrap_StudentsT_cdf), -1);
  rb_define_method(SwigClassStudentsT.klass, "quantile", VALUEFUNC(_wrap_StudentsT_quantile), -1);
  rb_define_method(SwigClassStudentsT.klass, "hazard", VALUEFUNC(_wrap_StudentsT_hazard), -1);
  rb_define_method(SwigClassStudentsT.klass, "chf", VALUEFUNC(_wrap_StudentsT_chf), -1);
  rb_define_method(SwigClassStudentsT.klass, "mean", VALUEFUNC(_wrap_StudentsT_mean), -1);
  rb_define_method(SwigClassStudentsT.klass, "median", VALUEFUNC(_wrap_StudentsT_median), -1);
  rb_define_method(SwigClassStudentsT.klass, "mode", VALUEFUNC(_wrap_StudentsT_mode), -1);
  rb_define_method(SwigClassStudentsT.klass, "standard_deviation", VALUEFUNC(_wrap_StudentsT_standard_deviation), -1);
  rb_define_method(SwigClassStudentsT.klass, "variance", VALUEFUNC(_wrap_StudentsT_variance), -1);
  rb_define_method(SwigClassStudentsT.klass, "skewness", VALUEFUNC(_wrap_StudentsT_skewness), -1);
  rb_define_method(SwigClassStudentsT.klass, "kurtosis", VALUEFUNC(_wrap_StudentsT_kurtosis), -1);
  rb_define_method(SwigClassStudentsT.klass, "kurtosis_excess", VALUEFUNC(_wrap_StudentsT_kurtosis_excess), -1);
  rb_define_method(SwigClassStudentsT.klass, "range", VALUEFUNC(_wrap_StudentsT_range), -1);
  rb_define_method(SwigClassStudentsT.klass, "support", VALUEFUNC(_wrap_StudentsT_support), -1);
  SwigClassStudentsT.mark = 0;
  SwigClassStudentsT.destroy = (void (*)(void *)) free_boost_math_students_t_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassStudentsT.trackObjects = 0;
  
  SwigClassTriangular.klass = rb_define_class_under(mBoostDistributions, "Triangular", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__triangular_distributionT_double_policies__policyT_t_t, (void *) &SwigClassTriangular);
  rb_define_alloc_func(SwigClassTriangular.klass, _wrap_Triangular_allocate);
  rb_define_method(SwigClassTriangular.klass, "initialize", VALUEFUNC(_wrap_new_Triangular), -1);
  rb_define_method(SwigClassTriangular.klass, "lower", VALUEFUNC(_wrap_Triangular_lower), -1);
  rb_define_method(SwigClassTriangular.klass, "mode", VALUEFUNC(_wrap_Triangular_mode), -1);
  rb_define_method(SwigClassTriangular.klass, "upper", VALUEFUNC(_wrap_Triangular_upper), -1);
  rb_define_method(SwigClassTriangular.klass, "pdf", VALUEFUNC(_wrap_Triangular_pdf), -1);
  rb_define_method(SwigClassTriangular.klass, "cdf", VALUEFUNC(_wrap_Triangular_cdf), -1);
  rb_define_method(SwigClassTriangular.klass, "quantile", VALUEFUNC(_wrap_Triangular_quantile), -1);
  rb_define_method(SwigClassTriangular.klass, "hazard", VALUEFUNC(_wrap_Triangular_hazard), -1);
  rb_define_method(SwigClassTriangular.klass, "chf", VALUEFUNC(_wrap_Triangular_chf), -1);
  rb_define_method(SwigClassTriangular.klass, "mean", VALUEFUNC(_wrap_Triangular_mean), -1);
  rb_define_method(SwigClassTriangular.klass, "median", VALUEFUNC(_wrap_Triangular_median), -1);
  rb_define_method(SwigClassTriangular.klass, "standard_deviation", VALUEFUNC(_wrap_Triangular_standard_deviation), -1);
  rb_define_method(SwigClassTriangular.klass, "variance", VALUEFUNC(_wrap_Triangular_variance), -1);
  rb_define_method(SwigClassTriangular.klass, "skewness", VALUEFUNC(_wrap_Triangular_skewness), -1);
  rb_define_method(SwigClassTriangular.klass, "kurtosis", VALUEFUNC(_wrap_Triangular_kurtosis), -1);
  rb_define_method(SwigClassTriangular.klass, "kurtosis_excess", VALUEFUNC(_wrap_Triangular_kurtosis_excess), -1);
  rb_define_method(SwigClassTriangular.klass, "range", VALUEFUNC(_wrap_Triangular_range), -1);
  rb_define_method(SwigClassTriangular.klass, "support", VALUEFUNC(_wrap_Triangular_support), -1);
  SwigClassTriangular.mark = 0;
  SwigClassTriangular.destroy = (void (*)(void *)) free_boost_math_triangular_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassTriangular.trackObjects = 0;
  
  SwigClassUniform.klass = rb_define_class_under(mBoostDistributions, "Uniform", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__uniform_distributionT_double_policies__policyT_t_t, (void *) &SwigClassUniform);
  rb_define_alloc_func(SwigClassUniform.klass, _wrap_Uniform_allocate);
  rb_define_method(SwigClassUniform.klass, "initialize", VALUEFUNC(_wrap_new_Uniform), -1);
  rb_define_method(SwigClassUniform.klass, "lower", VALUEFUNC(_wrap_Uniform_lower), -1);
  rb_define_method(SwigClassUniform.klass, "upper", VALUEFUNC(_wrap_Uniform_upper), -1);
  rb_define_method(SwigClassUniform.klass, "pdf", VALUEFUNC(_wrap_Uniform_pdf), -1);
  rb_define_method(SwigClassUniform.klass, "cdf", VALUEFUNC(_wrap_Uniform_cdf), -1);
  rb_define_method(SwigClassUniform.klass, "quantile", VALUEFUNC(_wrap_Uniform_quantile), -1);
  rb_define_method(SwigClassUniform.klass, "hazard", VALUEFUNC(_wrap_Uniform_hazard), -1);
  rb_define_method(SwigClassUniform.klass, "chf", VALUEFUNC(_wrap_Uniform_chf), -1);
  rb_define_method(SwigClassUniform.klass, "mean", VALUEFUNC(_wrap_Uniform_mean), -1);
  rb_define_method(SwigClassUniform.klass, "median", VALUEFUNC(_wrap_Uniform_median), -1);
  rb_define_method(SwigClassUniform.klass, "mode", VALUEFUNC(_wrap_Uniform_mode), -1);
  rb_define_method(SwigClassUniform.klass, "standard_deviation", VALUEFUNC(_wrap_Uniform_standard_deviation), -1);
  rb_define_method(SwigClassUniform.klass, "variance", VALUEFUNC(_wrap_Uniform_variance), -1);
  rb_define_method(SwigClassUniform.klass, "skewness", VALUEFUNC(_wrap_Uniform_skewness), -1);
  rb_define_method(SwigClassUniform.klass, "kurtosis", VALUEFUNC(_wrap_Uniform_kurtosis), -1);
  rb_define_method(SwigClassUniform.klass, "kurtosis_excess", VALUEFUNC(_wrap_Uniform_kurtosis_excess), -1);
  rb_define_method(SwigClassUniform.klass, "range", VALUEFUNC(_wrap_Uniform_range), -1);
  rb_define_method(SwigClassUniform.klass, "support", VALUEFUNC(_wrap_Uniform_support), -1);
  SwigClassUniform.mark = 0;
  SwigClassUniform.destroy = (void (*)(void *)) free_boost_math_uniform_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassUniform.trackObjects = 0;
  
  SwigClassWeibull.klass = rb_define_class_under(mBoostDistributions, "Weibull", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__math__weibull_distributionT_double_policies__policyT_t_t, (void *) &SwigClassWeibull);
  rb_define_alloc_func(SwigClassWeibull.klass, _wrap_Weibull_allocate);
  rb_define_method(SwigClassWeibull.klass, "initialize", VALUEFUNC(_wrap_new_Weibull), -1);
  rb_define_method(SwigClassWeibull.klass, "shape", VALUEFUNC(_wrap_Weibull_shape), -1);
  rb_define_method(SwigClassWeibull.klass, "scale", VALUEFUNC(_wrap_Weibull_scale), -1);
  rb_define_method(SwigClassWeibull.klass, "pdf", VALUEFUNC(_wrap_Weibull_pdf), -1);
  rb_define_method(SwigClassWeibull.klass, "cdf", VALUEFUNC(_wrap_Weibull_cdf), -1);
  rb_define_method(SwigClassWeibull.klass, "quantile", VALUEFUNC(_wrap_Weibull_quantile), -1);
  rb_define_method(SwigClassWeibull.klass, "hazard", VALUEFUNC(_wrap_Weibull_hazard), -1);
  rb_define_method(SwigClassWeibull.klass, "chf", VALUEFUNC(_wrap_Weibull_chf), -1);
  rb_define_method(SwigClassWeibull.klass, "mean", VALUEFUNC(_wrap_Weibull_mean), -1);
  rb_define_method(SwigClassWeibull.klass, "median", VALUEFUNC(_wrap_Weibull_median), -1);
  rb_define_method(SwigClassWeibull.klass, "mode", VALUEFUNC(_wrap_Weibull_mode), -1);
  rb_define_method(SwigClassWeibull.klass, "standard_deviation", VALUEFUNC(_wrap_Weibull_standard_deviation), -1);
  rb_define_method(SwigClassWeibull.klass, "variance", VALUEFUNC(_wrap_Weibull_variance), -1);
  rb_define_method(SwigClassWeibull.klass, "skewness", VALUEFUNC(_wrap_Weibull_skewness), -1);
  rb_define_method(SwigClassWeibull.klass, "kurtosis", VALUEFUNC(_wrap_Weibull_kurtosis), -1);
  rb_define_method(SwigClassWeibull.klass, "kurtosis_excess", VALUEFUNC(_wrap_Weibull_kurtosis_excess), -1);
  rb_define_method(SwigClassWeibull.klass, "range", VALUEFUNC(_wrap_Weibull_range), -1);
  rb_define_method(SwigClassWeibull.klass, "support", VALUEFUNC(_wrap_Weibull_support), -1);
  SwigClassWeibull.mark = 0;
  SwigClassWeibull.destroy = (void (*)(void *)) free_boost_math_weibull_distribution_Sl_double_Sc_policies_policy_Sl__Sg__Sg_;
  SwigClassWeibull.trackObjects = 0;
}

